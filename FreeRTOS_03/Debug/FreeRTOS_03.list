
FreeRTOS_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008294  08008294  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008294  08008294  00018294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800829c  0800829c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800829c  0800829c  0001829c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082a0  080082a0  000182a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080082a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d94  20000074  08008318  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e08  08008318  00022e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e707  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034b0  00000000  00000000  0003e7ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001640  00000000  00000000  00041c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014c8  00000000  00000000  000432a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000047dd  00000000  00000000  00044768  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000127fe  00000000  00000000  00048f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fee6a  00000000  00000000  0005b743  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a5ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006474  00000000  00000000  0015a628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f28 	.word	0x08007f28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007f28 	.word	0x08007f28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000574:	f000 fb99 	bl	8000caa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000578:	f000 f83c 	bl	80005f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800057c:	f000 f8e0 	bl	8000740 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000580:	f000 f8ae 	bl	80006e0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(250);
 8000584:	20fa      	movs	r0, #250	; 0xfa
 8000586:	f000 fbc9 	bl	8000d1c <HAL_Delay>
	KERNEL_DBG(WELCOME_MSG);
 800058a:	4812      	ldr	r0, [pc, #72]	; (80005d4 <main+0x64>)
 800058c:	f006 fdf8 	bl	8007180 <puts>
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <main+0x68>)
 8000592:	f006 fdf5 	bl	8007180 <puts>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000596:	f003 f977 	bl	8003888 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of MyToken */
	MyTokenHandle = osSemaphoreNew(1, 1, &MyToken_attributes);
 800059a:	4a10      	ldr	r2, [pc, #64]	; (80005dc <main+0x6c>)
 800059c:	2101      	movs	r1, #1
 800059e:	2001      	movs	r0, #1
 80005a0:	f003 faf0 	bl	8003b84 <osSemaphoreNew>
 80005a4:	4602      	mov	r2, r0
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <main+0x70>)
 80005a8:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */

	/* creation of Start */
	StartHandle = osThreadNew(MainThread, NULL, &Start_attributes);
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <main+0x74>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <main+0x78>)
 80005b0:	f003 f9d4 	bl	800395c <osThreadNew>
 80005b4:	4602      	mov	r2, r0
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <main+0x7c>)
 80005b8:	601a      	str	r2, [r3, #0]
	if(StartHandle==NULL)
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <main+0x7c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d105      	bne.n	80005ce <main+0x5e>
	{
		KERNEL_DBG("Failed to create MainThread");
 80005c2:	480b      	ldr	r0, [pc, #44]	; (80005f0 <main+0x80>)
 80005c4:	f006 fd68 	bl	8007098 <iprintf>
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <main+0x68>)
 80005ca:	f006 fdd9 	bl	8007180 <puts>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80005ce:	f003 f98f 	bl	80038f0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80005d2:	e7fe      	b.n	80005d2 <main+0x62>
 80005d4:	08007f64 	.word	0x08007f64
 80005d8:	0800809c 	.word	0x0800809c
 80005dc:	080081a4 	.word	0x080081a4
 80005e0:	20002cec 	.word	0x20002cec
 80005e4:	08008180 	.word	0x08008180
 80005e8:	08000839 	.word	0x08000839
 80005ec:	20002cf0 	.word	0x20002cf0
 80005f0:	080080a0 	.word	0x080080a0

080005f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0b8      	sub	sp, #224	; 0xe0
 80005f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fe:	2244      	movs	r2, #68	; 0x44
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f006 fd3f 	bl	8007086 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000608:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000618:	463b      	mov	r3, r7
 800061a:	2288      	movs	r2, #136	; 0x88
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fd31 	bl	8007086 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 800064a:	230a      	movs	r3, #10
 800064c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000662:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fe9a 	bl	80013a0 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x82>
		Error_Handler();
 8000672:	f000 f935 	bl	80008e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000694:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fa66 	bl	8001b6c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xb6>
		Error_Handler();
 80006a6:	f000 f91b 	bl	80008e0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006b2:	463b      	mov	r3, r7
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fc8f 	bl	8001fd8 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xd0>
		Error_Handler();
 80006c0:	f000 f90e 	bl	80008e0 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80006c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c8:	f000 fe14 	bl	80012f4 <HAL_PWREx_ControlVoltageScaling>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xe2>
			!= HAL_OK) {
		Error_Handler();
 80006d2:	f000 f905 	bl	80008e0 <Error_Handler>
	}
}
 80006d6:	bf00      	nop
 80006d8:	37e0      	adds	r7, #224	; 0xe0
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MX_USART2_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000724:	f002 fbda 	bl	8002edc <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800072e:	f000 f8d7 	bl	80008e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20002cf4 	.word	0x20002cf4
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_GPIO_Init+0x8c>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_GPIO_Init+0x8c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <MX_GPIO_Init+0x8c>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BSP_USER_LED1_GPIO_Port, BSP_USER_LED1_Pin,
 800079e:	2200      	movs	r2, #0
 80007a0:	2104      	movs	r1, #4
 80007a2:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0x90>)
 80007a4:	f000 fd66 	bl	8001274 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : BSP_USER_LED1_Pin */
	GPIO_InitStruct.Pin = BSP_USER_LED1_Pin;
 80007a8:	2304      	movs	r3, #4
 80007aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BSP_USER_LED1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0x90>)
 80007c0:	f000 fbb0 	bl	8000f24 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400

080007d4 <BossFunction>:
 * @brief  Function implementing the Boss thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_BossFunction */
void BossFunction(void *argument) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		/* Sending the Binary semaphore at every 2 sec */
		osSemaphoreRelease(MyTokenHandle);
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <BossFunction+0x1c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fad3 	bl	8003d8c <osSemaphoreRelease>
		osDelay(2000);
 80007e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ea:	f003 f99d 	bl	8003b28 <osDelay>
		osSemaphoreRelease(MyTokenHandle);
 80007ee:	e7f5      	b.n	80007dc <BossFunction+0x8>
 80007f0:	20002cec 	.word	0x20002cec

080007f4 <EmployeeFunction>:
 * @brief Function implementing the Employee thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EmployeeFunction */
void EmployeeFunction(void *argument) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EmployeeFunction */
	/* Infinite loop */
	for (;;) {
		/*Waiting forever for semaphore */
		if (osSemaphoreAcquire(MyTokenHandle, osWaitForever) == osOK) {
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <EmployeeFunction+0x34>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fa5b 	bl	8003cc0 <osSemaphoreAcquire>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1f5      	bne.n	80007fc <EmployeeFunction+0x8>
			KERNEL_DBG("Employee allocated task from BOSS!");
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <EmployeeFunction+0x38>)
 8000812:	f006 fc41 	bl	8007098 <iprintf>
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <EmployeeFunction+0x3c>)
 8000818:	f006 fcb2 	bl	8007180 <puts>
			HAL_GPIO_TogglePin(BSP_USER_LED1_GPIO_Port, BSP_USER_LED1_Pin);
 800081c:	2104      	movs	r1, #4
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <EmployeeFunction+0x40>)
 8000820:	f000 fd40 	bl	80012a4 <HAL_GPIO_TogglePin>
		if (osSemaphoreAcquire(MyTokenHandle, osWaitForever) == osOK) {
 8000824:	e7ea      	b.n	80007fc <EmployeeFunction+0x8>
 8000826:	bf00      	nop
 8000828:	20002cec 	.word	0x20002cec
 800082c:	080080bc 	.word	0x080080bc
 8000830:	0800809c 	.word	0x0800809c
 8000834:	48000400 	.word	0x48000400

08000838 <MainThread>:
 * @brief Function implementing the Start thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MainThread */
void MainThread(void *argument) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN MainThread */
	/* Create the thread(s) */
	/* creation of Boss */
	BossHandle = osThreadNew(BossFunction, NULL, &Boss_attributes);
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <MainThread+0x5c>)
 8000842:	2100      	movs	r1, #0
 8000844:	4814      	ldr	r0, [pc, #80]	; (8000898 <MainThread+0x60>)
 8000846:	f003 f889 	bl	800395c <osThreadNew>
 800084a:	4602      	mov	r2, r0
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <MainThread+0x64>)
 800084e:	601a      	str	r2, [r3, #0]
	if (BossHandle == NULL) {
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MainThread+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d105      	bne.n	8000864 <MainThread+0x2c>
		KERNEL_DBG("Failed to create BossThread");
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MainThread+0x68>)
 800085a:	f006 fc1d 	bl	8007098 <iprintf>
 800085e:	4811      	ldr	r0, [pc, #68]	; (80008a4 <MainThread+0x6c>)
 8000860:	f006 fc8e 	bl	8007180 <puts>
	}

	/* creation of Employee */
	EmployeeHandle = osThreadNew(EmployeeFunction, NULL, &Employee_attributes);
 8000864:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MainThread+0x70>)
 8000866:	2100      	movs	r1, #0
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <MainThread+0x74>)
 800086a:	f003 f877 	bl	800395c <osThreadNew>
 800086e:	4602      	mov	r2, r0
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MainThread+0x78>)
 8000872:	601a      	str	r2, [r3, #0]
	if (EmployeeHandle == NULL) {
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MainThread+0x78>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d105      	bne.n	8000888 <MainThread+0x50>
		KERNEL_DBG("Failed to create Employee Thread");
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MainThread+0x7c>)
 800087e:	f006 fc0b 	bl	8007098 <iprintf>
 8000882:	4808      	ldr	r0, [pc, #32]	; (80008a4 <MainThread+0x6c>)
 8000884:	f006 fc7c 	bl	8007180 <puts>
	}
	/* Infinite loop */
	for (;;) {
		osThreadTerminate(StartHandle);
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MainThread+0x80>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f003 f90b 	bl	8003aa8 <osThreadTerminate>
 8000892:	e7f9      	b.n	8000888 <MainThread+0x50>
 8000894:	08008138 	.word	0x08008138
 8000898:	080007d5 	.word	0x080007d5
 800089c:	20002ce8 	.word	0x20002ce8
 80008a0:	080080e0 	.word	0x080080e0
 80008a4:	0800809c 	.word	0x0800809c
 80008a8:	0800815c 	.word	0x0800815c
 80008ac:	080007f5 	.word	0x080007f5
 80008b0:	20002ce4 	.word	0x20002ce4
 80008b4:	080080fc 	.word	0x080080fc
 80008b8:	20002cf0 	.word	0x20002cf0

080008bc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d101      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008ce:	f000 fa05 	bl	8000cdc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40001000 	.word	0x40001000

080008e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008e6:	e7fe      	b.n	80008e6 <Error_Handler+0x6>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_MspInit+0x4c>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_MspInit+0x4c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6613      	str	r3, [r2, #96]	; 0x60
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_MspInit+0x4c>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_MspInit+0x4c>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6593      	str	r3, [r2, #88]	; 0x58
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_MspInit+0x4c>)
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fad3 	bl	8000ed0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0x7c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d127      	bne.n	80009aa <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0x80>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <HAL_UART_MspInit+0x80>)
 8000960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000964:	6593      	str	r3, [r2, #88]	; 0x58
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_UART_MspInit+0x80>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_UART_MspInit+0x80>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_UART_MspInit+0x80>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_UART_MspInit+0x80>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 800098a:	2360      	movs	r3, #96	; 0x60
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800099a:	2307      	movs	r3, #7
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_UART_MspInit+0x84>)
 80009a6:	f000 fabd 	bl	8000f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40004400 	.word	0x40004400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000c00 	.word	0x48000c00

080009c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08c      	sub	sp, #48	; 0x30
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2036      	movs	r0, #54	; 0x36
 80009d6:	f000 fa7b 	bl	8000ed0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009da:	2036      	movs	r0, #54	; 0x36
 80009dc:	f000 fa94 	bl	8000f08 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <HAL_InitTick+0x9c>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e4:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <HAL_InitTick+0x9c>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6593      	str	r3, [r2, #88]	; 0x58
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <HAL_InitTick+0x9c>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f8:	f107 0210 	add.w	r2, r7, #16
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fa56 	bl	8001eb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a08:	f001 fa28 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8000a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <HAL_InitTick+0xa0>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0c9b      	lsrs	r3, r3, #18
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <HAL_InitTick+0xa8>)
 8000a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a3e:	f001 ff7b 	bl	8002938 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d104      	bne.n	8000a52 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <HAL_InitTick+0xa4>)
 8000a4a:	f001 ffd7 	bl	80029fc <HAL_TIM_Base_Start_IT>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	431bde83 	.word	0x431bde83
 8000a64:	20002d74 	.word	0x20002d74
 8000a68:	40001000 	.word	0x40001000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <TIM6_DAC_IRQHandler+0x10>)
 8000a9e:	f002 f81d 	bl	8002adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20002d74 	.word	0x20002d74

08000aac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	e00a      	b.n	8000ad4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000abe:	f3af 8000 	nop.w
 8000ac2:	4601      	mov	r1, r0
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	1c5a      	adds	r2, r3, #1
 8000ac8:	60ba      	str	r2, [r7, #8]
 8000aca:	b2ca      	uxtb	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbf0      	blt.n	8000abe <_read+0x12>
	}

return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 250)== HAL_OK)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	23fa      	movs	r3, #250	; 0xfa
 8000afa:	68b9      	ldr	r1, [r7, #8]
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <_write+0x2c>)
 8000afe:	f002 fa3b 	bl	8002f78 <HAL_UART_Transmit>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <_write+0x24>
	{
		return len;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	e7ff      	b.n	8000b0c <_write+0x24>
	}
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20002cf4 	.word	0x20002cf4

08000b18 <_close>:

int _close(int file)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	return -1;
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b40:	605a      	str	r2, [r3, #4]
	return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_isatty>:

int _isatty(int file)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	return 1;
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
	return 0;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f006 fa34 	bl	800701c <__errno>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20018000 	.word	0x20018000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	20000090 	.word	0x20000090
 8000be8:	20002e08 	.word	0x20002e08

08000bec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <SystemInit+0x64>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <SystemInit+0x64>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <SystemInit+0x68>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <SystemInit+0x68>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <SystemInit+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <SystemInit+0x68>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <SystemInit+0x68>)
 8000c18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <SystemInit+0x68>)
 8000c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <SystemInit+0x68>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <SystemInit+0x68>)
 8000c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <SystemInit+0x68>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SystemInit+0x64>)
 8000c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c42:	609a      	str	r2, [r3, #8]
#endif
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	40021000 	.word	0x40021000

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ffc6 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c60:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c62:	e003      	b.n	8000c6c <LoopCopyDataInit>

08000c64 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c66:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c68:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c6a:	3104      	adds	r1, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c6c:	480a      	ldr	r0, [pc, #40]	; (8000c98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c70:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c72:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c74:	d3f6      	bcc.n	8000c64 <CopyDataInit>
	ldr	r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c78:	e002      	b.n	8000c80 <LoopFillZerobss>

08000c7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c7a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c7c:	f842 3b04 	str.w	r3, [r2], #4

08000c80 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <LoopForever+0x16>)
	cmp	r2, r3
 8000c82:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c84:	d3f9      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f006 f9cf 	bl	8007028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fc71 	bl	8000570 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c94:	080082a4 	.word	0x080082a4
	ldr	r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c9c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000ca0:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000ca4:	20002e08 	.word	0x20002e08

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>

08000caa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f900 	bl	8000eba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fe80 	bl	80009c0 <HAL_InitTick>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	e001      	b.n	8000cd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ccc:	f7ff fe0c 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20002dc0 	.word	0x20002dc0

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20002dc0 	.word	0x20002dc0

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_Delay+0x40>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff4c 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee2:	f7ff ff61 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000ee6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	6978      	ldr	r0, [r7, #20]
 8000eee:	f7ff ffb1 	bl	8000e54 <NVIC_EncodePriority>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff80 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff54 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	e17f      	b.n	8001234 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	4013      	ands	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 8171 	beq.w	800122e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d00b      	beq.n	8000f6c <HAL_GPIO_Init+0x48>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d007      	beq.n	8000f6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f60:	2b11      	cmp	r3, #17
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b12      	cmp	r3, #18
 8000f6a:	d130      	bne.n	8000fce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	f003 0201 	and.w	r2, r3, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d118      	bne.n	800100c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b02      	cmp	r3, #2
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x128>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b12      	cmp	r3, #18
 800104a:	d123      	bne.n	8001094 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	6939      	ldr	r1, [r7, #16]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80ac 	beq.w	800122e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b5e      	ldr	r3, [pc, #376]	; (8001250 <HAL_GPIO_Init+0x32c>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	4a5d      	ldr	r2, [pc, #372]	; (8001250 <HAL_GPIO_Init+0x32c>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6613      	str	r3, [r2, #96]	; 0x60
 80010e2:	4b5b      	ldr	r3, [pc, #364]	; (8001250 <HAL_GPIO_Init+0x32c>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ee:	4a59      	ldr	r2, [pc, #356]	; (8001254 <HAL_GPIO_Init+0x330>)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001118:	d025      	beq.n	8001166 <HAL_GPIO_Init+0x242>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4e      	ldr	r2, [pc, #312]	; (8001258 <HAL_GPIO_Init+0x334>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d01f      	beq.n	8001162 <HAL_GPIO_Init+0x23e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4d      	ldr	r2, [pc, #308]	; (800125c <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0x23a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x236>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4b      	ldr	r2, [pc, #300]	; (8001264 <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x232>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4a      	ldr	r2, [pc, #296]	; (8001268 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x22e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a49      	ldr	r2, [pc, #292]	; (800126c <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x22a>
 800114a:	2306      	movs	r3, #6
 800114c:	e00c      	b.n	8001168 <HAL_GPIO_Init+0x244>
 800114e:	2307      	movs	r3, #7
 8001150:	e00a      	b.n	8001168 <HAL_GPIO_Init+0x244>
 8001152:	2305      	movs	r3, #5
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x244>
 8001156:	2304      	movs	r3, #4
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x244>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x244>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x244>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x244>
 8001166:	2300      	movs	r3, #0
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001178:	4936      	ldr	r1, [pc, #216]	; (8001254 <HAL_GPIO_Init+0x330>)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001186:	4b3a      	ldr	r3, [pc, #232]	; (8001270 <HAL_GPIO_Init+0x34c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011aa:	4a31      	ldr	r2, [pc, #196]	; (8001270 <HAL_GPIO_Init+0x34c>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_GPIO_Init+0x34c>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d4:	4a26      	ldr	r2, [pc, #152]	; (8001270 <HAL_GPIO_Init+0x34c>)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_GPIO_Init+0x34c>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011fe:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <HAL_GPIO_Init+0x34c>)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_GPIO_Init+0x34c>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_GPIO_Init+0x34c>)
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	f47f ae78 	bne.w	8000f34 <HAL_GPIO_Init+0x10>
  }
}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	48000400 	.word	0x48000400
 800125c:	48000800 	.word	0x48000800
 8001260:	48000c00 	.word	0x48000c00
 8001264:	48001000 	.word	0x48001000
 8001268:	48001400 	.word	0x48001400
 800126c:	48001800 	.word	0x48001800
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001290:	e002      	b.n	8001298 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43d9      	mvns	r1, r3
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	400b      	ands	r3, r1
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40007000 	.word	0x40007000

080012f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001302:	d130      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800130c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001310:	d038      	beq.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2232      	movs	r2, #50	; 0x32
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	0c9b      	lsrs	r3, r3, #18
 8001334:	3301      	adds	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001338:	e002      	b.n	8001340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3b01      	subs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134c:	d102      	bne.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f2      	bne.n	800133a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001360:	d110      	bne.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e00f      	b.n	8001386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800136e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001372:	d007      	beq.n	8001384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40007000 	.word	0x40007000
 8001398:	20000000 	.word	0x20000000
 800139c:	431bde83 	.word	0x431bde83

080013a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e3d4      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b2:	4ba1      	ldr	r3, [pc, #644]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013bc:	4b9e      	ldr	r3, [pc, #632]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80e4 	beq.w	800159c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <HAL_RCC_OscConfig+0x4a>
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b0c      	cmp	r3, #12
 80013de:	f040 808b 	bne.w	80014f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	f040 8087 	bne.w	80014f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ea:	4b93      	ldr	r3, [pc, #588]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_RCC_OscConfig+0x62>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e3ac      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1a      	ldr	r2, [r3, #32]
 8001406:	4b8c      	ldr	r3, [pc, #560]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_RCC_OscConfig+0x7c>
 8001412:	4b89      	ldr	r3, [pc, #548]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800141a:	e005      	b.n	8001428 <HAL_RCC_OscConfig+0x88>
 800141c:	4b86      	ldr	r3, [pc, #536]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800141e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001428:	4293      	cmp	r3, r2
 800142a:	d223      	bcs.n	8001474 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 fd71 	bl	8001f18 <RCC_SetFlashLatencyFromMSIRange>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e38d      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001440:	4b7d      	ldr	r3, [pc, #500]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a7c      	ldr	r2, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b7a      	ldr	r3, [pc, #488]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4977      	ldr	r1, [pc, #476]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145e:	4b76      	ldr	r3, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	4972      	ldr	r1, [pc, #456]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
 8001472:	e025      	b.n	80014c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001474:	4b70      	ldr	r3, [pc, #448]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a6f      	ldr	r2, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	496a      	ldr	r1, [pc, #424]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001492:	4b69      	ldr	r3, [pc, #420]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	4965      	ldr	r1, [pc, #404]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fd31 	bl	8001f18 <RCC_SetFlashLatencyFromMSIRange>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e34d      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014c0:	f000 fc36 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 80014c4:	4601      	mov	r1, r0
 80014c6:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	4a5a      	ldr	r2, [pc, #360]	; (800163c <HAL_RCC_OscConfig+0x29c>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	fa21 f303 	lsr.w	r3, r1, r3
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x2a0>)
 80014de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014e0:	4b58      	ldr	r3, [pc, #352]	; (8001644 <HAL_RCC_OscConfig+0x2a4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fa6b 	bl	80009c0 <HAL_InitTick>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d052      	beq.n	800159a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	e331      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d032      	beq.n	8001566 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001500:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800150c:	f7ff fbfa 	bl	8000d04 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001514:	f7ff fbf6 	bl	8000d04 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e31a      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	493b      	ldr	r1, [pc, #236]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	4936      	ldr	r1, [pc, #216]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
 8001564:	e01a      	b.n	800159c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a33      	ldr	r2, [pc, #204]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001572:	f7ff fbc7 	bl	8000d04 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157a:	f7ff fbc3 	bl	8000d04 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e2e7      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x1da>
 8001598:	e000      	b.n	800159c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800159a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d074      	beq.n	8001692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x21a>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d10e      	bne.n	80015d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d10b      	bne.n	80015d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d064      	beq.n	8001690 <HAL_RCC_OscConfig+0x2f0>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d160      	bne.n	8001690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e2c4      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x24a>
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a15      	ldr	r2, [pc, #84]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e01d      	b.n	8001626 <HAL_RCC_OscConfig+0x286>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f2:	d10c      	bne.n	800160e <HAL_RCC_OscConfig+0x26e>
 80015f4:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 80015fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e00b      	b.n	8001626 <HAL_RCC_OscConfig+0x286>
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_RCC_OscConfig+0x298>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01c      	beq.n	8001668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fb69 	bl	8000d04 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001634:	e011      	b.n	800165a <HAL_RCC_OscConfig+0x2ba>
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	080081b4 	.word	0x080081b4
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fb5c 	bl	8000d04 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e280      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165a:	4baf      	ldr	r3, [pc, #700]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x2a8>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb4c 	bl	8000d04 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fb48 	bl	8000d04 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e26c      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001682:	4ba5      	ldr	r3, [pc, #660]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x2d0>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d060      	beq.n	8001760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_OscConfig+0x310>
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d119      	bne.n	80016de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d116      	bne.n	80016de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b0:	4b99      	ldr	r3, [pc, #612]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x328>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e249      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b93      	ldr	r3, [pc, #588]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	4990      	ldr	r1, [pc, #576]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016dc:	e040      	b.n	8001760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d023      	beq.n	800172e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e6:	4b8c      	ldr	r3, [pc, #560]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a8b      	ldr	r2, [pc, #556]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80016ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7ff fb07 	bl	8000d04 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fa:	f7ff fb03 	bl	8000d04 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e227      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170c:	4b82      	ldr	r3, [pc, #520]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001718:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	061b      	lsls	r3, r3, #24
 8001726:	497c      	ldr	r1, [pc, #496]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
 800172c:	e018      	b.n	8001760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172e:	4b7a      	ldr	r3, [pc, #488]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a79      	ldr	r2, [pc, #484]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff fae3 	bl	8000d04 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff fadf 	bl	8000d04 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e203      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	4b70      	ldr	r3, [pc, #448]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d03c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01c      	beq.n	80017ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001774:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177a:	4a67      	ldr	r2, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff fabe 	bl	8000d04 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178c:	f7ff faba 	bl	8000d04 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1de      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179e:	4b5e      	ldr	r3, [pc, #376]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0ef      	beq.n	800178c <HAL_RCC_OscConfig+0x3ec>
 80017ac:	e01b      	b.n	80017e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ae:	4b5a      	ldr	r3, [pc, #360]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017be:	f7ff faa1 	bl	8000d04 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c6:	f7ff fa9d 	bl	8000d04 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1c1      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d8:	4b4f      	ldr	r3, [pc, #316]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ef      	bne.n	80017c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80a6 	beq.w	8001940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017f8:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10d      	bne.n	8001820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	4b44      	ldr	r3, [pc, #272]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	4a43      	ldr	r2, [pc, #268]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6593      	str	r3, [r2, #88]	; 0x58
 8001810:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800181c:	2301      	movs	r3, #1
 800181e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001820:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_RCC_OscConfig+0x57c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d118      	bne.n	800185e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800182c:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_OscConfig+0x57c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3a      	ldr	r2, [pc, #232]	; (800191c <HAL_RCC_OscConfig+0x57c>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001838:	f7ff fa64 	bl	8000d04 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001840:	f7ff fa60 	bl	8000d04 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e184      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_OscConfig+0x57c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d108      	bne.n	8001878 <HAL_RCC_OscConfig+0x4d8>
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186c:	4a2a      	ldr	r2, [pc, #168]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001876:	e024      	b.n	80018c2 <HAL_RCC_OscConfig+0x522>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d110      	bne.n	80018a2 <HAL_RCC_OscConfig+0x502>
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a24      	ldr	r2, [pc, #144]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	4a20      	ldr	r2, [pc, #128]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a0:	e00f      	b.n	80018c2 <HAL_RCC_OscConfig+0x522>
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d016      	beq.n	80018f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ca:	f7ff fa1b 	bl	8000d04 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff fa17 	bl	8000d04 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e139      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x578>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0ed      	beq.n	80018d2 <HAL_RCC_OscConfig+0x532>
 80018f6:	e01a      	b.n	800192e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fa04 	bl	8000d04 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fe:	e00f      	b.n	8001920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff fa00 	bl	8000d04 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d906      	bls.n	8001920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e122      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	4b90      	ldr	r3, [pc, #576]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1e8      	bne.n	8001900 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b8b      	ldr	r3, [pc, #556]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	4a8a      	ldr	r2, [pc, #552]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 800193a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 8108 	beq.w	8001b5a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	2b02      	cmp	r3, #2
 8001950:	f040 80d0 	bne.w	8001af4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001954:	4b83      	ldr	r3, [pc, #524]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	429a      	cmp	r2, r3
 8001966:	d130      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	3b01      	subs	r3, #1
 8001974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d127      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d11f      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001994:	2a07      	cmp	r2, #7
 8001996:	bf14      	ite	ne
 8001998:	2201      	movne	r2, #1
 800199a:	2200      	moveq	r2, #0
 800199c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800199e:	4293      	cmp	r3, r2
 80019a0:	d113      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	3b01      	subs	r3, #1
 80019c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d06e      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	d069      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019d0:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019dc:	4b61      	ldr	r3, [pc, #388]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0b7      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019ec:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 80019f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f8:	f7ff f984 	bl	8000d04 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f980 	bl	8000d04 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e0a4      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a12:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1e:	4b51      	ldr	r3, [pc, #324]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_RCC_OscConfig+0x7c8>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a2e:	3a01      	subs	r2, #1
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a38:	0212      	lsls	r2, r2, #8
 8001a3a:	4311      	orrs	r1, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a40:	0852      	lsrs	r2, r2, #1
 8001a42:	3a01      	subs	r2, #1
 8001a44:	0552      	lsls	r2, r2, #21
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a4c:	0852      	lsrs	r2, r2, #1
 8001a4e:	3a01      	subs	r2, #1
 8001a50:	0652      	lsls	r2, r2, #25
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a58:	0912      	lsrs	r2, r2, #4
 8001a5a:	0452      	lsls	r2, r2, #17
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	4941      	ldr	r1, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a3e      	ldr	r2, [pc, #248]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a70:	4b3c      	ldr	r3, [pc, #240]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4a3b      	ldr	r2, [pc, #236]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a7c:	f7ff f942 	bl	8000d04 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f93e 	bl	8000d04 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e062      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa2:	e05a      	b.n	8001b5a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e059      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d152      	bne.n	8001b5a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001acc:	f7ff f91a 	bl	8000d04 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f916 	bl	8000d04 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e03a      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x734>
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d02d      	beq.n	8001b56 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b04:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b18:	f023 0303 	bic.w	r3, r3, #3
 8001b1c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f8e9 	bl	8000d04 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f8e5 	bl	8000d04 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e009      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_RCC_OscConfig+0x7c4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x796>
 8001b54:	e001      	b.n	8001b5a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	f99d808c 	.word	0xf99d808c

08001b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0c8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d910      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	4961      	ldr	r1, [pc, #388]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0b0      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d04c      	beq.n	8001c56 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc4:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d121      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e09e      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d115      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e092      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e086      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c04:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e07e      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c14:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 0203 	bic.w	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	493f      	ldr	r1, [pc, #252]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c26:	f7ff f86d 	bl	8000d04 <HAL_GetTick>
 8001c2a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2e:	f7ff f869 	bl	8000d04 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e066      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 020c 	and.w	r2, r3, #12
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d1eb      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d008      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	492c      	ldr	r1, [pc, #176]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d210      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	4924      	ldr	r1, [pc, #144]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_RCC_ClockConfig+0x1b0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e036      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4918      	ldr	r1, [pc, #96]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4910      	ldr	r1, [pc, #64]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce2:	f000 f825 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_RCC_ClockConfig+0x1b4>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	5cd3      	ldrb	r3, [r2, r3]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fe5a 	bl	80009c0 <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d10:	7afb      	ldrb	r3, [r7, #11]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	080081b4 	.word	0x080081b4
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d48:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x34>
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d121      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d11e      	bne.n	8001da2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d64:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e005      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d8c:	4a2a      	ldr	r2, [pc, #168]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10d      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	e004      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001db6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d133      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d002      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xa4>
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0xaa>
 8001dd2:	e005      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dd6:	617b      	str	r3, [r7, #20]
      break;
 8001dd8:	e005      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ddc:	617b      	str	r3, [r7, #20]
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	617b      	str	r3, [r7, #20]
      break;
 8001de4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	3301      	adds	r3, #1
 8001df2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	fb02 f203 	mul.w	r2, r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0e5b      	lsrs	r3, r3, #25
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e26:	69bb      	ldr	r3, [r7, #24]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3724      	adds	r7, #36	; 0x24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	080081cc 	.word	0x080081cc
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000000 	.word	0x20000000

08001e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e64:	4601      	mov	r1, r0
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	080081c4 	.word	0x080081c4

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e8c:	f7ff ffda 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e90:	4601      	mov	r1, r0
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0adb      	lsrs	r3, r3, #11
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	080081c4 	.word	0x080081c4

08001eb4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_RCC_GetClockConfig+0x60>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0207 	and.w	r2, r3, #7
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40022000 	.word	0x40022000

08001f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f24:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f30:	f7ff f9d2 	bl	80012d8 <HAL_PWREx_GetVoltageRange>
 8001f34:	6178      	str	r0, [r7, #20]
 8001f36:	e014      	b.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f42:	6593      	str	r3, [r2, #88]	; 0x58
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f50:	f7ff f9c2 	bl	80012d8 <HAL_PWREx_GetVoltageRange>
 8001f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f68:	d10b      	bne.n	8001f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d919      	bls.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2ba0      	cmp	r3, #160	; 0xa0
 8001f74:	d902      	bls.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f76:	2302      	movs	r3, #2
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e013      	b.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	e010      	b.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d902      	bls.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f88:	2303      	movs	r3, #3
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	e00a      	b.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b80      	cmp	r3, #128	; 0x80
 8001f92:	d102      	bne.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f94:	2302      	movs	r3, #2
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	e004      	b.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b70      	cmp	r3, #112	; 0x70
 8001f9e:	d101      	bne.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 0207 	bic.w	r2, r3, #7
 8001fac:	4909      	ldr	r1, [pc, #36]	; (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d001      	beq.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40022000 	.word	0x40022000

08001fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d03f      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffc:	d01c      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002002:	d802      	bhi.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002008:	e01f      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800200a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800200e:	d003      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002010:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002014:	d01c      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002016:	e018      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002018:	4b85      	ldr	r3, [pc, #532]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4a84      	ldr	r2, [pc, #528]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800201e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002022:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002024:	e015      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3304      	adds	r3, #4
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fab9 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 8002032:	4603      	mov	r3, r0
 8002034:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002036:	e00c      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3320      	adds	r3, #32
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fba0 	bl	8002784 <RCCEx_PLLSAI2_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002048:	e003      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	74fb      	strb	r3, [r7, #19]
      break;
 800204e:	e000      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10b      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002058:	4b75      	ldr	r3, [pc, #468]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002066:	4972      	ldr	r1, [pc, #456]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800206e:	e001      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d03f      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d01c      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800208a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208e:	d802      	bhi.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00e      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002094:	e01f      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800209a:	d003      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800209c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020a0:	d01c      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80020a2:	e018      	b.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020a4:	4b62      	ldr	r3, [pc, #392]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a61      	ldr	r2, [pc, #388]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020b0:	e015      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fa73 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020c2:	e00c      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3320      	adds	r3, #32
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fb5a 	bl	8002784 <RCCEx_PLLSAI2_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020d4:	e003      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	74fb      	strb	r3, [r7, #19]
      break;
 80020da:	e000      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80020dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020e4:	4b52      	ldr	r3, [pc, #328]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f2:	494f      	ldr	r1, [pc, #316]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020fa:	e001      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a0 	beq.w	800224e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002122:	2300      	movs	r3, #0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	4b41      	ldr	r3, [pc, #260]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	4a40      	ldr	r2, [pc, #256]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002132:	6593      	str	r3, [r2, #88]	; 0x58
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002140:	2301      	movs	r3, #1
 8002142:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002150:	f7fe fdd8 	bl	8000d04 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002156:	e009      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002158:	f7fe fdd4 	bl	8000d04 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d902      	bls.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	74fb      	strb	r3, [r7, #19]
        break;
 800216a:	e005      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ef      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d15c      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800217e:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002188:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01f      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	d019      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	4a20      	ldr	r2, [pc, #128]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021c8:	4a19      	ldr	r2, [pc, #100]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7fe fd93 	bl	8000d04 <HAL_GetTick>
 80021de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e0:	e00b      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe fd8f 	bl	8000d04 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d902      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	74fb      	strb	r3, [r7, #19]
            break;
 80021f8:	e006      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0ec      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800221e:	4904      	ldr	r1, [pc, #16]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002226:	e009      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	74bb      	strb	r3, [r7, #18]
 800222c:	e006      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223c:	7c7b      	ldrb	r3, [r7, #17]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4b9e      	ldr	r3, [pc, #632]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	4a9d      	ldr	r2, [pc, #628]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800225a:	4b98      	ldr	r3, [pc, #608]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f023 0203 	bic.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	4994      	ldr	r1, [pc, #592]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800227c:	4b8f      	ldr	r3, [pc, #572]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f023 020c 	bic.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	498c      	ldr	r1, [pc, #560]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800229e:	4b87      	ldr	r3, [pc, #540]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	4983      	ldr	r1, [pc, #524]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022c0:	4b7e      	ldr	r3, [pc, #504]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	497b      	ldr	r1, [pc, #492]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022e2:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f0:	4972      	ldr	r1, [pc, #456]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002304:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	496a      	ldr	r1, [pc, #424]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	4961      	ldr	r1, [pc, #388]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002348:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	4959      	ldr	r1, [pc, #356]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800236a:	4b54      	ldr	r3, [pc, #336]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002378:	4950      	ldr	r1, [pc, #320]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238c:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	4948      	ldr	r1, [pc, #288]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ae:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	493f      	ldr	r1, [pc, #252]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d028      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d0:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023de:	4937      	ldr	r1, [pc, #220]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ee:	d106      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f0:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a31      	ldr	r2, [pc, #196]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fa:	60d3      	str	r3, [r2, #12]
 80023fc:	e011      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002402:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002406:	d10c      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	2101      	movs	r1, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f8c8 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d028      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	491f      	ldr	r1, [pc, #124]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800244c:	d106      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002458:	60d3      	str	r3, [r2, #12]
 800245a:	e011      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002464:	d10c      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	2101      	movs	r1, #1
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f899 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02b      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249a:	4908      	ldr	r1, [pc, #32]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024aa:	d109      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a02      	ldr	r2, [pc, #8]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b6:	60d3      	str	r3, [r2, #12]
 80024b8:	e014      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2101      	movs	r1, #1
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f867 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02f      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024fe:	4928      	ldr	r1, [pc, #160]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800250a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800250e:	d10d      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3304      	adds	r3, #4
 8002514:	2102      	movs	r1, #2
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f844 	bl	80025a4 <RCCEx_PLLSAI1_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d014      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002526:	7cfb      	ldrb	r3, [r7, #19]
 8002528:	74bb      	strb	r3, [r7, #18]
 800252a:	e011      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002534:	d10c      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3320      	adds	r3, #32
 800253a:	2102      	movs	r1, #2
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f921 	bl	8002784 <RCCEx_PLLSAI2_Config>
 8002542:	4603      	mov	r3, r0
 8002544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800256a:	490d      	ldr	r1, [pc, #52]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800258e:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002596:	7cbb      	ldrb	r3, [r7, #18]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d018      	beq.n	80025f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025be:	4b70      	ldr	r3, [pc, #448]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0203 	and.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d10d      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
       ||
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025d6:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
       ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d044      	beq.n	8002674 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	e041      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d00c      	beq.n	8002612 <RCCEx_PLLSAI1_Config+0x6e>
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d013      	beq.n	8002624 <RCCEx_PLLSAI1_Config+0x80>
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d120      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002600:	4b5f      	ldr	r3, [pc, #380]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d11d      	bne.n	8002648 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002610:	e01a      	b.n	8002648 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002612:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002622:	e013      	b.n	800264c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002624:	4b56      	ldr	r3, [pc, #344]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10f      	bne.n	8002650 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002640:	e006      	b.n	8002650 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      break;
 8002646:	e004      	b.n	8002652 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002648:	bf00      	nop
 800264a:	e002      	b.n	8002652 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002650:	bf00      	nop
    }

    if(status == HAL_OK)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10d      	bne.n	8002674 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002658:	4b49      	ldr	r3, [pc, #292]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6819      	ldr	r1, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	3b01      	subs	r3, #1
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	430b      	orrs	r3, r1
 800266e:	4944      	ldr	r1, [pc, #272]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002670:	4313      	orrs	r3, r2
 8002672:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d17d      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a40      	ldr	r2, [pc, #256]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002680:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002686:	f7fe fb3d 	bl	8000d04 <HAL_GetTick>
 800268a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800268c:	e009      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800268e:	f7fe fb39 	bl	8000d04 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d902      	bls.n	80026a2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	73fb      	strb	r3, [r7, #15]
        break;
 80026a0:	e005      	b.n	80026ae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ef      	bne.n	800268e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d160      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d111      	bne.n	80026de <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6892      	ldr	r2, [r2, #8]
 80026ca:	0211      	lsls	r1, r2, #8
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68d2      	ldr	r2, [r2, #12]
 80026d0:	0912      	lsrs	r2, r2, #4
 80026d2:	0452      	lsls	r2, r2, #17
 80026d4:	430a      	orrs	r2, r1
 80026d6:	492a      	ldr	r1, [pc, #168]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	610b      	str	r3, [r1, #16]
 80026dc:	e027      	b.n	800272e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d112      	bne.n	800270a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6892      	ldr	r2, [r2, #8]
 80026f4:	0211      	lsls	r1, r2, #8
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6912      	ldr	r2, [r2, #16]
 80026fa:	0852      	lsrs	r2, r2, #1
 80026fc:	3a01      	subs	r2, #1
 80026fe:	0552      	lsls	r2, r2, #21
 8002700:	430a      	orrs	r2, r1
 8002702:	491f      	ldr	r1, [pc, #124]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002704:	4313      	orrs	r3, r2
 8002706:	610b      	str	r3, [r1, #16]
 8002708:	e011      	b.n	800272e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002712:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6892      	ldr	r2, [r2, #8]
 800271a:	0211      	lsls	r1, r2, #8
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6952      	ldr	r2, [r2, #20]
 8002720:	0852      	lsrs	r2, r2, #1
 8002722:	3a01      	subs	r2, #1
 8002724:	0652      	lsls	r2, r2, #25
 8002726:	430a      	orrs	r2, r1
 8002728:	4915      	ldr	r1, [pc, #84]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a13      	ldr	r2, [pc, #76]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002738:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7fe fae3 	bl	8000d04 <HAL_GetTick>
 800273e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002740:	e009      	b.n	8002756 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002742:	f7fe fadf 	bl	8000d04 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d902      	bls.n	8002756 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	73fb      	strb	r3, [r7, #15]
          break;
 8002754:	e005      	b.n	8002762 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ef      	beq.n	8002742 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d106      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4903      	ldr	r1, [pc, #12]	; (8002780 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000

08002784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002792:	4b68      	ldr	r3, [pc, #416]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d018      	beq.n	80027d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800279e:	4b65      	ldr	r3, [pc, #404]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0203 	and.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d10d      	bne.n	80027ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
       ||
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027b6:	4b5f      	ldr	r3, [pc, #380]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
       ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d044      	beq.n	8002854 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e041      	b.n	8002854 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d00c      	beq.n	80027f2 <RCCEx_PLLSAI2_Config+0x6e>
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d013      	beq.n	8002804 <RCCEx_PLLSAI2_Config+0x80>
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d120      	bne.n	8002822 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027e0:	4b54      	ldr	r3, [pc, #336]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d11d      	bne.n	8002828 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e01a      	b.n	8002828 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f2:	4b50      	ldr	r3, [pc, #320]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002802:	e013      	b.n	800282c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002810:	4b48      	ldr	r3, [pc, #288]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002820:	e006      	b.n	8002830 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      break;
 8002826:	e004      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002828:	bf00      	nop
 800282a:	e002      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002830:	bf00      	nop
    }

    if(status == HAL_OK)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002838:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	3b01      	subs	r3, #1
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	430b      	orrs	r3, r1
 800284e:	4939      	ldr	r1, [pc, #228]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002850:	4313      	orrs	r3, r2
 8002852:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d167      	bne.n	800292a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800285a:	4b36      	ldr	r3, [pc, #216]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a35      	ldr	r2, [pc, #212]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002866:	f7fe fa4d 	bl	8000d04 <HAL_GetTick>
 800286a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800286c:	e009      	b.n	8002882 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800286e:	f7fe fa49 	bl	8000d04 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d902      	bls.n	8002882 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	73fb      	strb	r3, [r7, #15]
        break;
 8002880:	e005      	b.n	800288e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ef      	bne.n	800286e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d14a      	bne.n	800292a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d111      	bne.n	80028be <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	0211      	lsls	r1, r2, #8
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68d2      	ldr	r2, [r2, #12]
 80028b0:	0912      	lsrs	r2, r2, #4
 80028b2:	0452      	lsls	r2, r2, #17
 80028b4:	430a      	orrs	r2, r1
 80028b6:	491f      	ldr	r1, [pc, #124]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	614b      	str	r3, [r1, #20]
 80028bc:	e011      	b.n	80028e2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6892      	ldr	r2, [r2, #8]
 80028ce:	0211      	lsls	r1, r2, #8
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6912      	ldr	r2, [r2, #16]
 80028d4:	0852      	lsrs	r2, r2, #1
 80028d6:	3a01      	subs	r2, #1
 80028d8:	0652      	lsls	r2, r2, #25
 80028da:	430a      	orrs	r2, r1
 80028dc:	4915      	ldr	r1, [pc, #84]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a13      	ldr	r2, [pc, #76]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ee:	f7fe fa09 	bl	8000d04 <HAL_GetTick>
 80028f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028f4:	e009      	b.n	800290a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028f6:	f7fe fa05 	bl	8000d04 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d902      	bls.n	800290a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	73fb      	strb	r3, [r7, #15]
          break;
 8002908:	e005      	b.n	8002916 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0ef      	beq.n	80028f6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002926:	4313      	orrs	r3, r2
 8002928:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000

08002938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e049      	b.n	80029de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f841 	bl	80029e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 f9f8 	bl	8002d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d001      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e04f      	b.n	8002ab4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01d      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x76>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d018      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x76>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x76>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1e      	ldr	r2, [pc, #120]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00e      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x76>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <HAL_TIM_Base_Start_IT+0xd0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x76>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x76>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d115      	bne.n	8002a9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d015      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0xb4>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d011      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a9c:	e008      	b.n	8002ab0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e000      	b.n	8002ab2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	40000400 	.word	0x40000400
 8002ac8:	40000800 	.word	0x40000800
 8002acc:	40000c00 	.word	0x40000c00
 8002ad0:	40013400 	.word	0x40013400
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	00010007 	.word	0x00010007

08002adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0202 	mvn.w	r2, #2
 8002b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f905 	bl	8002d2e <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8f7 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f908 	bl	8002d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d122      	bne.n	8002b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d11b      	bne.n	8002b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0204 	mvn.w	r2, #4
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8db 	bl	8002d2e <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8cd 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8de 	bl	8002d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d122      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d11b      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0208 	mvn.w	r2, #8
 8002bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f8b1 	bl	8002d2e <HAL_TIM_IC_CaptureCallback>
 8002bcc:	e005      	b.n	8002bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8a3 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f8b4 	bl	8002d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d122      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d11b      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0210 	mvn.w	r2, #16
 8002c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2208      	movs	r2, #8
 8002c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f887 	bl	8002d2e <HAL_TIM_IC_CaptureCallback>
 8002c20:	e005      	b.n	8002c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f879 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f88a 	bl	8002d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d10e      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0201 	mvn.w	r2, #1
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fd fe2e 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b80      	cmp	r3, #128	; 0x80
 8002c6c:	d10e      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d107      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f914 	bl	8002eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9a:	d10e      	bne.n	8002cba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b80      	cmp	r3, #128	; 0x80
 8002ca8:	d107      	bne.n	8002cba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f907 	bl	8002ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d107      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f838 	bl	8002d56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d10e      	bne.n	8002d12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d107      	bne.n	8002d12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f06f 0220 	mvn.w	r2, #32
 8002d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f8c7 	bl	8002ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <TIM_Base_SetConfig+0x114>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d00f      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3d      	ldr	r2, [pc, #244]	; (8002e84 <TIM_Base_SetConfig+0x118>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00b      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3c      	ldr	r2, [pc, #240]	; (8002e88 <TIM_Base_SetConfig+0x11c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d007      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a3b      	ldr	r2, [pc, #236]	; (8002e8c <TIM_Base_SetConfig+0x120>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d003      	beq.n	8002dac <TIM_Base_SetConfig+0x40>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3a      	ldr	r2, [pc, #232]	; (8002e90 <TIM_Base_SetConfig+0x124>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d108      	bne.n	8002dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <TIM_Base_SetConfig+0x114>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01f      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dcc:	d01b      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a2c      	ldr	r2, [pc, #176]	; (8002e84 <TIM_Base_SetConfig+0x118>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d017      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <TIM_Base_SetConfig+0x11c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <TIM_Base_SetConfig+0x120>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00f      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <TIM_Base_SetConfig+0x124>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00b      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <TIM_Base_SetConfig+0x128>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <TIM_Base_SetConfig+0x12c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d003      	beq.n	8002e06 <TIM_Base_SetConfig+0x9a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <TIM_Base_SetConfig+0x130>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d108      	bne.n	8002e18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a10      	ldr	r2, [pc, #64]	; (8002e80 <TIM_Base_SetConfig+0x114>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00f      	beq.n	8002e64 <TIM_Base_SetConfig+0xf8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <TIM_Base_SetConfig+0x124>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00b      	beq.n	8002e64 <TIM_Base_SetConfig+0xf8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <TIM_Base_SetConfig+0x128>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d007      	beq.n	8002e64 <TIM_Base_SetConfig+0xf8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a10      	ldr	r2, [pc, #64]	; (8002e98 <TIM_Base_SetConfig+0x12c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d003      	beq.n	8002e64 <TIM_Base_SetConfig+0xf8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <TIM_Base_SetConfig+0x130>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d103      	bne.n	8002e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	615a      	str	r2, [r3, #20]
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800
 8002e8c:	40000c00 	.word	0x40000c00
 8002e90:	40013400 	.word	0x40013400
 8002e94:	40014000 	.word	0x40014000
 8002e98:	40014400 	.word	0x40014400
 8002e9c:	40014800 	.word	0x40014800

08002ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e040      	b.n	8002f70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd fd1a 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f8c0 	bl	80030a0 <UART_SetConfig>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e022      	b.n	8002f70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fb3e 	bl	80035b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fbc5 	bl	80036f8 <UART_CheckIdleState>
 8002f6e:	4603      	mov	r3, r0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	f040 8081 	bne.w	8003094 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_UART_Transmit+0x26>
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e079      	b.n	8003096 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Transmit+0x38>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e072      	b.n	8003096 <HAL_UART_Transmit+0x11e>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002fc4:	f7fd fe9e 	bl	8000d04 <HAL_GetTick>
 8002fc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	88fa      	ldrh	r2, [r7, #6]
 8002fce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe2:	d108      	bne.n	8002ff6 <HAL_UART_Transmit+0x7e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	e003      	b.n	8002ffe <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003006:	e02d      	b.n	8003064 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fbb5 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e039      	b.n	8003096 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	881a      	ldrh	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003034:	b292      	uxth	r2, r2
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	3302      	adds	r3, #2
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e008      	b.n	8003052 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b292      	uxth	r2, r2
 800304a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	3301      	adds	r3, #1
 8003050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1cb      	bne.n	8003008 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2200      	movs	r2, #0
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fb81 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e005      	b.n	8003096 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80030a4:	b088      	sub	sp, #32
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4bac      	ldr	r3, [pc, #688]	; (8003380 <UART_SetConfig+0x2e0>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	69f9      	ldr	r1, [r7, #28]
 80030d6:	430b      	orrs	r3, r1
 80030d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4aa2      	ldr	r2, [pc, #648]	; (8003384 <UART_SetConfig+0x2e4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	4313      	orrs	r3, r2
 8003108:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	430a      	orrs	r2, r1
 800311c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a99      	ldr	r2, [pc, #612]	; (8003388 <UART_SetConfig+0x2e8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d121      	bne.n	800316c <UART_SetConfig+0xcc>
 8003128:	4b98      	ldr	r3, [pc, #608]	; (800338c <UART_SetConfig+0x2ec>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b03      	cmp	r3, #3
 8003134:	d816      	bhi.n	8003164 <UART_SetConfig+0xc4>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <UART_SetConfig+0x9c>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	0800314d 	.word	0x0800314d
 8003140:	08003159 	.word	0x08003159
 8003144:	08003153 	.word	0x08003153
 8003148:	0800315f 	.word	0x0800315f
 800314c:	2301      	movs	r3, #1
 800314e:	76fb      	strb	r3, [r7, #27]
 8003150:	e0e8      	b.n	8003324 <UART_SetConfig+0x284>
 8003152:	2302      	movs	r3, #2
 8003154:	76fb      	strb	r3, [r7, #27]
 8003156:	e0e5      	b.n	8003324 <UART_SetConfig+0x284>
 8003158:	2304      	movs	r3, #4
 800315a:	76fb      	strb	r3, [r7, #27]
 800315c:	e0e2      	b.n	8003324 <UART_SetConfig+0x284>
 800315e:	2308      	movs	r3, #8
 8003160:	76fb      	strb	r3, [r7, #27]
 8003162:	e0df      	b.n	8003324 <UART_SetConfig+0x284>
 8003164:	2310      	movs	r3, #16
 8003166:	76fb      	strb	r3, [r7, #27]
 8003168:	bf00      	nop
 800316a:	e0db      	b.n	8003324 <UART_SetConfig+0x284>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a87      	ldr	r2, [pc, #540]	; (8003390 <UART_SetConfig+0x2f0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d134      	bne.n	80031e0 <UART_SetConfig+0x140>
 8003176:	4b85      	ldr	r3, [pc, #532]	; (800338c <UART_SetConfig+0x2ec>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	2b0c      	cmp	r3, #12
 8003182:	d829      	bhi.n	80031d8 <UART_SetConfig+0x138>
 8003184:	a201      	add	r2, pc, #4	; (adr r2, 800318c <UART_SetConfig+0xec>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	080031c1 	.word	0x080031c1
 8003190:	080031d9 	.word	0x080031d9
 8003194:	080031d9 	.word	0x080031d9
 8003198:	080031d9 	.word	0x080031d9
 800319c:	080031cd 	.word	0x080031cd
 80031a0:	080031d9 	.word	0x080031d9
 80031a4:	080031d9 	.word	0x080031d9
 80031a8:	080031d9 	.word	0x080031d9
 80031ac:	080031c7 	.word	0x080031c7
 80031b0:	080031d9 	.word	0x080031d9
 80031b4:	080031d9 	.word	0x080031d9
 80031b8:	080031d9 	.word	0x080031d9
 80031bc:	080031d3 	.word	0x080031d3
 80031c0:	2300      	movs	r3, #0
 80031c2:	76fb      	strb	r3, [r7, #27]
 80031c4:	e0ae      	b.n	8003324 <UART_SetConfig+0x284>
 80031c6:	2302      	movs	r3, #2
 80031c8:	76fb      	strb	r3, [r7, #27]
 80031ca:	e0ab      	b.n	8003324 <UART_SetConfig+0x284>
 80031cc:	2304      	movs	r3, #4
 80031ce:	76fb      	strb	r3, [r7, #27]
 80031d0:	e0a8      	b.n	8003324 <UART_SetConfig+0x284>
 80031d2:	2308      	movs	r3, #8
 80031d4:	76fb      	strb	r3, [r7, #27]
 80031d6:	e0a5      	b.n	8003324 <UART_SetConfig+0x284>
 80031d8:	2310      	movs	r3, #16
 80031da:	76fb      	strb	r3, [r7, #27]
 80031dc:	bf00      	nop
 80031de:	e0a1      	b.n	8003324 <UART_SetConfig+0x284>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a6b      	ldr	r2, [pc, #428]	; (8003394 <UART_SetConfig+0x2f4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d120      	bne.n	800322c <UART_SetConfig+0x18c>
 80031ea:	4b68      	ldr	r3, [pc, #416]	; (800338c <UART_SetConfig+0x2ec>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d00f      	beq.n	8003218 <UART_SetConfig+0x178>
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d802      	bhi.n	8003202 <UART_SetConfig+0x162>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <UART_SetConfig+0x16c>
 8003200:	e010      	b.n	8003224 <UART_SetConfig+0x184>
 8003202:	2b20      	cmp	r3, #32
 8003204:	d005      	beq.n	8003212 <UART_SetConfig+0x172>
 8003206:	2b30      	cmp	r3, #48	; 0x30
 8003208:	d009      	beq.n	800321e <UART_SetConfig+0x17e>
 800320a:	e00b      	b.n	8003224 <UART_SetConfig+0x184>
 800320c:	2300      	movs	r3, #0
 800320e:	76fb      	strb	r3, [r7, #27]
 8003210:	e088      	b.n	8003324 <UART_SetConfig+0x284>
 8003212:	2302      	movs	r3, #2
 8003214:	76fb      	strb	r3, [r7, #27]
 8003216:	e085      	b.n	8003324 <UART_SetConfig+0x284>
 8003218:	2304      	movs	r3, #4
 800321a:	76fb      	strb	r3, [r7, #27]
 800321c:	e082      	b.n	8003324 <UART_SetConfig+0x284>
 800321e:	2308      	movs	r3, #8
 8003220:	76fb      	strb	r3, [r7, #27]
 8003222:	e07f      	b.n	8003324 <UART_SetConfig+0x284>
 8003224:	2310      	movs	r3, #16
 8003226:	76fb      	strb	r3, [r7, #27]
 8003228:	bf00      	nop
 800322a:	e07b      	b.n	8003324 <UART_SetConfig+0x284>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a59      	ldr	r2, [pc, #356]	; (8003398 <UART_SetConfig+0x2f8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d120      	bne.n	8003278 <UART_SetConfig+0x1d8>
 8003236:	4b55      	ldr	r3, [pc, #340]	; (800338c <UART_SetConfig+0x2ec>)
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d00f      	beq.n	8003264 <UART_SetConfig+0x1c4>
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d802      	bhi.n	800324e <UART_SetConfig+0x1ae>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <UART_SetConfig+0x1b8>
 800324c:	e010      	b.n	8003270 <UART_SetConfig+0x1d0>
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d005      	beq.n	800325e <UART_SetConfig+0x1be>
 8003252:	2bc0      	cmp	r3, #192	; 0xc0
 8003254:	d009      	beq.n	800326a <UART_SetConfig+0x1ca>
 8003256:	e00b      	b.n	8003270 <UART_SetConfig+0x1d0>
 8003258:	2300      	movs	r3, #0
 800325a:	76fb      	strb	r3, [r7, #27]
 800325c:	e062      	b.n	8003324 <UART_SetConfig+0x284>
 800325e:	2302      	movs	r3, #2
 8003260:	76fb      	strb	r3, [r7, #27]
 8003262:	e05f      	b.n	8003324 <UART_SetConfig+0x284>
 8003264:	2304      	movs	r3, #4
 8003266:	76fb      	strb	r3, [r7, #27]
 8003268:	e05c      	b.n	8003324 <UART_SetConfig+0x284>
 800326a:	2308      	movs	r3, #8
 800326c:	76fb      	strb	r3, [r7, #27]
 800326e:	e059      	b.n	8003324 <UART_SetConfig+0x284>
 8003270:	2310      	movs	r3, #16
 8003272:	76fb      	strb	r3, [r7, #27]
 8003274:	bf00      	nop
 8003276:	e055      	b.n	8003324 <UART_SetConfig+0x284>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a47      	ldr	r2, [pc, #284]	; (800339c <UART_SetConfig+0x2fc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d124      	bne.n	80032cc <UART_SetConfig+0x22c>
 8003282:	4b42      	ldr	r3, [pc, #264]	; (800338c <UART_SetConfig+0x2ec>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003290:	d012      	beq.n	80032b8 <UART_SetConfig+0x218>
 8003292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003296:	d802      	bhi.n	800329e <UART_SetConfig+0x1fe>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <UART_SetConfig+0x20c>
 800329c:	e012      	b.n	80032c4 <UART_SetConfig+0x224>
 800329e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a2:	d006      	beq.n	80032b2 <UART_SetConfig+0x212>
 80032a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032a8:	d009      	beq.n	80032be <UART_SetConfig+0x21e>
 80032aa:	e00b      	b.n	80032c4 <UART_SetConfig+0x224>
 80032ac:	2300      	movs	r3, #0
 80032ae:	76fb      	strb	r3, [r7, #27]
 80032b0:	e038      	b.n	8003324 <UART_SetConfig+0x284>
 80032b2:	2302      	movs	r3, #2
 80032b4:	76fb      	strb	r3, [r7, #27]
 80032b6:	e035      	b.n	8003324 <UART_SetConfig+0x284>
 80032b8:	2304      	movs	r3, #4
 80032ba:	76fb      	strb	r3, [r7, #27]
 80032bc:	e032      	b.n	8003324 <UART_SetConfig+0x284>
 80032be:	2308      	movs	r3, #8
 80032c0:	76fb      	strb	r3, [r7, #27]
 80032c2:	e02f      	b.n	8003324 <UART_SetConfig+0x284>
 80032c4:	2310      	movs	r3, #16
 80032c6:	76fb      	strb	r3, [r7, #27]
 80032c8:	bf00      	nop
 80032ca:	e02b      	b.n	8003324 <UART_SetConfig+0x284>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <UART_SetConfig+0x2e4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d124      	bne.n	8003320 <UART_SetConfig+0x280>
 80032d6:	4b2d      	ldr	r3, [pc, #180]	; (800338c <UART_SetConfig+0x2ec>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e4:	d012      	beq.n	800330c <UART_SetConfig+0x26c>
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ea:	d802      	bhi.n	80032f2 <UART_SetConfig+0x252>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <UART_SetConfig+0x260>
 80032f0:	e012      	b.n	8003318 <UART_SetConfig+0x278>
 80032f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f6:	d006      	beq.n	8003306 <UART_SetConfig+0x266>
 80032f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032fc:	d009      	beq.n	8003312 <UART_SetConfig+0x272>
 80032fe:	e00b      	b.n	8003318 <UART_SetConfig+0x278>
 8003300:	2300      	movs	r3, #0
 8003302:	76fb      	strb	r3, [r7, #27]
 8003304:	e00e      	b.n	8003324 <UART_SetConfig+0x284>
 8003306:	2302      	movs	r3, #2
 8003308:	76fb      	strb	r3, [r7, #27]
 800330a:	e00b      	b.n	8003324 <UART_SetConfig+0x284>
 800330c:	2304      	movs	r3, #4
 800330e:	76fb      	strb	r3, [r7, #27]
 8003310:	e008      	b.n	8003324 <UART_SetConfig+0x284>
 8003312:	2308      	movs	r3, #8
 8003314:	76fb      	strb	r3, [r7, #27]
 8003316:	e005      	b.n	8003324 <UART_SetConfig+0x284>
 8003318:	2310      	movs	r3, #16
 800331a:	76fb      	strb	r3, [r7, #27]
 800331c:	bf00      	nop
 800331e:	e001      	b.n	8003324 <UART_SetConfig+0x284>
 8003320:	2310      	movs	r3, #16
 8003322:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a16      	ldr	r2, [pc, #88]	; (8003384 <UART_SetConfig+0x2e4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	f040 8087 	bne.w	800343e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003330:	7efb      	ldrb	r3, [r7, #27]
 8003332:	2b08      	cmp	r3, #8
 8003334:	d836      	bhi.n	80033a4 <UART_SetConfig+0x304>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <UART_SetConfig+0x29c>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	08003361 	.word	0x08003361
 8003340:	080033a5 	.word	0x080033a5
 8003344:	08003369 	.word	0x08003369
 8003348:	080033a5 	.word	0x080033a5
 800334c:	0800336f 	.word	0x0800336f
 8003350:	080033a5 	.word	0x080033a5
 8003354:	080033a5 	.word	0x080033a5
 8003358:	080033a5 	.word	0x080033a5
 800335c:	08003377 	.word	0x08003377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003360:	f7fe fd7c 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8003364:	6178      	str	r0, [r7, #20]
        break;
 8003366:	e022      	b.n	80033ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003368:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <UART_SetConfig+0x300>)
 800336a:	617b      	str	r3, [r7, #20]
        break;
 800336c:	e01f      	b.n	80033ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336e:	f7fe fcdf 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8003372:	6178      	str	r0, [r7, #20]
        break;
 8003374:	e01b      	b.n	80033ae <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337a:	617b      	str	r3, [r7, #20]
        break;
 800337c:	e017      	b.n	80033ae <UART_SetConfig+0x30e>
 800337e:	bf00      	nop
 8003380:	efff69f3 	.word	0xefff69f3
 8003384:	40008000 	.word	0x40008000
 8003388:	40013800 	.word	0x40013800
 800338c:	40021000 	.word	0x40021000
 8003390:	40004400 	.word	0x40004400
 8003394:	40004800 	.word	0x40004800
 8003398:	40004c00 	.word	0x40004c00
 800339c:	40005000 	.word	0x40005000
 80033a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	76bb      	strb	r3, [r7, #26]
        break;
 80033ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80f1 	beq.w	8003598 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d305      	bcc.n	80033d2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d902      	bls.n	80033d8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	76bb      	strb	r3, [r7, #26]
 80033d6:	e0df      	b.n	8003598 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	4619      	mov	r1, r3
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	f04f 0400 	mov.w	r4, #0
 80033e8:	0214      	lsls	r4, r2, #8
 80033ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80033ee:	020b      	lsls	r3, r1, #8
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6852      	ldr	r2, [r2, #4]
 80033f4:	0852      	lsrs	r2, r2, #1
 80033f6:	4611      	mov	r1, r2
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	eb13 0b01 	adds.w	fp, r3, r1
 8003400:	eb44 0c02 	adc.w	ip, r4, r2
 8003404:	4658      	mov	r0, fp
 8003406:	4661      	mov	r1, ip
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	461a      	mov	r2, r3
 8003412:	4623      	mov	r3, r4
 8003414:	f7fc ff2c 	bl	8000270 <__aeabi_uldivmod>
 8003418:	4603      	mov	r3, r0
 800341a:	460c      	mov	r4, r1
 800341c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003424:	d308      	bcc.n	8003438 <UART_SetConfig+0x398>
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342c:	d204      	bcs.n	8003438 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	e0af      	b.n	8003598 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	76bb      	strb	r3, [r7, #26]
 800343c:	e0ac      	b.n	8003598 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003446:	d15b      	bne.n	8003500 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003448:	7efb      	ldrb	r3, [r7, #27]
 800344a:	2b08      	cmp	r3, #8
 800344c:	d827      	bhi.n	800349e <UART_SetConfig+0x3fe>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <UART_SetConfig+0x3b4>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	08003479 	.word	0x08003479
 8003458:	08003481 	.word	0x08003481
 800345c:	08003489 	.word	0x08003489
 8003460:	0800349f 	.word	0x0800349f
 8003464:	0800348f 	.word	0x0800348f
 8003468:	0800349f 	.word	0x0800349f
 800346c:	0800349f 	.word	0x0800349f
 8003470:	0800349f 	.word	0x0800349f
 8003474:	08003497 	.word	0x08003497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003478:	f7fe fcf0 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 800347c:	6178      	str	r0, [r7, #20]
        break;
 800347e:	e013      	b.n	80034a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003480:	f7fe fd02 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 8003484:	6178      	str	r0, [r7, #20]
        break;
 8003486:	e00f      	b.n	80034a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003488:	4b49      	ldr	r3, [pc, #292]	; (80035b0 <UART_SetConfig+0x510>)
 800348a:	617b      	str	r3, [r7, #20]
        break;
 800348c:	e00c      	b.n	80034a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800348e:	f7fe fc4f 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8003492:	6178      	str	r0, [r7, #20]
        break;
 8003494:	e008      	b.n	80034a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349a:	617b      	str	r3, [r7, #20]
        break;
 800349c:	e004      	b.n	80034a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	76bb      	strb	r3, [r7, #26]
        break;
 80034a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d074      	beq.n	8003598 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	005a      	lsls	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d916      	bls.n	80034fa <UART_SetConfig+0x45a>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d2:	d212      	bcs.n	80034fa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	f023 030f 	bic.w	r3, r3, #15
 80034dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	89fa      	ldrh	r2, [r7, #14]
 80034f6:	60da      	str	r2, [r3, #12]
 80034f8:	e04e      	b.n	8003598 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	76bb      	strb	r3, [r7, #26]
 80034fe:	e04b      	b.n	8003598 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003500:	7efb      	ldrb	r3, [r7, #27]
 8003502:	2b08      	cmp	r3, #8
 8003504:	d827      	bhi.n	8003556 <UART_SetConfig+0x4b6>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <UART_SetConfig+0x46c>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	08003531 	.word	0x08003531
 8003510:	08003539 	.word	0x08003539
 8003514:	08003541 	.word	0x08003541
 8003518:	08003557 	.word	0x08003557
 800351c:	08003547 	.word	0x08003547
 8003520:	08003557 	.word	0x08003557
 8003524:	08003557 	.word	0x08003557
 8003528:	08003557 	.word	0x08003557
 800352c:	0800354f 	.word	0x0800354f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003530:	f7fe fc94 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 8003534:	6178      	str	r0, [r7, #20]
        break;
 8003536:	e013      	b.n	8003560 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003538:	f7fe fca6 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 800353c:	6178      	str	r0, [r7, #20]
        break;
 800353e:	e00f      	b.n	8003560 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <UART_SetConfig+0x510>)
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	e00c      	b.n	8003560 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003546:	f7fe fbf3 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 800354a:	6178      	str	r0, [r7, #20]
        break;
 800354c:	e008      	b.n	8003560 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003552:	617b      	str	r3, [r7, #20]
        break;
 8003554:	e004      	b.n	8003560 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	76bb      	strb	r3, [r7, #26]
        break;
 800355e:	bf00      	nop
    }

    if (pclk != 0U)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d018      	beq.n	8003598 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	085a      	lsrs	r2, r3, #1
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	441a      	add	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	b29b      	uxth	r3, r3
 800357a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0f      	cmp	r3, #15
 8003580:	d908      	bls.n	8003594 <UART_SetConfig+0x4f4>
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d204      	bcs.n	8003594 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	e001      	b.n	8003598 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80035a4:	7ebb      	ldrb	r3, [r7, #26]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80035b0:	00f42400 	.word	0x00f42400

080035b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01a      	beq.n	80036ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b2:	d10a      	bne.n	80036ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003706:	f7fd fafd 	bl	8000d04 <HAL_GetTick>
 800370a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b08      	cmp	r3, #8
 8003718:	d10e      	bne.n	8003738 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800371a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f82a 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e020      	b.n	800377a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d10e      	bne.n	8003764 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003746:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f814 	bl	8003782 <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e00a      	b.n	800377a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003792:	e05d      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379a:	d059      	beq.n	8003850 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379c:	f7fd fab2 	bl	8000d04 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d302      	bcc.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11b      	bne.n	80037ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037c0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e042      	b.n	8003870 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d02b      	beq.n	8003850 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003806:	d123      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003810:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003820:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e00f      	b.n	8003870 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	429a      	cmp	r2, r3
 800386c:	d092      	beq.n	8003794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800388e:	f3ef 8305 	mrs	r3, IPSR
 8003892:	60bb      	str	r3, [r7, #8]
  return(result);
 8003894:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389a:	f3ef 8310 	mrs	r3, PRIMASK
 800389e:	607b      	str	r3, [r7, #4]
  return(result);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038a6:	f3ef 8311 	mrs	r3, BASEPRI
 80038aa:	603b      	str	r3, [r7, #0]
  return(result);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <osKernelInitialize+0x3a>
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <osKernelInitialize+0x64>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d103      	bne.n	80038c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80038ba:	f06f 0305 	mvn.w	r3, #5
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e00c      	b.n	80038dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <osKernelInitialize+0x64>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <osKernelInitialize+0x64>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e002      	b.n	80038dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80038dc:	68fb      	ldr	r3, [r7, #12]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000094 	.word	0x20000094

080038f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038f6:	f3ef 8305 	mrs	r3, IPSR
 80038fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80038fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003902:	f3ef 8310 	mrs	r3, PRIMASK
 8003906:	607b      	str	r3, [r7, #4]
  return(result);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800390e:	f3ef 8311 	mrs	r3, BASEPRI
 8003912:	603b      	str	r3, [r7, #0]
  return(result);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <osKernelStart+0x3a>
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <osKernelStart+0x68>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d103      	bne.n	800392a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003922:	f06f 0305 	mvn.w	r3, #5
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e010      	b.n	800394c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <osKernelStart+0x68>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d109      	bne.n	8003946 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003932:	f7ff ffa1 	bl	8003878 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <osKernelStart+0x68>)
 8003938:	2202      	movs	r2, #2
 800393a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800393c:	f001 fdfe 	bl	800553c <vTaskStartScheduler>
      stat = osOK;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e002      	b.n	800394c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800394a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800394c:	68fb      	ldr	r3, [r7, #12]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000094 	.word	0x20000094

0800395c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b090      	sub	sp, #64	; 0x40
 8003960:	af04      	add	r7, sp, #16
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800396c:	f3ef 8305 	mrs	r3, IPSR
 8003970:	61fb      	str	r3, [r7, #28]
  return(result);
 8003972:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 808f 	bne.w	8003a98 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800397a:	f3ef 8310 	mrs	r3, PRIMASK
 800397e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d105      	bne.n	8003992 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003986:	f3ef 8311 	mrs	r3, BASEPRI
 800398a:	617b      	str	r3, [r7, #20]
  return(result);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <osThreadNew+0x3e>
 8003992:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <osThreadNew+0x148>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d07e      	beq.n	8003a98 <osThreadNew+0x13c>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d07b      	beq.n	8003a98 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80039a4:	2318      	movs	r3, #24
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d045      	beq.n	8003a44 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <osThreadNew+0x6a>
        name = attr->name;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <osThreadNew+0x90>
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	2b38      	cmp	r3, #56	; 0x38
 80039de:	d805      	bhi.n	80039ec <osThreadNew+0x90>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <osThreadNew+0x94>
        return (NULL);
 80039ec:	2300      	movs	r3, #0
 80039ee:	e054      	b.n	8003a9a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <osThreadNew+0xca>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b5b      	cmp	r3, #91	; 0x5b
 8003a0e:	d90a      	bls.n	8003a26 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d006      	beq.n	8003a26 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <osThreadNew+0xca>
        mem = 1;
 8003a20:	2301      	movs	r3, #1
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	e010      	b.n	8003a48 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10c      	bne.n	8003a48 <osThreadNew+0xec>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <osThreadNew+0xec>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <osThreadNew+0xec>
          mem = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
 8003a42:	e001      	b.n	8003a48 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d110      	bne.n	8003a70 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a56:	9202      	str	r2, [sp, #8]
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f001 fabf 	bl	8004fe8 <xTaskCreateStatic>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	e013      	b.n	8003a98 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d110      	bne.n	8003a98 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	f107 0310 	add.w	r3, r7, #16
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f001 fb07 	bl	800509c <xTaskCreate>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d001      	beq.n	8003a98 <osThreadNew+0x13c>
          hTask = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a98:	693b      	ldr	r3, [r7, #16]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3730      	adds	r7, #48	; 0x30
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000094 	.word	0x20000094

08003aa8 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ab4:	f3ef 8305 	mrs	r3, IPSR
 8003ab8:	613b      	str	r3, [r7, #16]
  return(result);
 8003aba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003acc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <osThreadTerminate+0x40>
 8003ad8:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <osThreadTerminate+0x7c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d103      	bne.n	8003ae8 <osThreadTerminate+0x40>
    stat = osErrorISR;
 8003ae0:	f06f 0305 	mvn.w	r3, #5
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	e017      	b.n	8003b18 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8003aee:	f06f 0303 	mvn.w	r3, #3
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	e010      	b.n	8003b18 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8003af6:	69b8      	ldr	r0, [r7, #24]
 8003af8:	f001 fcba 	bl	8005470 <eTaskGetState>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d005      	beq.n	8003b12 <osThreadTerminate+0x6a>
      stat = osOK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8003b0a:	69b8      	ldr	r0, [r7, #24]
 8003b0c:	f001 fc0a 	bl	8005324 <vTaskDelete>
 8003b10:	e002      	b.n	8003b18 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8003b12:	f06f 0302 	mvn.w	r3, #2
 8003b16:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8003b18:	69fb      	ldr	r3, [r7, #28]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000094 	.word	0x20000094

08003b28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b30:	f3ef 8305 	mrs	r3, IPSR
 8003b34:	613b      	str	r3, [r7, #16]
  return(result);
 8003b36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10f      	bne.n	8003b5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b40:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d105      	bne.n	8003b54 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b48:	f3ef 8311 	mrs	r3, BASEPRI
 8003b4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <osDelay+0x3c>
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <osDelay+0x58>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d103      	bne.n	8003b64 <osDelay+0x3c>
    stat = osErrorISR;
 8003b5c:	f06f 0305 	mvn.w	r3, #5
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e007      	b.n	8003b74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f001 fc4a 	bl	8005408 <vTaskDelay>
    }
  }

  return (stat);
 8003b74:	697b      	ldr	r3, [r7, #20]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000094 	.word	0x20000094

08003b84 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b94:	f3ef 8305 	mrs	r3, IPSR
 8003b98:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f040 8087 	bne.w	8003cb0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba6:	617b      	str	r3, [r7, #20]
  return(result);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d105      	bne.n	8003bba <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bae:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb2:	613b      	str	r3, [r7, #16]
  return(result);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <osSemaphoreNew+0x3e>
 8003bba:	4b40      	ldr	r3, [pc, #256]	; (8003cbc <osSemaphoreNew+0x138>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d076      	beq.n	8003cb0 <osSemaphoreNew+0x12c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d073      	beq.n	8003cb0 <osSemaphoreNew+0x12c>
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d86f      	bhi.n	8003cb0 <osSemaphoreNew+0x12c>
    mem = -1;
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d015      	beq.n	8003c08 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <osSemaphoreNew+0x6e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b4f      	cmp	r3, #79	; 0x4f
 8003bea:	d902      	bls.n	8003bf2 <osSemaphoreNew+0x6e>
        mem = 1;
 8003bec:	2301      	movs	r3, #1
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	e00c      	b.n	8003c0c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <osSemaphoreNew+0x88>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <osSemaphoreNew+0x88>
          mem = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	e001      	b.n	8003c0c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c12:	d04d      	beq.n	8003cb0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d129      	bne.n	8003c6e <osSemaphoreNew+0xea>
        if (mem == 1) {
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10b      	bne.n	8003c38 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	2303      	movs	r3, #3
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f000 fa54 	bl	80040dc <xQueueGenericCreateStatic>
 8003c34:	6278      	str	r0, [r7, #36]	; 0x24
 8003c36:	e005      	b.n	8003c44 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003c38:	2203      	movs	r2, #3
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f000 fac0 	bl	80041c2 <xQueueGenericCreate>
 8003c42:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d022      	beq.n	8003c90 <osSemaphoreNew+0x10c>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01f      	beq.n	8003c90 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c50:	2300      	movs	r3, #0
 8003c52:	2200      	movs	r2, #0
 8003c54:	2100      	movs	r1, #0
 8003c56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c58:	f000 fb7c 	bl	8004354 <xQueueGenericSend>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d016      	beq.n	8003c90 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8003c62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c64:	f000 ffef 	bl	8004c46 <vQueueDelete>
            hSemaphore = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6c:	e010      	b.n	8003c90 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d108      	bne.n	8003c86 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fb02 	bl	8004286 <xQueueCreateCountingSemaphoreStatic>
 8003c82:	6278      	str	r0, [r7, #36]	; 0x24
 8003c84:	e004      	b.n	8003c90 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fb31 	bl	80042f0 <xQueueCreateCountingSemaphore>
 8003c8e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <osSemaphoreNew+0x120>
          name = attr->name;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	e001      	b.n	8003ca8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003ca8:	69f9      	ldr	r1, [r7, #28]
 8003caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cac:	f001 f916 	bl	8004edc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3728      	adds	r7, #40	; 0x28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000094 	.word	0x20000094

08003cc0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003cd8:	f06f 0303 	mvn.w	r3, #3
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	e04b      	b.n	8003d78 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce0:	f3ef 8305 	mrs	r3, IPSR
 8003ce4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ce6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10f      	bne.n	8003d0c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cec:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf0:	613b      	str	r3, [r7, #16]
  return(result);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cf8:	f3ef 8311 	mrs	r3, BASEPRI
 8003cfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d026      	beq.n	8003d52 <osSemaphoreAcquire+0x92>
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <osSemaphoreAcquire+0xc4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d122      	bne.n	8003d52 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003d12:	f06f 0303 	mvn.w	r3, #3
 8003d16:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003d18:	e02d      	b.n	8003d76 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	461a      	mov	r2, r3
 8003d24:	2100      	movs	r1, #0
 8003d26:	69b8      	ldr	r0, [r7, #24]
 8003d28:	f000 ff10 	bl	8004b4c <xQueueReceiveFromISR>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d003      	beq.n	8003d3a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003d32:	f06f 0302 	mvn.w	r3, #2
 8003d36:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8003d38:	e01d      	b.n	8003d76 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01a      	beq.n	8003d76 <osSemaphoreAcquire+0xb6>
 8003d40:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <osSemaphoreAcquire+0xc8>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003d50:	e011      	b.n	8003d76 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	69b8      	ldr	r0, [r7, #24]
 8003d56:	f000 fdf1 	bl	800493c <xQueueSemaphoreTake>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d00b      	beq.n	8003d78 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003d66:	f06f 0301 	mvn.w	r3, #1
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	e004      	b.n	8003d78 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003d6e:	f06f 0302 	mvn.w	r3, #2
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	e000      	b.n	8003d78 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003d76:	bf00      	nop
      }
    }
  }

  return (stat);
 8003d78:	69fb      	ldr	r3, [r7, #28]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000094 	.word	0x20000094
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003da2:	f06f 0303 	mvn.w	r3, #3
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	e03e      	b.n	8003e28 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003daa:	f3ef 8305 	mrs	r3, IPSR
 8003dae:	617b      	str	r3, [r7, #20]
  return(result);
 8003db0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10f      	bne.n	8003dd6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dba:	613b      	str	r3, [r7, #16]
  return(result);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8003dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d01e      	beq.n	8003e0c <osSemaphoreRelease+0x80>
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <osSemaphoreRelease+0xa8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d11a      	bne.n	8003e0c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003dda:	f107 0308 	add.w	r3, r7, #8
 8003dde:	4619      	mov	r1, r3
 8003de0:	69b8      	ldr	r0, [r7, #24]
 8003de2:	f000 fc45 	bl	8004670 <xQueueGiveFromISR>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d003      	beq.n	8003df4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003dec:	f06f 0302 	mvn.w	r3, #2
 8003df0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003df2:	e018      	b.n	8003e26 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d015      	beq.n	8003e26 <osSemaphoreRelease+0x9a>
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <osSemaphoreRelease+0xac>)
 8003dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e0a:	e00c      	b.n	8003e26 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2100      	movs	r1, #0
 8003e12:	69b8      	ldr	r0, [r7, #24]
 8003e14:	f000 fa9e 	bl	8004354 <xQueueGenericSend>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d004      	beq.n	8003e28 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003e1e:	f06f 0302 	mvn.w	r3, #2
 8003e22:	61fb      	str	r3, [r7, #28]
 8003e24:	e000      	b.n	8003e28 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003e26:	bf00      	nop
    }
  }

  return (stat);
 8003e28:	69fb      	ldr	r3, [r7, #28]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000094 	.word	0x20000094
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <vApplicationGetIdleTaskMemory+0x30>)
 8003e52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2280      	movs	r2, #128	; 0x80
 8003e58:	601a      	str	r2, [r3, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000098 	.word	0x20000098
 8003e6c:	200000f4 	.word	0x200000f4

08003e70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003e80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4a06      	ldr	r2, [pc, #24]	; (8003ea0 <vApplicationGetTimerTaskMemory+0x30>)
 8003e86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e8e:	601a      	str	r2, [r3, #0]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	200002f4 	.word	0x200002f4
 8003ea0:	20000350 	.word	0x20000350

08003ea4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f103 0208 	add.w	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ebc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f103 0208 	add.w	r2, r3, #8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f103 0208 	add.w	r2, r3, #8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003efe:	b480      	push	{r7}
 8003f00:	b085      	sub	sp, #20
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f5c:	d103      	bne.n	8003f66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e00c      	b.n	8003f80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e002      	b.n	8003f74 <vListInsert+0x2e>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d2f6      	bcs.n	8003f6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	601a      	str	r2, [r3, #0]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6892      	ldr	r2, [r2, #8]
 8003fce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6852      	ldr	r2, [r2, #4]
 8003fd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d103      	bne.n	8003fec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	e7fe      	b.n	8004032 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004034:	f002 fd02 	bl	8006a3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	68f9      	ldr	r1, [r7, #12]
 8004042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	441a      	add	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	3b01      	subs	r3, #1
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	441a      	add	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	22ff      	movs	r2, #255	; 0xff
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	22ff      	movs	r2, #255	; 0xff
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d114      	bne.n	80040b4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01a      	beq.n	80040c8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3310      	adds	r3, #16
 8004096:	4618      	mov	r0, r3
 8004098:	f001 fcd0 	bl	8005a3c <xTaskRemoveFromEventList>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d012      	beq.n	80040c8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <xQueueGenericReset+0xcc>)
 80040a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	e009      	b.n	80040c8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	3310      	adds	r3, #16
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fef3 	bl	8003ea4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3324      	adds	r3, #36	; 0x24
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff feee 	bl	8003ea4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040c8:	f002 fce6 	bl	8006a98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040cc:	2301      	movs	r3, #1
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08e      	sub	sp, #56	; 0x38
 80040e0:	af02      	add	r7, sp, #8
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <xQueueGenericCreateStatic+0x28>
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
 8004102:	e7fe      	b.n	8004102 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <xQueueGenericCreateStatic+0x42>
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
 800411c:	e7fe      	b.n	800411c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <xQueueGenericCreateStatic+0x4e>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <xQueueGenericCreateStatic+0x52>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <xQueueGenericCreateStatic+0x54>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <xQueueGenericCreateStatic+0x6c>
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	623b      	str	r3, [r7, #32]
 8004146:	e7fe      	b.n	8004146 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <xQueueGenericCreateStatic+0x78>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <xQueueGenericCreateStatic+0x7c>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <xQueueGenericCreateStatic+0x7e>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <xQueueGenericCreateStatic+0x96>
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	e7fe      	b.n	8004170 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004172:	2350      	movs	r3, #80	; 0x50
 8004174:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b50      	cmp	r3, #80	; 0x50
 800417a:	d009      	beq.n	8004190 <xQueueGenericCreateStatic+0xb4>
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e7fe      	b.n	800418e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004190:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00d      	beq.n	80041b8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f844 	bl	8004240 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3730      	adds	r7, #48	; 0x30
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08a      	sub	sp, #40	; 0x28
 80041c6:	af02      	add	r7, sp, #8
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	4613      	mov	r3, r2
 80041ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <xQueueGenericCreate+0x28>
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	e004      	b.n	8004200 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	3350      	adds	r3, #80	; 0x50
 8004204:	4618      	mov	r0, r3
 8004206:	f002 fd33 	bl	8006c70 <pvPortMalloc>
 800420a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d011      	beq.n	8004236 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3350      	adds	r3, #80	; 0x50
 800421a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004224:	79fa      	ldrb	r2, [r7, #7]
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	4613      	mov	r3, r2
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f805 	bl	8004240 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004236:	69bb      	ldr	r3, [r7, #24]
	}
 8004238:	4618      	mov	r0, r3
 800423a:	3720      	adds	r7, #32
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e002      	b.n	8004262 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800426e:	2101      	movs	r1, #1
 8004270:	69b8      	ldr	r0, [r7, #24]
 8004272:	f7ff fecb 	bl	800400c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004286:	b580      	push	{r7, lr}
 8004288:	b08a      	sub	sp, #40	; 0x28
 800428a:	af02      	add	r7, sp, #8
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <xQueueCreateCountingSemaphoreStatic+0x26>
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	e7fe      	b.n	80042aa <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d909      	bls.n	80042c8 <xQueueCreateCountingSemaphoreStatic+0x42>
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e7fe      	b.n	80042c6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80042c8:	2302      	movs	r3, #2
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2100      	movs	r1, #0
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff02 	bl	80040dc <xQueueGenericCreateStatic>
 80042d8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80042e6:	69fb      	ldr	r3, [r7, #28]
	}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <xQueueCreateCountingSemaphore+0x24>
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	e7fe      	b.n	8004312 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	d909      	bls.n	8004330 <xQueueCreateCountingSemaphore+0x40>
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e7fe      	b.n	800432e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004330:	2202      	movs	r2, #2
 8004332:	2100      	movs	r1, #0
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff44 	bl	80041c2 <xQueueGenericCreate>
 800433a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004348:	697b      	ldr	r3, [r7, #20]
	}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08e      	sub	sp, #56	; 0x38
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004362:	2300      	movs	r3, #0
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <xQueueGenericSend+0x30>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
 8004382:	e7fe      	b.n	8004382 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <xQueueGenericSend+0x3e>
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <xQueueGenericSend+0x42>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <xQueueGenericSend+0x44>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <xQueueGenericSend+0x5c>
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	e7fe      	b.n	80043ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d103      	bne.n	80043be <xQueueGenericSend+0x6a>
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <xQueueGenericSend+0x6e>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <xQueueGenericSend+0x70>
 80043c2:	2300      	movs	r3, #0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <xQueueGenericSend+0x88>
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	e7fe      	b.n	80043da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043dc:	f001 fce4 	bl	8005da8 <xTaskGetSchedulerState>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <xQueueGenericSend+0x98>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <xQueueGenericSend+0x9c>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <xQueueGenericSend+0x9e>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <xQueueGenericSend+0xb6>
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	e7fe      	b.n	8004408 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800440a:	f002 fb17 	bl	8006a3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <xQueueGenericSend+0xcc>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d129      	bne.n	8004474 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004426:	f000 fc48 	bl	8004cba <prvCopyDataToQueue>
 800442a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	3324      	adds	r3, #36	; 0x24
 8004438:	4618      	mov	r0, r3
 800443a:	f001 faff 	bl	8005a3c <xTaskRemoveFromEventList>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d013      	beq.n	800446c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004444:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <xQueueGenericSend+0x1f0>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	e00a      	b.n	800446c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800445c:	4b39      	ldr	r3, [pc, #228]	; (8004544 <xQueueGenericSend+0x1f0>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800446c:	f002 fb14 	bl	8006a98 <vPortExitCritical>
				return pdPASS;
 8004470:	2301      	movs	r3, #1
 8004472:	e063      	b.n	800453c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800447a:	f002 fb0d 	bl	8006a98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800447e:	2300      	movs	r3, #0
 8004480:	e05c      	b.n	800453c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4618      	mov	r0, r3
 800448e:	f001 fb37 	bl	8005b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004496:	f002 faff 	bl	8006a98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800449a:	f001 f8b3 	bl	8005604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800449e:	f002 facd 	bl	8006a3c <vPortEnterCritical>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ae:	d103      	bne.n	80044b8 <xQueueGenericSend+0x164>
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044be:	b25b      	sxtb	r3, r3
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c4:	d103      	bne.n	80044ce <xQueueGenericSend+0x17a>
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ce:	f002 fae3 	bl	8006a98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044d2:	1d3a      	adds	r2, r7, #4
 80044d4:	f107 0314 	add.w	r3, r7, #20
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 fb26 	bl	8005b2c <xTaskCheckForTimeOut>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d124      	bne.n	8004530 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e8:	f000 fcdf 	bl	8004eaa <prvIsQueueFull>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	3310      	adds	r3, #16
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 fa50 	bl	80059a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004502:	f000 fc6a 	bl	8004dda <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004506:	f001 f88b 	bl	8005620 <xTaskResumeAll>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f af7c 	bne.w	800440a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <xQueueGenericSend+0x1f0>)
 8004514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	e772      	b.n	800440a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004526:	f000 fc58 	bl	8004dda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800452a:	f001 f879 	bl	8005620 <xTaskResumeAll>
 800452e:	e76c      	b.n	800440a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004532:	f000 fc52 	bl	8004dda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004536:	f001 f873 	bl	8005620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800453a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800453c:	4618      	mov	r0, r3
 800453e:	3738      	adds	r7, #56	; 0x38
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08e      	sub	sp, #56	; 0x38
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <xQueueGenericSendFromISR+0x2c>
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	e7fe      	b.n	8004572 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <xQueueGenericSendFromISR+0x3a>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <xQueueGenericSendFromISR+0x3e>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <xQueueGenericSendFromISR+0x40>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <xQueueGenericSendFromISR+0x58>
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	e7fe      	b.n	800459e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d103      	bne.n	80045ae <xQueueGenericSendFromISR+0x66>
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <xQueueGenericSendFromISR+0x6a>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <xQueueGenericSendFromISR+0x6c>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <xQueueGenericSendFromISR+0x84>
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	e7fe      	b.n	80045ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045cc:	f002 fb12 	bl	8006bf4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045d0:	f3ef 8211 	mrs	r2, BASEPRI
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	61ba      	str	r2, [r7, #24]
 80045e6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <xQueueGenericSendFromISR+0xb6>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d12c      	bne.n	8004658 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800460e:	f000 fb54 	bl	8004cba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004612:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800461a:	d112      	bne.n	8004642 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b00      	cmp	r3, #0
 8004622:	d016      	beq.n	8004652 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	3324      	adds	r3, #36	; 0x24
 8004628:	4618      	mov	r0, r3
 800462a:	f001 fa07 	bl	8005a3c <xTaskRemoveFromEventList>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00e      	beq.n	8004652 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e007      	b.n	8004652 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004646:	3301      	adds	r3, #1
 8004648:	b2db      	uxtb	r3, r3
 800464a:	b25a      	sxtb	r2, r3
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004652:	2301      	movs	r3, #1
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004656:	e001      	b.n	800465c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004658:	2300      	movs	r3, #0
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004668:	4618      	mov	r0, r3
 800466a:	3738      	adds	r7, #56	; 0x38
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08e      	sub	sp, #56	; 0x38
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <xQueueGiveFromISR+0x28>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	623b      	str	r3, [r7, #32]
 8004696:	e7fe      	b.n	8004696 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <xQueueGiveFromISR+0x44>
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	61fb      	str	r3, [r7, #28]
 80046b2:	e7fe      	b.n	80046b2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <xQueueGiveFromISR+0x54>
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <xQueueGiveFromISR+0x58>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <xQueueGiveFromISR+0x5a>
 80046c8:	2300      	movs	r3, #0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <xQueueGiveFromISR+0x72>
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	e7fe      	b.n	80046e0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046e2:	f002 fa87 	bl	8006bf4 <vPortValidateInterruptPriority>
	__asm volatile
 80046e6:	f3ef 8211 	mrs	r2, BASEPRI
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	617a      	str	r2, [r7, #20]
 80046fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80046fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800470e:	429a      	cmp	r2, r3
 8004710:	d22b      	bcs.n	800476a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472c:	d112      	bne.n	8004754 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d016      	beq.n	8004764 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	3324      	adds	r3, #36	; 0x24
 800473a:	4618      	mov	r0, r3
 800473c:	f001 f97e 	bl	8005a3c <xTaskRemoveFromEventList>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00e      	beq.n	8004764 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	e007      	b.n	8004764 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004758:	3301      	adds	r3, #1
 800475a:	b2db      	uxtb	r3, r3
 800475c:	b25a      	sxtb	r2, r3
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004764:	2301      	movs	r3, #1
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
 8004768:	e001      	b.n	800476e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800476a:	2300      	movs	r3, #0
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800477a:	4618      	mov	r0, r3
 800477c:	3738      	adds	r7, #56	; 0x38
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08c      	sub	sp, #48	; 0x30
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004790:	2300      	movs	r3, #0
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <xQueueReceive+0x2e>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	623b      	str	r3, [r7, #32]
 80047b0:	e7fe      	b.n	80047b0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <xQueueReceive+0x3c>
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <xQueueReceive+0x40>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <xQueueReceive+0x42>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <xQueueReceive+0x5a>
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	e7fe      	b.n	80047dc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047de:	f001 fae3 	bl	8005da8 <xTaskGetSchedulerState>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <xQueueReceive+0x6a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <xQueueReceive+0x6e>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <xQueueReceive+0x70>
 80047f2:	2300      	movs	r3, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <xQueueReceive+0x88>
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e7fe      	b.n	800480a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800480c:	f002 f916 	bl	8006a3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01f      	beq.n	800485c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004820:	f000 fab5 	bl	8004d8e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	1e5a      	subs	r2, r3, #1
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00f      	beq.n	8004854 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	3310      	adds	r3, #16
 8004838:	4618      	mov	r0, r3
 800483a:	f001 f8ff 	bl	8005a3c <xTaskRemoveFromEventList>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004844:	4b3c      	ldr	r3, [pc, #240]	; (8004938 <xQueueReceive+0x1b4>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004854:	f002 f920 	bl	8006a98 <vPortExitCritical>
				return pdPASS;
 8004858:	2301      	movs	r3, #1
 800485a:	e069      	b.n	8004930 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004862:	f002 f919 	bl	8006a98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004866:	2300      	movs	r3, #0
 8004868:	e062      	b.n	8004930 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f943 	bl	8005b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800487a:	2301      	movs	r3, #1
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800487e:	f002 f90b 	bl	8006a98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004882:	f000 febf 	bl	8005604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004886:	f002 f8d9 	bl	8006a3c <vPortEnterCritical>
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004890:	b25b      	sxtb	r3, r3
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004896:	d103      	bne.n	80048a0 <xQueueReceive+0x11c>
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048a6:	b25b      	sxtb	r3, r3
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ac:	d103      	bne.n	80048b6 <xQueueReceive+0x132>
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048b6:	f002 f8ef 	bl	8006a98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ba:	1d3a      	adds	r2, r7, #4
 80048bc:	f107 0310 	add.w	r3, r7, #16
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f932 	bl	8005b2c <xTaskCheckForTimeOut>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d123      	bne.n	8004916 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d0:	f000 fad5 	bl	8004e7e <prvIsQueueEmpty>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d017      	beq.n	800490a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	3324      	adds	r3, #36	; 0x24
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 f85c 	bl	80059a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ea:	f000 fa76 	bl	8004dda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048ee:	f000 fe97 	bl	8005620 <xTaskResumeAll>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d189      	bne.n	800480c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <xQueueReceive+0x1b4>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	e780      	b.n	800480c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800490a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490c:	f000 fa65 	bl	8004dda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004910:	f000 fe86 	bl	8005620 <xTaskResumeAll>
 8004914:	e77a      	b.n	800480c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004918:	f000 fa5f 	bl	8004dda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800491c:	f000 fe80 	bl	8005620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004922:	f000 faac 	bl	8004e7e <prvIsQueueEmpty>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	f43f af6f 	beq.w	800480c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800492e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004930:	4618      	mov	r0, r3
 8004932:	3730      	adds	r7, #48	; 0x30
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08e      	sub	sp, #56	; 0x38
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004946:	2300      	movs	r3, #0
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800494e:	2300      	movs	r3, #0
 8004950:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <xQueueSemaphoreTake+0x30>
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	623b      	str	r3, [r7, #32]
 800496a:	e7fe      	b.n	800496a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <xQueueSemaphoreTake+0x4c>
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e7fe      	b.n	8004986 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004988:	f001 fa0e 	bl	8005da8 <xTaskGetSchedulerState>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <xQueueSemaphoreTake+0x5c>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <xQueueSemaphoreTake+0x60>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <xQueueSemaphoreTake+0x62>
 800499c:	2300      	movs	r3, #0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <xQueueSemaphoreTake+0x7a>
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	e7fe      	b.n	80049b4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049b6:	f002 f841 	bl	8006a3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d024      	beq.n	8004a10 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	1e5a      	subs	r2, r3, #1
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80049d6:	f001 fb59 	bl	800608c <pvTaskIncrementMutexHeldCount>
 80049da:	4602      	mov	r2, r0
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00f      	beq.n	8004a08 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	3310      	adds	r3, #16
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 f825 	bl	8005a3c <xTaskRemoveFromEventList>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049f8:	4b53      	ldr	r3, [pc, #332]	; (8004b48 <xQueueSemaphoreTake+0x20c>)
 80049fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a08:	f002 f846 	bl	8006a98 <vPortExitCritical>
				return pdPASS;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e096      	b.n	8004b3e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d110      	bne.n	8004a38 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d009      	beq.n	8004a30 <xQueueSemaphoreTake+0xf4>
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e7fe      	b.n	8004a2e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a30:	f002 f832 	bl	8006a98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e082      	b.n	8004b3e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a3e:	f107 030c 	add.w	r3, r7, #12
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 f85c 	bl	8005b00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a4c:	f002 f824 	bl	8006a98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a50:	f000 fdd8 	bl	8005604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a54:	f001 fff2 	bl	8006a3c <vPortEnterCritical>
 8004a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a64:	d103      	bne.n	8004a6e <xQueueSemaphoreTake+0x132>
 8004a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a74:	b25b      	sxtb	r3, r3
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a7a:	d103      	bne.n	8004a84 <xQueueSemaphoreTake+0x148>
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a84:	f002 f808 	bl	8006a98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a88:	463a      	mov	r2, r7
 8004a8a:	f107 030c 	add.w	r3, r7, #12
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 f84b 	bl	8005b2c <xTaskCheckForTimeOut>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d132      	bne.n	8004b02 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a9e:	f000 f9ee 	bl	8004e7e <prvIsQueueEmpty>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d026      	beq.n	8004af6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d109      	bne.n	8004ac4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004ab0:	f001 ffc4 	bl	8006a3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 f993 	bl	8005de4 <xTaskPriorityInherit>
 8004abe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004ac0:	f001 ffea 	bl	8006a98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	3324      	adds	r3, #36	; 0x24
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 ff67 	bl	80059a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ad4:	f000 f981 	bl	8004dda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ad8:	f000 fda2 	bl	8005620 <xTaskResumeAll>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f47f af69 	bne.w	80049b6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <xQueueSemaphoreTake+0x20c>)
 8004ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	e75f      	b.n	80049b6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004af8:	f000 f96f 	bl	8004dda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004afc:	f000 fd90 	bl	8005620 <xTaskResumeAll>
 8004b00:	e759      	b.n	80049b6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b04:	f000 f969 	bl	8004dda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b08:	f000 fd8a 	bl	8005620 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b0e:	f000 f9b6 	bl	8004e7e <prvIsQueueEmpty>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f43f af4e 	beq.w	80049b6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00d      	beq.n	8004b3c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004b20:	f001 ff8c 	bl	8006a3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b26:	f000 f8b0 	bl	8004c8a <prvGetDisinheritPriorityAfterTimeout>
 8004b2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 fa2a 	bl	8005f8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b38:	f001 ffae 	bl	8006a98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3738      	adds	r7, #56	; 0x38
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08e      	sub	sp, #56	; 0x38
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <xQueueReceiveFromISR+0x2a>
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	e7fe      	b.n	8004b74 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <xQueueReceiveFromISR+0x38>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <xQueueReceiveFromISR+0x3c>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <xQueueReceiveFromISR+0x3e>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <xQueueReceiveFromISR+0x56>
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	e7fe      	b.n	8004ba0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ba2:	f002 f827 	bl	8006bf4 <vPortValidateInterruptPriority>
	__asm volatile
 8004ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	61ba      	str	r2, [r7, #24]
 8004bbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004bbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d02f      	beq.n	8004c2e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bdc:	f000 f8d7 	bl	8004d8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	1e5a      	subs	r2, r3, #1
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004be8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf0:	d112      	bne.n	8004c18 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d016      	beq.n	8004c28 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	3310      	adds	r3, #16
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 ff1c 	bl	8005a3c <xTaskRemoveFromEventList>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00e      	beq.n	8004c28 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e007      	b.n	8004c28 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	b25a      	sxtb	r2, r3
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2c:	e001      	b.n	8004c32 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3738      	adds	r7, #56	; 0x38
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <vQueueDelete+0x26>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	e7fe      	b.n	8004c6a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f95d 	bl	8004f2c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f002 f8b9 	bl	8006df4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	e001      	b.n	8004cac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004cac:	68fb      	ldr	r3, [r7, #12]
	}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10d      	bne.n	8004cf4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d14d      	bne.n	8004d7c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 f8e5 	bl	8005eb4 <xTaskPriorityDisinherit>
 8004cea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	609a      	str	r2, [r3, #8]
 8004cf2:	e043      	b.n	8004d7c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d119      	bne.n	8004d2e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6858      	ldr	r0, [r3, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	461a      	mov	r2, r3
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	f002 f9b3 	bl	8007070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	441a      	add	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d32b      	bcc.n	8004d7c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	605a      	str	r2, [r3, #4]
 8004d2c:	e026      	b.n	8004d7c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	68d8      	ldr	r0, [r3, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	461a      	mov	r2, r3
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	f002 f999 	bl	8007070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	425b      	negs	r3, r3
 8004d48:	441a      	add	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d207      	bcs.n	8004d6a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	425b      	negs	r3, r3
 8004d64:	441a      	add	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d105      	bne.n	8004d7c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d84:	697b      	ldr	r3, [r7, #20]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d018      	beq.n	8004dd2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d303      	bcc.n	8004dc2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68d9      	ldr	r1, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6838      	ldr	r0, [r7, #0]
 8004dce:	f002 f94f 	bl	8007070 <memcpy>
	}
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004de2:	f001 fe2b 	bl	8006a3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dee:	e011      	b.n	8004e14 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d012      	beq.n	8004e1e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3324      	adds	r3, #36	; 0x24
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fe1d 	bl	8005a3c <xTaskRemoveFromEventList>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e08:	f000 fef0 	bl	8005bec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	dce9      	bgt.n	8004df0 <prvUnlockQueue+0x16>
 8004e1c:	e000      	b.n	8004e20 <prvUnlockQueue+0x46>
					break;
 8004e1e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	22ff      	movs	r2, #255	; 0xff
 8004e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e28:	f001 fe36 	bl	8006a98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e2c:	f001 fe06 	bl	8006a3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e36:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e38:	e011      	b.n	8004e5e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d012      	beq.n	8004e68 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3310      	adds	r3, #16
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fdf8 	bl	8005a3c <xTaskRemoveFromEventList>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e52:	f000 fecb 	bl	8005bec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e56:	7bbb      	ldrb	r3, [r7, #14]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	dce9      	bgt.n	8004e3a <prvUnlockQueue+0x60>
 8004e66:	e000      	b.n	8004e6a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e68:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	22ff      	movs	r2, #255	; 0xff
 8004e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e72:	f001 fe11 	bl	8006a98 <vPortExitCritical>
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b084      	sub	sp, #16
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e86:	f001 fdd9 	bl	8006a3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e92:	2301      	movs	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e001      	b.n	8004e9c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e9c:	f001 fdfc 	bl	8006a98 <vPortExitCritical>

	return xReturn;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eb2:	f001 fdc3 	bl	8006a3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d102      	bne.n	8004ec8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	e001      	b.n	8004ecc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ecc:	f001 fde4 	bl	8006a98 <vPortExitCritical>

	return xReturn;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e014      	b.n	8004f16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004eec:	4a0e      	ldr	r2, [pc, #56]	; (8004f28 <vQueueAddToRegistry+0x4c>)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10b      	bne.n	8004f10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ef8:	490b      	ldr	r1, [pc, #44]	; (8004f28 <vQueueAddToRegistry+0x4c>)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f02:	4a09      	ldr	r2, [pc, #36]	; (8004f28 <vQueueAddToRegistry+0x4c>)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4413      	add	r3, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f0e:	e005      	b.n	8004f1c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b07      	cmp	r3, #7
 8004f1a:	d9e7      	bls.n	8004eec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	20002dc4 	.word	0x20002dc4

08004f2c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e016      	b.n	8004f68 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004f3a:	4a10      	ldr	r2, [pc, #64]	; (8004f7c <vQueueUnregisterQueue+0x50>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d10b      	bne.n	8004f62 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004f4a:	4a0c      	ldr	r2, [pc, #48]	; (8004f7c <vQueueUnregisterQueue+0x50>)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2100      	movs	r1, #0
 8004f50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004f54:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <vQueueUnregisterQueue+0x50>)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	605a      	str	r2, [r3, #4]
				break;
 8004f60:	e005      	b.n	8004f6e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b07      	cmp	r3, #7
 8004f6c:	d9e5      	bls.n	8004f3a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20002dc4 	.word	0x20002dc4

08004f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f90:	f001 fd54 	bl	8006a3c <vPortEnterCritical>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa0:	d103      	bne.n	8004faa <vQueueWaitForMessageRestricted+0x2a>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb6:	d103      	bne.n	8004fc0 <vQueueWaitForMessageRestricted+0x40>
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc0:	f001 fd6a 	bl	8006a98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	3324      	adds	r3, #36	; 0x24
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fd07 	bl	80059e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff fefd 	bl	8004dda <prvUnlockQueue>
	}
 8004fe0:	bf00      	nop
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08e      	sub	sp, #56	; 0x38
 8004fec:	af04      	add	r7, sp, #16
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d109      	bne.n	8005010 <xTaskCreateStatic+0x28>
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	623b      	str	r3, [r7, #32]
 800500e:	e7fe      	b.n	800500e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <xTaskCreateStatic+0x42>
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	e7fe      	b.n	8005028 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800502a:	235c      	movs	r3, #92	; 0x5c
 800502c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b5c      	cmp	r3, #92	; 0x5c
 8005032:	d009      	beq.n	8005048 <xTaskCreateStatic+0x60>
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	e7fe      	b.n	8005046 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005048:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01e      	beq.n	800508e <xTaskCreateStatic+0xa6>
 8005050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01b      	beq.n	800508e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800505e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005068:	2300      	movs	r3, #0
 800506a:	9303      	str	r3, [sp, #12]
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	9302      	str	r3, [sp, #8]
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f850 	bl	8005126 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005088:	f000 f8dc 	bl	8005244 <prvAddNewTaskToReadyList>
 800508c:	e001      	b.n	8005092 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005092:	697b      	ldr	r3, [r7, #20]
	}
 8005094:	4618      	mov	r0, r3
 8005096:	3728      	adds	r7, #40	; 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08c      	sub	sp, #48	; 0x30
 80050a0:	af04      	add	r7, sp, #16
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fddd 	bl	8006c70 <pvPortMalloc>
 80050b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00e      	beq.n	80050dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050be:	205c      	movs	r0, #92	; 0x5c
 80050c0:	f001 fdd6 	bl	8006c70 <pvPortMalloc>
 80050c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
 80050d2:	e005      	b.n	80050e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050d4:	6978      	ldr	r0, [r7, #20]
 80050d6:	f001 fe8d 	bl	8006df4 <vPortFree>
 80050da:	e001      	b.n	80050e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d017      	beq.n	8005116 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050ee:	88fa      	ldrh	r2, [r7, #6]
 80050f0:	2300      	movs	r3, #0
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f80e 	bl	8005126 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800510a:	69f8      	ldr	r0, [r7, #28]
 800510c:	f000 f89a 	bl	8005244 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005110:	2301      	movs	r3, #1
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	e002      	b.n	800511c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800511a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800511c:	69bb      	ldr	r3, [r7, #24]
	}
 800511e:	4618      	mov	r0, r3
 8005120:	3720      	adds	r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b088      	sub	sp, #32
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	461a      	mov	r2, r3
 800513e:	21a5      	movs	r1, #165	; 0xa5
 8005140:	f001 ffa1 	bl	8007086 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800514e:	3b01      	subs	r3, #1
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	f023 0307 	bic.w	r3, r3, #7
 800515c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	2b00      	cmp	r3, #0
 8005166:	d009      	beq.n	800517c <prvInitialiseNewTask+0x56>
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e7fe      	b.n	800517a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01f      	beq.n	80051c2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e012      	b.n	80051ae <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	7819      	ldrb	r1, [r3, #0]
 8005190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	3334      	adds	r3, #52	; 0x34
 8005198:	460a      	mov	r2, r1
 800519a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d006      	beq.n	80051b6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	3301      	adds	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b0f      	cmp	r3, #15
 80051b2:	d9e9      	bls.n	8005188 <prvInitialiseNewTask+0x62>
 80051b4:	e000      	b.n	80051b8 <prvInitialiseNewTask+0x92>
			{
				break;
 80051b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c0:	e003      	b.n	80051ca <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	2b37      	cmp	r3, #55	; 0x37
 80051ce:	d901      	bls.n	80051d4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051d0:	2337      	movs	r3, #55	; 0x37
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2200      	movs	r2, #0
 80051e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	3304      	adds	r3, #4
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fe7a 	bl	8003ee4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	3318      	adds	r3, #24
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fe fe75 	bl	8003ee4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	2200      	movs	r2, #0
 8005214:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	69b8      	ldr	r0, [r7, #24]
 8005224:	f001 fae0 	bl	80067e8 <pxPortInitialiseStack>
 8005228:	4602      	mov	r2, r0
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800523a:	bf00      	nop
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800524c:	f001 fbf6 	bl	8006a3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005250:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <prvAddNewTaskToReadyList+0xc4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3301      	adds	r3, #1
 8005256:	4a2c      	ldr	r2, [pc, #176]	; (8005308 <prvAddNewTaskToReadyList+0xc4>)
 8005258:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800525a:	4b2c      	ldr	r3, [pc, #176]	; (800530c <prvAddNewTaskToReadyList+0xc8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d109      	bne.n	8005276 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005262:	4a2a      	ldr	r2, [pc, #168]	; (800530c <prvAddNewTaskToReadyList+0xc8>)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005268:	4b27      	ldr	r3, [pc, #156]	; (8005308 <prvAddNewTaskToReadyList+0xc4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d110      	bne.n	8005292 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005270:	f000 fce0 	bl	8005c34 <prvInitialiseTaskLists>
 8005274:	e00d      	b.n	8005292 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005276:	4b26      	ldr	r3, [pc, #152]	; (8005310 <prvAddNewTaskToReadyList+0xcc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800527e:	4b23      	ldr	r3, [pc, #140]	; (800530c <prvAddNewTaskToReadyList+0xc8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	429a      	cmp	r2, r3
 800528a:	d802      	bhi.n	8005292 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800528c:	4a1f      	ldr	r2, [pc, #124]	; (800530c <prvAddNewTaskToReadyList+0xc8>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005292:	4b20      	ldr	r3, [pc, #128]	; (8005314 <prvAddNewTaskToReadyList+0xd0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3301      	adds	r3, #1
 8005298:	4a1e      	ldr	r2, [pc, #120]	; (8005314 <prvAddNewTaskToReadyList+0xd0>)
 800529a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800529c:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <prvAddNewTaskToReadyList+0xd0>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a8:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <prvAddNewTaskToReadyList+0xd4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d903      	bls.n	80052b8 <prvAddNewTaskToReadyList+0x74>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	4a18      	ldr	r2, [pc, #96]	; (8005318 <prvAddNewTaskToReadyList+0xd4>)
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <prvAddNewTaskToReadyList+0xd8>)
 80052c6:	441a      	add	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f7fe fe15 	bl	8003efe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052d4:	f001 fbe0 	bl	8006a98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052d8:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <prvAddNewTaskToReadyList+0xcc>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00e      	beq.n	80052fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052e0:	4b0a      	ldr	r3, [pc, #40]	; (800530c <prvAddNewTaskToReadyList+0xc8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d207      	bcs.n	80052fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052ee:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <prvAddNewTaskToReadyList+0xdc>)
 80052f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000c24 	.word	0x20000c24
 800530c:	20000750 	.word	0x20000750
 8005310:	20000c30 	.word	0x20000c30
 8005314:	20000c40 	.word	0x20000c40
 8005318:	20000c2c 	.word	0x20000c2c
 800531c:	20000754 	.word	0x20000754
 8005320:	e000ed04 	.word	0xe000ed04

08005324 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800532c:	f001 fb86 	bl	8006a3c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d102      	bne.n	800533c <vTaskDelete+0x18>
 8005336:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <vTaskDelete+0xc4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	e000      	b.n	800533e <vTaskDelete+0x1a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3304      	adds	r3, #4
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe fe37 	bl	8003fb8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3318      	adds	r3, #24
 8005356:	4618      	mov	r0, r3
 8005358:	f7fe fe2e 	bl	8003fb8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800535c:	4b23      	ldr	r3, [pc, #140]	; (80053ec <vTaskDelete+0xc8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	4a22      	ldr	r2, [pc, #136]	; (80053ec <vTaskDelete+0xc8>)
 8005364:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <vTaskDelete+0xc4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	429a      	cmp	r2, r3
 800536e:	d10b      	bne.n	8005388 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3304      	adds	r3, #4
 8005374:	4619      	mov	r1, r3
 8005376:	481e      	ldr	r0, [pc, #120]	; (80053f0 <vTaskDelete+0xcc>)
 8005378:	f7fe fdc1 	bl	8003efe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800537c:	4b1d      	ldr	r3, [pc, #116]	; (80053f4 <vTaskDelete+0xd0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <vTaskDelete+0xd0>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e009      	b.n	800539c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <vTaskDelete+0xd4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3b01      	subs	r3, #1
 800538e:	4a1a      	ldr	r2, [pc, #104]	; (80053f8 <vTaskDelete+0xd4>)
 8005390:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fcba 	bl	8005d0c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005398:	f000 fce6 	bl	8005d68 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800539c:	f001 fb7c 	bl	8006a98 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80053a0:	4b16      	ldr	r3, [pc, #88]	; (80053fc <vTaskDelete+0xd8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01a      	beq.n	80053de <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 80053a8:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <vTaskDelete+0xc4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d115      	bne.n	80053de <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80053b2:	4b13      	ldr	r3, [pc, #76]	; (8005400 <vTaskDelete+0xdc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <vTaskDelete+0xaa>
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60bb      	str	r3, [r7, #8]
 80053cc:	e7fe      	b.n	80053cc <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 80053ce:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <vTaskDelete+0xe0>)
 80053d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000750 	.word	0x20000750
 80053ec:	20000c40 	.word	0x20000c40
 80053f0:	20000bf8 	.word	0x20000bf8
 80053f4:	20000c0c 	.word	0x20000c0c
 80053f8:	20000c24 	.word	0x20000c24
 80053fc:	20000c30 	.word	0x20000c30
 8005400:	20000c4c 	.word	0x20000c4c
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800541a:	4b13      	ldr	r3, [pc, #76]	; (8005468 <vTaskDelay+0x60>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <vTaskDelay+0x2e>
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	e7fe      	b.n	8005434 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005436:	f000 f8e5 	bl	8005604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800543a:	2100      	movs	r1, #0
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fe39 	bl	80060b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005442:	f000 f8ed 	bl	8005620 <xTaskResumeAll>
 8005446:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d107      	bne.n	800545e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <vTaskDelay+0x64>)
 8005450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000c4c 	.word	0x20000c4c
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <eTaskGetState+0x26>
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	e7fe      	b.n	8005494 <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 8005496:	4b24      	ldr	r3, [pc, #144]	; (8005528 <eTaskGetState+0xb8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	429a      	cmp	r2, r3
 800549e:	d102      	bne.n	80054a6 <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80054a0:	2300      	movs	r3, #0
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e03a      	b.n	800551c <eTaskGetState+0xac>
		}
		else
		{
			taskENTER_CRITICAL();
 80054a6:	f001 fac9 	bl	8006a3c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80054b0:	4b1e      	ldr	r3, [pc, #120]	; (800552c <eTaskGetState+0xbc>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80054b6:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <eTaskGetState+0xc0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80054bc:	f001 faec 	bl	8006a98 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d003      	beq.n	80054d0 <eTaskGetState+0x60>
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d102      	bne.n	80054d6 <eTaskGetState+0x66>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80054d0:	2302      	movs	r3, #2
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e022      	b.n	800551c <eTaskGetState+0xac>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	4a16      	ldr	r2, [pc, #88]	; (8005534 <eTaskGetState+0xc4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d112      	bne.n	8005504 <eTaskGetState+0x94>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d102      	bne.n	80054f8 <eTaskGetState+0x88>
							{
								eReturn = eBlocked;
 80054f2:	2302      	movs	r3, #2
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e011      	b.n	800551c <eTaskGetState+0xac>
							}
							else
							{
								eReturn = eSuspended;
 80054f8:	2303      	movs	r3, #3
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e00e      	b.n	800551c <eTaskGetState+0xac>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80054fe:	2302      	movs	r3, #2
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e00b      	b.n	800551c <eTaskGetState+0xac>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4a0c      	ldr	r2, [pc, #48]	; (8005538 <eTaskGetState+0xc8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d002      	beq.n	8005512 <eTaskGetState+0xa2>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <eTaskGetState+0xa8>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005512:	2304      	movs	r3, #4
 8005514:	77fb      	strb	r3, [r7, #31]
 8005516:	e001      	b.n	800551c <eTaskGetState+0xac>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005518:	2301      	movs	r3, #1
 800551a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800551c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000750 	.word	0x20000750
 800552c:	20000bdc 	.word	0x20000bdc
 8005530:	20000be0 	.word	0x20000be0
 8005534:	20000c10 	.word	0x20000c10
 8005538:	20000bf8 	.word	0x20000bf8

0800553c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800554a:	463a      	mov	r2, r7
 800554c:	1d39      	adds	r1, r7, #4
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe fc72 	bl	8003e3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	9202      	str	r2, [sp, #8]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	2300      	movs	r3, #0
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	460a      	mov	r2, r1
 800556a:	4920      	ldr	r1, [pc, #128]	; (80055ec <vTaskStartScheduler+0xb0>)
 800556c:	4820      	ldr	r0, [pc, #128]	; (80055f0 <vTaskStartScheduler+0xb4>)
 800556e:	f7ff fd3b 	bl	8004fe8 <xTaskCreateStatic>
 8005572:	4602      	mov	r2, r0
 8005574:	4b1f      	ldr	r3, [pc, #124]	; (80055f4 <vTaskStartScheduler+0xb8>)
 8005576:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005578:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <vTaskStartScheduler+0xb8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e001      	b.n	800558a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d102      	bne.n	8005596 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005590:	f000 fde4 	bl	800615c <xTimerCreateTimerTask>
 8005594:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d115      	bne.n	80055c8 <vTaskStartScheduler+0x8c>
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ae:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <vTaskStartScheduler+0xbc>)
 80055b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <vTaskStartScheduler+0xc0>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055bc:	4b10      	ldr	r3, [pc, #64]	; (8005600 <vTaskStartScheduler+0xc4>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055c2:	f001 f99d 	bl	8006900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055c6:	e00d      	b.n	80055e4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ce:	d109      	bne.n	80055e4 <vTaskStartScheduler+0xa8>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e7fe      	b.n	80055e2 <vTaskStartScheduler+0xa6>
}
 80055e4:	bf00      	nop
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	08008120 	.word	0x08008120
 80055f0:	08005c05 	.word	0x08005c05
 80055f4:	20000c48 	.word	0x20000c48
 80055f8:	20000c44 	.word	0x20000c44
 80055fc:	20000c30 	.word	0x20000c30
 8005600:	20000c28 	.word	0x20000c28

08005604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <vTaskSuspendAll+0x18>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a03      	ldr	r2, [pc, #12]	; (800561c <vTaskSuspendAll+0x18>)
 8005610:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005612:	bf00      	nop
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000c4c 	.word	0x20000c4c

08005620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800562e:	4b41      	ldr	r3, [pc, #260]	; (8005734 <xTaskResumeAll+0x114>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <xTaskResumeAll+0x2a>
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	e7fe      	b.n	8005648 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800564a:	f001 f9f7 	bl	8006a3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800564e:	4b39      	ldr	r3, [pc, #228]	; (8005734 <xTaskResumeAll+0x114>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3b01      	subs	r3, #1
 8005654:	4a37      	ldr	r2, [pc, #220]	; (8005734 <xTaskResumeAll+0x114>)
 8005656:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005658:	4b36      	ldr	r3, [pc, #216]	; (8005734 <xTaskResumeAll+0x114>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d162      	bne.n	8005726 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005660:	4b35      	ldr	r3, [pc, #212]	; (8005738 <xTaskResumeAll+0x118>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d05e      	beq.n	8005726 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005668:	e02f      	b.n	80056ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566a:	4b34      	ldr	r3, [pc, #208]	; (800573c <xTaskResumeAll+0x11c>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3318      	adds	r3, #24
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe fc9e 	bl	8003fb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3304      	adds	r3, #4
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe fc99 	bl	8003fb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568a:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <xTaskResumeAll+0x120>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d903      	bls.n	800569a <xTaskResumeAll+0x7a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <xTaskResumeAll+0x120>)
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4a27      	ldr	r2, [pc, #156]	; (8005744 <xTaskResumeAll+0x124>)
 80056a8:	441a      	add	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f7fe fc24 	bl	8003efe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <xTaskResumeAll+0x128>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056c4:	4b21      	ldr	r3, [pc, #132]	; (800574c <xTaskResumeAll+0x12c>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ca:	4b1c      	ldr	r3, [pc, #112]	; (800573c <xTaskResumeAll+0x11c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1cb      	bne.n	800566a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056d8:	f000 fb46 	bl	8005d68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056dc:	4b1c      	ldr	r3, [pc, #112]	; (8005750 <xTaskResumeAll+0x130>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d010      	beq.n	800570a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056e8:	f000 f846 	bl	8005778 <xTaskIncrementTick>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056f2:	4b16      	ldr	r3, [pc, #88]	; (800574c <xTaskResumeAll+0x12c>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f1      	bne.n	80056e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005704:	4b12      	ldr	r3, [pc, #72]	; (8005750 <xTaskResumeAll+0x130>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800570a:	4b10      	ldr	r3, [pc, #64]	; (800574c <xTaskResumeAll+0x12c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005712:	2301      	movs	r3, #1
 8005714:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005716:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <xTaskResumeAll+0x134>)
 8005718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005726:	f001 f9b7 	bl	8006a98 <vPortExitCritical>

	return xAlreadyYielded;
 800572a:	68bb      	ldr	r3, [r7, #8]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000c4c 	.word	0x20000c4c
 8005738:	20000c24 	.word	0x20000c24
 800573c:	20000be4 	.word	0x20000be4
 8005740:	20000c2c 	.word	0x20000c2c
 8005744:	20000754 	.word	0x20000754
 8005748:	20000750 	.word	0x20000750
 800574c:	20000c38 	.word	0x20000c38
 8005750:	20000c34 	.word	0x20000c34
 8005754:	e000ed04 	.word	0xe000ed04

08005758 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800575e:	4b05      	ldr	r3, [pc, #20]	; (8005774 <xTaskGetTickCount+0x1c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005764:	687b      	ldr	r3, [r7, #4]
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000c28 	.word	0x20000c28

08005778 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005782:	4b4e      	ldr	r3, [pc, #312]	; (80058bc <xTaskIncrementTick+0x144>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 8088 	bne.w	800589c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800578c:	4b4c      	ldr	r3, [pc, #304]	; (80058c0 <xTaskIncrementTick+0x148>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3301      	adds	r3, #1
 8005792:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005794:	4a4a      	ldr	r2, [pc, #296]	; (80058c0 <xTaskIncrementTick+0x148>)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11f      	bne.n	80057e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80057a0:	4b48      	ldr	r3, [pc, #288]	; (80058c4 <xTaskIncrementTick+0x14c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <xTaskIncrementTick+0x46>
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	e7fe      	b.n	80057bc <xTaskIncrementTick+0x44>
 80057be:	4b41      	ldr	r3, [pc, #260]	; (80058c4 <xTaskIncrementTick+0x14c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	4b40      	ldr	r3, [pc, #256]	; (80058c8 <xTaskIncrementTick+0x150>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a3e      	ldr	r2, [pc, #248]	; (80058c4 <xTaskIncrementTick+0x14c>)
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4a3e      	ldr	r2, [pc, #248]	; (80058c8 <xTaskIncrementTick+0x150>)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b3e      	ldr	r3, [pc, #248]	; (80058cc <xTaskIncrementTick+0x154>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	4a3c      	ldr	r2, [pc, #240]	; (80058cc <xTaskIncrementTick+0x154>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	f000 fac4 	bl	8005d68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057e0:	4b3b      	ldr	r3, [pc, #236]	; (80058d0 <xTaskIncrementTick+0x158>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d349      	bcc.n	800587e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ea:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <xTaskIncrementTick+0x14c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f4:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <xTaskIncrementTick+0x158>)
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057fa:	601a      	str	r2, [r3, #0]
					break;
 80057fc:	e03f      	b.n	800587e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057fe:	4b31      	ldr	r3, [pc, #196]	; (80058c4 <xTaskIncrementTick+0x14c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	429a      	cmp	r2, r3
 8005814:	d203      	bcs.n	800581e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005816:	4a2e      	ldr	r2, [pc, #184]	; (80058d0 <xTaskIncrementTick+0x158>)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800581c:	e02f      	b.n	800587e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3304      	adds	r3, #4
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fbc8 	bl	8003fb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	3318      	adds	r3, #24
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe fbbf 	bl	8003fb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <xTaskIncrementTick+0x15c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d903      	bls.n	800584e <xTaskIncrementTick+0xd6>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <xTaskIncrementTick+0x15c>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <xTaskIncrementTick+0x160>)
 800585c:	441a      	add	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7fe fb4a 	bl	8003efe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <xTaskIncrementTick+0x164>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d3b8      	bcc.n	80057ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587c:	e7b5      	b.n	80057ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800587e:	4b17      	ldr	r3, [pc, #92]	; (80058dc <xTaskIncrementTick+0x164>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005884:	4914      	ldr	r1, [pc, #80]	; (80058d8 <xTaskIncrementTick+0x160>)
 8005886:	4613      	mov	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d907      	bls.n	80058a6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005896:	2301      	movs	r3, #1
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	e004      	b.n	80058a6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800589c:	4b10      	ldr	r3, [pc, #64]	; (80058e0 <xTaskIncrementTick+0x168>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	4a0f      	ldr	r2, [pc, #60]	; (80058e0 <xTaskIncrementTick+0x168>)
 80058a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <xTaskIncrementTick+0x16c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058b2:	697b      	ldr	r3, [r7, #20]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000c4c 	.word	0x20000c4c
 80058c0:	20000c28 	.word	0x20000c28
 80058c4:	20000bdc 	.word	0x20000bdc
 80058c8:	20000be0 	.word	0x20000be0
 80058cc:	20000c3c 	.word	0x20000c3c
 80058d0:	20000c44 	.word	0x20000c44
 80058d4:	20000c2c 	.word	0x20000c2c
 80058d8:	20000754 	.word	0x20000754
 80058dc:	20000750 	.word	0x20000750
 80058e0:	20000c34 	.word	0x20000c34
 80058e4:	20000c38 	.word	0x20000c38

080058e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ee:	4b27      	ldr	r3, [pc, #156]	; (800598c <vTaskSwitchContext+0xa4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <vTaskSwitchContext+0xa8>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058fc:	e040      	b.n	8005980 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80058fe:	4b24      	ldr	r3, [pc, #144]	; (8005990 <vTaskSwitchContext+0xa8>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005904:	4b23      	ldr	r3, [pc, #140]	; (8005994 <vTaskSwitchContext+0xac>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e00f      	b.n	800592c <vTaskSwitchContext+0x44>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <vTaskSwitchContext+0x3e>
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	607b      	str	r3, [r7, #4]
 8005924:	e7fe      	b.n	8005924 <vTaskSwitchContext+0x3c>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3b01      	subs	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	491a      	ldr	r1, [pc, #104]	; (8005998 <vTaskSwitchContext+0xb0>)
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	440b      	add	r3, r1
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0e5      	beq.n	800590c <vTaskSwitchContext+0x24>
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4a13      	ldr	r2, [pc, #76]	; (8005998 <vTaskSwitchContext+0xb0>)
 800594c:	4413      	add	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	3308      	adds	r3, #8
 8005962:	429a      	cmp	r2, r3
 8005964:	d104      	bne.n	8005970 <vTaskSwitchContext+0x88>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	605a      	str	r2, [r3, #4]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <vTaskSwitchContext+0xb4>)
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4a06      	ldr	r2, [pc, #24]	; (8005994 <vTaskSwitchContext+0xac>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6013      	str	r3, [r2, #0]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	20000c4c 	.word	0x20000c4c
 8005990:	20000c38 	.word	0x20000c38
 8005994:	20000c2c 	.word	0x20000c2c
 8005998:	20000754 	.word	0x20000754
 800599c:	20000750 	.word	0x20000750

080059a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <vTaskPlaceOnEventList+0x24>
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e7fe      	b.n	80059c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059c4:	4b07      	ldr	r3, [pc, #28]	; (80059e4 <vTaskPlaceOnEventList+0x44>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3318      	adds	r3, #24
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe faba 	bl	8003f46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059d2:	2101      	movs	r1, #1
 80059d4:	6838      	ldr	r0, [r7, #0]
 80059d6:	f000 fb6d 	bl	80060b4 <prvAddCurrentTaskToDelayedList>
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000750 	.word	0x20000750

080059e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d109      	bne.n	8005a0e <vTaskPlaceOnEventListRestricted+0x26>
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e7fe      	b.n	8005a0c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <vTaskPlaceOnEventListRestricted+0x50>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3318      	adds	r3, #24
 8005a14:	4619      	mov	r1, r3
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7fe fa71 	bl	8003efe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	68b8      	ldr	r0, [r7, #8]
 8005a2c:	f000 fb42 	bl	80060b4 <prvAddCurrentTaskToDelayedList>
	}
 8005a30:	bf00      	nop
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20000750 	.word	0x20000750

08005a3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <xTaskRemoveFromEventList+0x2a>
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e7fe      	b.n	8005a64 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	3318      	adds	r3, #24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe faa4 	bl	8003fb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <xTaskRemoveFromEventList+0xac>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11d      	bne.n	8005ab4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fa9b 	bl	8003fb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	4b19      	ldr	r3, [pc, #100]	; (8005aec <xTaskRemoveFromEventList+0xb0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d903      	bls.n	8005a96 <xTaskRemoveFromEventList+0x5a>
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	4a16      	ldr	r2, [pc, #88]	; (8005aec <xTaskRemoveFromEventList+0xb0>)
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <xTaskRemoveFromEventList+0xb4>)
 8005aa4:	441a      	add	r2, r3
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f7fe fa26 	bl	8003efe <vListInsertEnd>
 8005ab2:	e005      	b.n	8005ac0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	4619      	mov	r1, r3
 8005aba:	480e      	ldr	r0, [pc, #56]	; (8005af4 <xTaskRemoveFromEventList+0xb8>)
 8005abc:	f7fe fa1f 	bl	8003efe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <xTaskRemoveFromEventList+0xbc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d905      	bls.n	8005ada <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <xTaskRemoveFromEventList+0xc0>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e001      	b.n	8005ade <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ade:	697b      	ldr	r3, [r7, #20]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000c4c 	.word	0x20000c4c
 8005aec:	20000c2c 	.word	0x20000c2c
 8005af0:	20000754 	.word	0x20000754
 8005af4:	20000be4 	.word	0x20000be4
 8005af8:	20000750 	.word	0x20000750
 8005afc:	20000c38 	.word	0x20000c38

08005b00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <vTaskInternalSetTimeOutState+0x24>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <vTaskInternalSetTimeOutState+0x28>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	605a      	str	r2, [r3, #4]
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	20000c3c 	.word	0x20000c3c
 8005b28:	20000c28 	.word	0x20000c28

08005b2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <xTaskCheckForTimeOut+0x24>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	e7fe      	b.n	8005b4e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <xTaskCheckForTimeOut+0x3e>
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	e7fe      	b.n	8005b68 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005b6a:	f000 ff67 	bl	8006a3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b6e:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <xTaskCheckForTimeOut+0xb8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b86:	d102      	bne.n	8005b8e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	e023      	b.n	8005bd6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <xTaskCheckForTimeOut+0xbc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d007      	beq.n	8005baa <xTaskCheckForTimeOut+0x7e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d302      	bcc.n	8005baa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	e015      	b.n	8005bd6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d20b      	bcs.n	8005bcc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff ff9d 	bl	8005b00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
 8005bca:	e004      	b.n	8005bd6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bd6:	f000 ff5f 	bl	8006a98 <vPortExitCritical>

	return xReturn;
 8005bda:	69fb      	ldr	r3, [r7, #28]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20000c28 	.word	0x20000c28
 8005be8:	20000c3c 	.word	0x20000c3c

08005bec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	; (8005c00 <vTaskMissedYield+0x14>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	20000c38 	.word	0x20000c38

08005c04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c0c:	f000 f852 	bl	8005cb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c10:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <prvIdleTask+0x28>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d9f9      	bls.n	8005c0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <prvIdleTask+0x2c>)
 8005c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c28:	e7f0      	b.n	8005c0c <prvIdleTask+0x8>
 8005c2a:	bf00      	nop
 8005c2c:	20000754 	.word	0x20000754
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	e00c      	b.n	8005c5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <prvInitialiseTaskLists+0x60>)
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fe f928 	bl	8003ea4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3301      	adds	r3, #1
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b37      	cmp	r3, #55	; 0x37
 8005c5e:	d9ef      	bls.n	8005c40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c60:	480d      	ldr	r0, [pc, #52]	; (8005c98 <prvInitialiseTaskLists+0x64>)
 8005c62:	f7fe f91f 	bl	8003ea4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c66:	480d      	ldr	r0, [pc, #52]	; (8005c9c <prvInitialiseTaskLists+0x68>)
 8005c68:	f7fe f91c 	bl	8003ea4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c6c:	480c      	ldr	r0, [pc, #48]	; (8005ca0 <prvInitialiseTaskLists+0x6c>)
 8005c6e:	f7fe f919 	bl	8003ea4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c72:	480c      	ldr	r0, [pc, #48]	; (8005ca4 <prvInitialiseTaskLists+0x70>)
 8005c74:	f7fe f916 	bl	8003ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c78:	480b      	ldr	r0, [pc, #44]	; (8005ca8 <prvInitialiseTaskLists+0x74>)
 8005c7a:	f7fe f913 	bl	8003ea4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c7e:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <prvInitialiseTaskLists+0x78>)
 8005c80:	4a05      	ldr	r2, [pc, #20]	; (8005c98 <prvInitialiseTaskLists+0x64>)
 8005c82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <prvInitialiseTaskLists+0x7c>)
 8005c86:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <prvInitialiseTaskLists+0x68>)
 8005c88:	601a      	str	r2, [r3, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000754 	.word	0x20000754
 8005c98:	20000bb4 	.word	0x20000bb4
 8005c9c:	20000bc8 	.word	0x20000bc8
 8005ca0:	20000be4 	.word	0x20000be4
 8005ca4:	20000bf8 	.word	0x20000bf8
 8005ca8:	20000c10 	.word	0x20000c10
 8005cac:	20000bdc 	.word	0x20000bdc
 8005cb0:	20000be0 	.word	0x20000be0

08005cb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cba:	e019      	b.n	8005cf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cbc:	f000 febe 	bl	8006a3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <prvCheckTasksWaitingTermination+0x4c>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe f973 	bl	8003fb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <prvCheckTasksWaitingTermination+0x50>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <prvCheckTasksWaitingTermination+0x50>)
 8005cda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <prvCheckTasksWaitingTermination+0x54>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <prvCheckTasksWaitingTermination+0x54>)
 8005ce4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ce6:	f000 fed7 	bl	8006a98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f80e 	bl	8005d0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <prvCheckTasksWaitingTermination+0x54>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e1      	bne.n	8005cbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20000bf8 	.word	0x20000bf8
 8005d04:	20000c24 	.word	0x20000c24
 8005d08:	20000c0c 	.word	0x20000c0c

08005d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d108      	bne.n	8005d30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 f866 	bl	8006df4 <vPortFree>
				vPortFree( pxTCB );
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f001 f863 	bl	8006df4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d2e:	e017      	b.n	8005d60 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d103      	bne.n	8005d42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f001 f85a 	bl	8006df4 <vPortFree>
	}
 8005d40:	e00e      	b.n	8005d60 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d009      	beq.n	8005d60 <prvDeleteTCB+0x54>
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e7fe      	b.n	8005d5e <prvDeleteTCB+0x52>
	}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <prvResetNextTaskUnblockTime+0x38>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <prvResetNextTaskUnblockTime+0x3c>)
 8005d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d80:	e008      	b.n	8005d94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d82:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <prvResetNextTaskUnblockTime+0x38>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	4a04      	ldr	r2, [pc, #16]	; (8005da4 <prvResetNextTaskUnblockTime+0x3c>)
 8005d92:	6013      	str	r3, [r2, #0]
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	20000bdc 	.word	0x20000bdc
 8005da4:	20000c44 	.word	0x20000c44

08005da8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <xTaskGetSchedulerState+0x34>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005db6:	2301      	movs	r3, #1
 8005db8:	607b      	str	r3, [r7, #4]
 8005dba:	e008      	b.n	8005dce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dbc:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <xTaskGetSchedulerState+0x38>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	607b      	str	r3, [r7, #4]
 8005dc8:	e001      	b.n	8005dce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dce:	687b      	ldr	r3, [r7, #4]
	}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	20000c30 	.word	0x20000c30
 8005de0:	20000c4c 	.word	0x20000c4c

08005de4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d051      	beq.n	8005e9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfe:	4b2a      	ldr	r3, [pc, #168]	; (8005ea8 <xTaskPriorityInherit+0xc4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d241      	bcs.n	8005e8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	db06      	blt.n	8005e1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e10:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <xTaskPriorityInherit+0xc4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6959      	ldr	r1, [r3, #20]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <xTaskPriorityInherit+0xc8>)
 8005e30:	4413      	add	r3, r2
 8005e32:	4299      	cmp	r1, r3
 8005e34:	d122      	bne.n	8005e7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe f8bc 	bl	8003fb8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e40:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <xTaskPriorityInherit+0xc4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4e:	4b18      	ldr	r3, [pc, #96]	; (8005eb0 <xTaskPriorityInherit+0xcc>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d903      	bls.n	8005e5e <xTaskPriorityInherit+0x7a>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5a:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <xTaskPriorityInherit+0xcc>)
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4a10      	ldr	r2, [pc, #64]	; (8005eac <xTaskPriorityInherit+0xc8>)
 8005e6c:	441a      	add	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7fe f842 	bl	8003efe <vListInsertEnd>
 8005e7a:	e004      	b.n	8005e86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <xTaskPriorityInherit+0xc4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e86:	2301      	movs	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e008      	b.n	8005e9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <xTaskPriorityInherit+0xc4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d201      	bcs.n	8005e9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
	}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000750 	.word	0x20000750
 8005eac:	20000754 	.word	0x20000754
 8005eb0:	20000c2c 	.word	0x20000c2c

08005eb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d054      	beq.n	8005f74 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005eca:	4b2d      	ldr	r3, [pc, #180]	; (8005f80 <xTaskPriorityDisinherit+0xcc>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d009      	beq.n	8005ee8 <xTaskPriorityDisinherit+0x34>
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e7fe      	b.n	8005ee6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d109      	bne.n	8005f04 <xTaskPriorityDisinherit+0x50>
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	e7fe      	b.n	8005f02 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d02c      	beq.n	8005f74 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d128      	bne.n	8005f74 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	3304      	adds	r3, #4
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe f846 	bl	8003fb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f44:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <xTaskPriorityDisinherit+0xd0>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d903      	bls.n	8005f54 <xTaskPriorityDisinherit+0xa0>
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <xTaskPriorityDisinherit+0xd0>)
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <xTaskPriorityDisinherit+0xd4>)
 8005f62:	441a      	add	r2, r3
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7fd ffc7 	bl	8003efe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f70:	2301      	movs	r3, #1
 8005f72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f74:	697b      	ldr	r3, [r7, #20]
	}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000750 	.word	0x20000750
 8005f84:	20000c2c 	.word	0x20000c2c
 8005f88:	20000754 	.word	0x20000754

08005f8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d068      	beq.n	8006076 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	e7fe      	b.n	8005fbe <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d902      	bls.n	8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e002      	b.n	8005fd6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d04a      	beq.n	8006076 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d145      	bne.n	8006076 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005fea:	4b25      	ldr	r3, [pc, #148]	; (8006080 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d109      	bne.n	8006008 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	e7fe      	b.n	8006006 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	db04      	blt.n	8006026 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	6959      	ldr	r1, [r3, #20]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006036:	4413      	add	r3, r2
 8006038:	4299      	cmp	r1, r3
 800603a:	d11c      	bne.n	8006076 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	3304      	adds	r3, #4
 8006040:	4618      	mov	r0, r3
 8006042:	f7fd ffb9 	bl	8003fb8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604a:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d903      	bls.n	800605a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	4a0c      	ldr	r2, [pc, #48]	; (8006088 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4a07      	ldr	r2, [pc, #28]	; (8006084 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006068:	441a      	add	r2, r3
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	3304      	adds	r3, #4
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f7fd ff44 	bl	8003efe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006076:	bf00      	nop
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000750 	.word	0x20000750
 8006084:	20000754 	.word	0x20000754
 8006088:	20000c2c 	.word	0x20000c2c

0800608c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800609e:	3201      	adds	r2, #1
 80060a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80060a2:	4b03      	ldr	r3, [pc, #12]	; (80060b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80060a4:	681b      	ldr	r3, [r3, #0]
	}
 80060a6:	4618      	mov	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000750 	.word	0x20000750

080060b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060be:	4b21      	ldr	r3, [pc, #132]	; (8006144 <prvAddCurrentTaskToDelayedList+0x90>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c4:	4b20      	ldr	r3, [pc, #128]	; (8006148 <prvAddCurrentTaskToDelayedList+0x94>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3304      	adds	r3, #4
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fd ff74 	bl	8003fb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d6:	d10a      	bne.n	80060ee <prvAddCurrentTaskToDelayedList+0x3a>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <prvAddCurrentTaskToDelayedList+0x94>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	4819      	ldr	r0, [pc, #100]	; (800614c <prvAddCurrentTaskToDelayedList+0x98>)
 80060e8:	f7fd ff09 	bl	8003efe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060ec:	e026      	b.n	800613c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4413      	add	r3, r2
 80060f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <prvAddCurrentTaskToDelayedList+0x94>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	429a      	cmp	r2, r3
 8006104:	d209      	bcs.n	800611a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <prvAddCurrentTaskToDelayedList+0x94>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fd ff17 	bl	8003f46 <vListInsert>
}
 8006118:	e010      	b.n	800613c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800611a:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <prvAddCurrentTaskToDelayedList+0xa0>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <prvAddCurrentTaskToDelayedList+0x94>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f7fd ff0d 	bl	8003f46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <prvAddCurrentTaskToDelayedList+0xa4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	429a      	cmp	r2, r3
 8006134:	d202      	bcs.n	800613c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006136:	4a08      	ldr	r2, [pc, #32]	; (8006158 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6013      	str	r3, [r2, #0]
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20000c28 	.word	0x20000c28
 8006148:	20000750 	.word	0x20000750
 800614c:	20000c10 	.word	0x20000c10
 8006150:	20000be0 	.word	0x20000be0
 8006154:	20000bdc 	.word	0x20000bdc
 8006158:	20000c44 	.word	0x20000c44

0800615c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	; 0x28
 8006160:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006166:	f000 faff 	bl	8006768 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800616a:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <xTimerCreateTimerTask+0x80>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d021      	beq.n	80061b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800617a:	1d3a      	adds	r2, r7, #4
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	f107 030c 	add.w	r3, r7, #12
 8006184:	4618      	mov	r0, r3
 8006186:	f7fd fe73 	bl	8003e70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	9202      	str	r2, [sp, #8]
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	2302      	movs	r3, #2
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	2300      	movs	r3, #0
 800619a:	460a      	mov	r2, r1
 800619c:	4910      	ldr	r1, [pc, #64]	; (80061e0 <xTimerCreateTimerTask+0x84>)
 800619e:	4811      	ldr	r0, [pc, #68]	; (80061e4 <xTimerCreateTimerTask+0x88>)
 80061a0:	f7fe ff22 	bl	8004fe8 <xTaskCreateStatic>
 80061a4:	4602      	mov	r2, r0
 80061a6:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <xTimerCreateTimerTask+0x8c>)
 80061a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061aa:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <xTimerCreateTimerTask+0x8c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061b2:	2301      	movs	r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <xTimerCreateTimerTask+0x74>
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e7fe      	b.n	80061ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 80061d0:	697b      	ldr	r3, [r7, #20]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000c80 	.word	0x20000c80
 80061e0:	08008128 	.word	0x08008128
 80061e4:	0800631d 	.word	0x0800631d
 80061e8:	20000c84 	.word	0x20000c84

080061ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d109      	bne.n	8006218 <xTimerGenericCommand+0x2c>
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	623b      	str	r3, [r7, #32]
 8006216:	e7fe      	b.n	8006216 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006218:	4b19      	ldr	r3, [pc, #100]	; (8006280 <xTimerGenericCommand+0x94>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02a      	beq.n	8006276 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b05      	cmp	r3, #5
 8006230:	dc18      	bgt.n	8006264 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006232:	f7ff fdb9 	bl	8005da8 <xTaskGetSchedulerState>
 8006236:	4603      	mov	r3, r0
 8006238:	2b02      	cmp	r3, #2
 800623a:	d109      	bne.n	8006250 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <xTimerGenericCommand+0x94>)
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	f107 0110 	add.w	r1, r7, #16
 8006244:	2300      	movs	r3, #0
 8006246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006248:	f7fe f884 	bl	8004354 <xQueueGenericSend>
 800624c:	6278      	str	r0, [r7, #36]	; 0x24
 800624e:	e012      	b.n	8006276 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <xTimerGenericCommand+0x94>)
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	f107 0110 	add.w	r1, r7, #16
 8006258:	2300      	movs	r3, #0
 800625a:	2200      	movs	r2, #0
 800625c:	f7fe f87a 	bl	8004354 <xQueueGenericSend>
 8006260:	6278      	str	r0, [r7, #36]	; 0x24
 8006262:	e008      	b.n	8006276 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <xTimerGenericCommand+0x94>)
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	f107 0110 	add.w	r1, r7, #16
 800626c:	2300      	movs	r3, #0
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	f7fe f96a 	bl	8004548 <xQueueGenericSendFromISR>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006278:	4618      	mov	r0, r3
 800627a:	3728      	adds	r7, #40	; 0x28
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000c80 	.word	0x20000c80

08006284 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628e:	4b22      	ldr	r3, [pc, #136]	; (8006318 <prvProcessExpiredTimer+0x94>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	3304      	adds	r3, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f7fd fe8b 	bl	8003fb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d021      	beq.n	80062f4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	18d1      	adds	r1, r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	6978      	ldr	r0, [r7, #20]
 80062be:	f000 f8d1 	bl	8006464 <prvInsertTimerInActiveList>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01e      	beq.n	8006306 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062c8:	2300      	movs	r3, #0
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2300      	movs	r3, #0
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	2100      	movs	r1, #0
 80062d2:	6978      	ldr	r0, [r7, #20]
 80062d4:	f7ff ff8a 	bl	80061ec <xTimerGenericCommand>
 80062d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d112      	bne.n	8006306 <prvProcessExpiredTimer+0x82>
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e7fe      	b.n	80062f2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062fa:	f023 0301 	bic.w	r3, r3, #1
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	6978      	ldr	r0, [r7, #20]
 800630c:	4798      	blx	r3
}
 800630e:	bf00      	nop
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20000c78 	.word	0x20000c78

0800631c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006324:	f107 0308 	add.w	r3, r7, #8
 8006328:	4618      	mov	r0, r3
 800632a:	f000 f857 	bl	80063dc <prvGetNextExpireTime>
 800632e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4619      	mov	r1, r3
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f803 	bl	8006340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800633a:	f000 f8d5 	bl	80064e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800633e:	e7f1      	b.n	8006324 <prvTimerTask+0x8>

08006340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800634a:	f7ff f95b 	bl	8005604 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800634e:	f107 0308 	add.w	r3, r7, #8
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f866 	bl	8006424 <prvSampleTimeNow>
 8006358:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d130      	bne.n	80063c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <prvProcessTimerOrBlockTask+0x3c>
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	429a      	cmp	r2, r3
 800636c:	d806      	bhi.n	800637c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800636e:	f7ff f957 	bl	8005620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7ff ff85 	bl	8006284 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800637a:	e024      	b.n	80063c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <prvProcessTimerOrBlockTask+0x90>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <prvProcessTimerOrBlockTask+0x50>
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <prvProcessTimerOrBlockTask+0x52>
 8006390:	2300      	movs	r3, #0
 8006392:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006394:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <prvProcessTimerOrBlockTask+0x94>)
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	4619      	mov	r1, r3
 80063a2:	f7fe fded 	bl	8004f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063a6:	f7ff f93b 	bl	8005620 <xTaskResumeAll>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <prvProcessTimerOrBlockTask+0x98>)
 80063b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	f3bf 8f6f 	isb	sy
}
 80063c0:	e001      	b.n	80063c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063c2:	f7ff f92d 	bl	8005620 <xTaskResumeAll>
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000c7c 	.word	0x20000c7c
 80063d4:	20000c80 	.word	0x20000c80
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063e4:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <prvGetNextExpireTime+0x44>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <prvGetNextExpireTime+0x16>
 80063ee:	2201      	movs	r2, #1
 80063f0:	e000      	b.n	80063f4 <prvGetNextExpireTime+0x18>
 80063f2:	2200      	movs	r2, #0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d105      	bne.n	800640c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <prvGetNextExpireTime+0x44>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e001      	b.n	8006410 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006410:	68fb      	ldr	r3, [r7, #12]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000c78 	.word	0x20000c78

08006424 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800642c:	f7ff f994 	bl	8005758 <xTaskGetTickCount>
 8006430:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <prvSampleTimeNow+0x3c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d205      	bcs.n	8006448 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800643c:	f000 f930 	bl	80066a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	e002      	b.n	800644e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800644e:	4a04      	ldr	r2, [pc, #16]	; (8006460 <prvSampleTimeNow+0x3c>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006454:	68fb      	ldr	r3, [r7, #12]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000c88 	.word	0x20000c88

08006464 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d812      	bhi.n	80064b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	429a      	cmp	r2, r3
 8006496:	d302      	bcc.n	800649e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e01b      	b.n	80064d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800649e:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <prvInsertTimerInActiveList+0x7c>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fd fd4c 	bl	8003f46 <vListInsert>
 80064ae:	e012      	b.n	80064d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d206      	bcs.n	80064c6 <prvInsertTimerInActiveList+0x62>
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d302      	bcc.n	80064c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e007      	b.n	80064d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <prvInsertTimerInActiveList+0x80>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f7fd fd38 	bl	8003f46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064d6:	697b      	ldr	r3, [r7, #20]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20000c7c 	.word	0x20000c7c
 80064e4:	20000c78 	.word	0x20000c78

080064e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08e      	sub	sp, #56	; 0x38
 80064ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064ee:	e0c6      	b.n	800667e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da17      	bge.n	8006526 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	3304      	adds	r3, #4
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d109      	bne.n	8006516 <prvProcessReceivedCommands+0x2e>
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	e7fe      	b.n	8006514 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800651c:	6850      	ldr	r0, [r2, #4]
 800651e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006520:	6892      	ldr	r2, [r2, #8]
 8006522:	4611      	mov	r1, r2
 8006524:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f2c0 80a7 	blt.w	800667c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	3304      	adds	r3, #4
 800653e:	4618      	mov	r0, r3
 8006540:	f7fd fd3a 	bl	8003fb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006544:	463b      	mov	r3, r7
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ff6c 	bl	8006424 <prvSampleTimeNow>
 800654c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b09      	cmp	r3, #9
 8006552:	f200 8094 	bhi.w	800667e <prvProcessReceivedCommands+0x196>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <prvProcessReceivedCommands+0x74>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	08006585 	.word	0x08006585
 8006560:	08006585 	.word	0x08006585
 8006564:	08006585 	.word	0x08006585
 8006568:	080065f7 	.word	0x080065f7
 800656c:	0800660b 	.word	0x0800660b
 8006570:	08006653 	.word	0x08006653
 8006574:	08006585 	.word	0x08006585
 8006578:	08006585 	.word	0x08006585
 800657c:	080065f7 	.word	0x080065f7
 8006580:	0800660b 	.word	0x0800660b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	b2da      	uxtb	r2, r3
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	18d1      	adds	r1, r2, r3
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a4:	f7ff ff5e 	bl	8006464 <prvInsertTimerInActiveList>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d067      	beq.n	800667e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d05c      	beq.n	800667e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	441a      	add	r2, r3
 80065cc:	2300      	movs	r3, #0
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	2300      	movs	r3, #0
 80065d2:	2100      	movs	r1, #0
 80065d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d6:	f7ff fe09 	bl	80061ec <xTimerGenericCommand>
 80065da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d14d      	bne.n	800667e <prvProcessReceivedCommands+0x196>
 80065e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	e7fe      	b.n	80065f4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	b2da      	uxtb	r2, r3
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006608:	e039      	b.n	800667e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	b2da      	uxtb	r2, r3
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <prvProcessReceivedCommands+0x156>
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	e7fe      	b.n	800663c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	18d1      	adds	r1, r2, r3
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800664c:	f7ff ff0a 	bl	8006464 <prvInsertTimerInActiveList>
					break;
 8006650:	e015      	b.n	800667e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006662:	f000 fbc7 	bl	8006df4 <vPortFree>
 8006666:	e00a      	b.n	800667e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666e:	f023 0301 	bic.w	r3, r3, #1
 8006672:	b2da      	uxtb	r2, r3
 8006674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800667a:	e000      	b.n	800667e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800667c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <prvProcessReceivedCommands+0x1b4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	1d39      	adds	r1, r7, #4
 8006684:	2200      	movs	r2, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe f87c 	bl	8004784 <xQueueReceive>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	f47f af2e 	bne.w	80064f0 <prvProcessReceivedCommands+0x8>
	}
}
 8006694:	bf00      	nop
 8006696:	3730      	adds	r7, #48	; 0x30
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000c80 	.word	0x20000c80

080066a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066a6:	e047      	b.n	8006738 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066a8:	4b2d      	ldr	r3, [pc, #180]	; (8006760 <prvSwitchTimerLists+0xc0>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b2:	4b2b      	ldr	r3, [pc, #172]	; (8006760 <prvSwitchTimerLists+0xc0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3304      	adds	r3, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fd fc79 	bl	8003fb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d02d      	beq.n	8006738 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4413      	add	r3, r2
 80066e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d90e      	bls.n	800670c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066fa:	4b19      	ldr	r3, [pc, #100]	; (8006760 <prvSwitchTimerLists+0xc0>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	4610      	mov	r0, r2
 8006706:	f7fd fc1e 	bl	8003f46 <vListInsert>
 800670a:	e015      	b.n	8006738 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800670c:	2300      	movs	r3, #0
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	2300      	movs	r3, #0
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	2100      	movs	r1, #0
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff fd68 	bl	80061ec <xTimerGenericCommand>
 800671c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <prvSwitchTimerLists+0x98>
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	e7fe      	b.n	8006736 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006738:	4b09      	ldr	r3, [pc, #36]	; (8006760 <prvSwitchTimerLists+0xc0>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1b2      	bne.n	80066a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006742:	4b07      	ldr	r3, [pc, #28]	; (8006760 <prvSwitchTimerLists+0xc0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <prvSwitchTimerLists+0xc4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a04      	ldr	r2, [pc, #16]	; (8006760 <prvSwitchTimerLists+0xc0>)
 800674e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006750:	4a04      	ldr	r2, [pc, #16]	; (8006764 <prvSwitchTimerLists+0xc4>)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	6013      	str	r3, [r2, #0]
}
 8006756:	bf00      	nop
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000c78 	.word	0x20000c78
 8006764:	20000c7c 	.word	0x20000c7c

08006768 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800676e:	f000 f965 	bl	8006a3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006772:	4b15      	ldr	r3, [pc, #84]	; (80067c8 <prvCheckForValidListAndQueue+0x60>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d120      	bne.n	80067bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800677a:	4814      	ldr	r0, [pc, #80]	; (80067cc <prvCheckForValidListAndQueue+0x64>)
 800677c:	f7fd fb92 	bl	8003ea4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006780:	4813      	ldr	r0, [pc, #76]	; (80067d0 <prvCheckForValidListAndQueue+0x68>)
 8006782:	f7fd fb8f 	bl	8003ea4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006786:	4b13      	ldr	r3, [pc, #76]	; (80067d4 <prvCheckForValidListAndQueue+0x6c>)
 8006788:	4a10      	ldr	r2, [pc, #64]	; (80067cc <prvCheckForValidListAndQueue+0x64>)
 800678a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800678c:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <prvCheckForValidListAndQueue+0x70>)
 800678e:	4a10      	ldr	r2, [pc, #64]	; (80067d0 <prvCheckForValidListAndQueue+0x68>)
 8006790:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006792:	2300      	movs	r3, #0
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	4b11      	ldr	r3, [pc, #68]	; (80067dc <prvCheckForValidListAndQueue+0x74>)
 8006798:	4a11      	ldr	r2, [pc, #68]	; (80067e0 <prvCheckForValidListAndQueue+0x78>)
 800679a:	2110      	movs	r1, #16
 800679c:	200a      	movs	r0, #10
 800679e:	f7fd fc9d 	bl	80040dc <xQueueGenericCreateStatic>
 80067a2:	4602      	mov	r2, r0
 80067a4:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <prvCheckForValidListAndQueue+0x60>)
 80067a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067a8:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <prvCheckForValidListAndQueue+0x60>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <prvCheckForValidListAndQueue+0x60>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	490b      	ldr	r1, [pc, #44]	; (80067e4 <prvCheckForValidListAndQueue+0x7c>)
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fb90 	bl	8004edc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067bc:	f000 f96c 	bl	8006a98 <vPortExitCritical>
}
 80067c0:	bf00      	nop
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000c80 	.word	0x20000c80
 80067cc:	20000c50 	.word	0x20000c50
 80067d0:	20000c64 	.word	0x20000c64
 80067d4:	20000c78 	.word	0x20000c78
 80067d8:	20000c7c 	.word	0x20000c7c
 80067dc:	20000d2c 	.word	0x20000d2c
 80067e0:	20000c8c 	.word	0x20000c8c
 80067e4:	08008130 	.word	0x08008130

080067e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3b04      	subs	r3, #4
 80067f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3b04      	subs	r3, #4
 8006806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f023 0201 	bic.w	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3b04      	subs	r3, #4
 8006816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006818:	4a0c      	ldr	r2, [pc, #48]	; (800684c <pxPortInitialiseStack+0x64>)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b14      	subs	r3, #20
 8006822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3b04      	subs	r3, #4
 800682e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f06f 0202 	mvn.w	r2, #2
 8006836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b20      	subs	r3, #32
 800683c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800683e:	68fb      	ldr	r3, [r7, #12]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	08006851 	.word	0x08006851

08006850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <prvTaskExitError+0x50>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006862:	d009      	beq.n	8006878 <prvTaskExitError+0x28>
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	e7fe      	b.n	8006876 <prvTaskExitError+0x26>
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800688a:	bf00      	nop
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0fc      	beq.n	800688c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	2000000c 	.word	0x2000000c
	...

080068b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <pxCurrentTCBConst2>)
 80068b2:	6819      	ldr	r1, [r3, #0]
 80068b4:	6808      	ldr	r0, [r1, #0]
 80068b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ba:	f380 8809 	msr	PSP, r0
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f04f 0000 	mov.w	r0, #0
 80068c6:	f380 8811 	msr	BASEPRI, r0
 80068ca:	4770      	bx	lr
 80068cc:	f3af 8000 	nop.w

080068d0 <pxCurrentTCBConst2>:
 80068d0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop

080068d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068d8:	4808      	ldr	r0, [pc, #32]	; (80068fc <prvPortStartFirstTask+0x24>)
 80068da:	6800      	ldr	r0, [r0, #0]
 80068dc:	6800      	ldr	r0, [r0, #0]
 80068de:	f380 8808 	msr	MSP, r0
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f380 8814 	msr	CONTROL, r0
 80068ea:	b662      	cpsie	i
 80068ec:	b661      	cpsie	f
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	df00      	svc	0
 80068f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068fa:	bf00      	nop
 80068fc:	e000ed08 	.word	0xe000ed08

08006900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006906:	4b44      	ldr	r3, [pc, #272]	; (8006a18 <xPortStartScheduler+0x118>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a44      	ldr	r2, [pc, #272]	; (8006a1c <xPortStartScheduler+0x11c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d109      	bne.n	8006924 <xPortStartScheduler+0x24>
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	e7fe      	b.n	8006922 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006924:	4b3c      	ldr	r3, [pc, #240]	; (8006a18 <xPortStartScheduler+0x118>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a3d      	ldr	r2, [pc, #244]	; (8006a20 <xPortStartScheduler+0x120>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d109      	bne.n	8006942 <xPortStartScheduler+0x42>
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	e7fe      	b.n	8006940 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006942:	4b38      	ldr	r3, [pc, #224]	; (8006a24 <xPortStartScheduler+0x124>)
 8006944:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	22ff      	movs	r2, #255	; 0xff
 8006952:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006964:	b2da      	uxtb	r2, r3
 8006966:	4b30      	ldr	r3, [pc, #192]	; (8006a28 <xPortStartScheduler+0x128>)
 8006968:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800696a:	4b30      	ldr	r3, [pc, #192]	; (8006a2c <xPortStartScheduler+0x12c>)
 800696c:	2207      	movs	r2, #7
 800696e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006970:	e009      	b.n	8006986 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006972:	4b2e      	ldr	r3, [pc, #184]	; (8006a2c <xPortStartScheduler+0x12c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3b01      	subs	r3, #1
 8006978:	4a2c      	ldr	r2, [pc, #176]	; (8006a2c <xPortStartScheduler+0x12c>)
 800697a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	b2db      	uxtb	r3, r3
 8006984:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006986:	78fb      	ldrb	r3, [r7, #3]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698e:	2b80      	cmp	r3, #128	; 0x80
 8006990:	d0ef      	beq.n	8006972 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006992:	4b26      	ldr	r3, [pc, #152]	; (8006a2c <xPortStartScheduler+0x12c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f1c3 0307 	rsb	r3, r3, #7
 800699a:	2b04      	cmp	r3, #4
 800699c:	d009      	beq.n	80069b2 <xPortStartScheduler+0xb2>
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	60bb      	str	r3, [r7, #8]
 80069b0:	e7fe      	b.n	80069b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069b2:	4b1e      	ldr	r3, [pc, #120]	; (8006a2c <xPortStartScheduler+0x12c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <xPortStartScheduler+0x12c>)
 80069ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069bc:	4b1b      	ldr	r3, [pc, #108]	; (8006a2c <xPortStartScheduler+0x12c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069c4:	4a19      	ldr	r2, [pc, #100]	; (8006a2c <xPortStartScheduler+0x12c>)
 80069c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069d0:	4b17      	ldr	r3, [pc, #92]	; (8006a30 <xPortStartScheduler+0x130>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <xPortStartScheduler+0x130>)
 80069d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069dc:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <xPortStartScheduler+0x130>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <xPortStartScheduler+0x130>)
 80069e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069e8:	f000 f8d6 	bl	8006b98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069ec:	4b11      	ldr	r3, [pc, #68]	; (8006a34 <xPortStartScheduler+0x134>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069f2:	f000 f8f5 	bl	8006be0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069f6:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <xPortStartScheduler+0x138>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a0f      	ldr	r2, [pc, #60]	; (8006a38 <xPortStartScheduler+0x138>)
 80069fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a02:	f7ff ff69 	bl	80068d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a06:	f7fe ff6f 	bl	80058e8 <vTaskSwitchContext>
	prvTaskExitError();
 8006a0a:	f7ff ff21 	bl	8006850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	e000ed00 	.word	0xe000ed00
 8006a1c:	410fc271 	.word	0x410fc271
 8006a20:	410fc270 	.word	0x410fc270
 8006a24:	e000e400 	.word	0xe000e400
 8006a28:	20000d7c 	.word	0x20000d7c
 8006a2c:	20000d80 	.word	0x20000d80
 8006a30:	e000ed20 	.word	0xe000ed20
 8006a34:	2000000c 	.word	0x2000000c
 8006a38:	e000ef34 	.word	0xe000ef34

08006a3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a54:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <vPortEnterCritical+0x54>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	4a0d      	ldr	r2, [pc, #52]	; (8006a90 <vPortEnterCritical+0x54>)
 8006a5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <vPortEnterCritical+0x54>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10e      	bne.n	8006a84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a66:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <vPortEnterCritical+0x58>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d009      	beq.n	8006a84 <vPortEnterCritical+0x48>
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	603b      	str	r3, [r7, #0]
 8006a82:	e7fe      	b.n	8006a82 <vPortEnterCritical+0x46>
	}
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	2000000c 	.word	0x2000000c
 8006a94:	e000ed04 	.word	0xe000ed04

08006a98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a9e:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <vPortExitCritical+0x4c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <vPortExitCritical+0x22>
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	e7fe      	b.n	8006ab8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006aba:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <vPortExitCritical+0x4c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	4a08      	ldr	r2, [pc, #32]	; (8006ae4 <vPortExitCritical+0x4c>)
 8006ac2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ac4:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <vPortExitCritical+0x4c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d104      	bne.n	8006ad6 <vPortExitCritical+0x3e>
 8006acc:	2300      	movs	r3, #0
 8006ace:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	2000000c 	.word	0x2000000c
	...

08006af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006af0:	f3ef 8009 	mrs	r0, PSP
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <pxCurrentTCBConst>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	f01e 0f10 	tst.w	lr, #16
 8006b00:	bf08      	it	eq
 8006b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0a:	6010      	str	r0, [r2, #0]
 8006b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b14:	f380 8811 	msr	BASEPRI, r0
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f7fe fee2 	bl	80058e8 <vTaskSwitchContext>
 8006b24:	f04f 0000 	mov.w	r0, #0
 8006b28:	f380 8811 	msr	BASEPRI, r0
 8006b2c:	bc09      	pop	{r0, r3}
 8006b2e:	6819      	ldr	r1, [r3, #0]
 8006b30:	6808      	ldr	r0, [r1, #0]
 8006b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b36:	f01e 0f10 	tst.w	lr, #16
 8006b3a:	bf08      	it	eq
 8006b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b40:	f380 8809 	msr	PSP, r0
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	f3af 8000 	nop.w

08006b50 <pxCurrentTCBConst>:
 8006b50:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop

08006b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b70:	f7fe fe02 	bl	8005778 <xTaskIncrementTick>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b7a:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <SysTick_Handler+0x3c>)
 8006b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	e000ed04 	.word	0xe000ed04

08006b98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <vPortSetupTimerInterrupt+0x34>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <vPortSetupTimerInterrupt+0x38>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <vPortSetupTimerInterrupt+0x3c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a0a      	ldr	r2, [pc, #40]	; (8006bd8 <vPortSetupTimerInterrupt+0x40>)
 8006bae:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb2:	099b      	lsrs	r3, r3, #6
 8006bb4:	4a09      	ldr	r2, [pc, #36]	; (8006bdc <vPortSetupTimerInterrupt+0x44>)
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bba:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <vPortSetupTimerInterrupt+0x34>)
 8006bbc:	2207      	movs	r2, #7
 8006bbe:	601a      	str	r2, [r3, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	e000e010 	.word	0xe000e010
 8006bd0:	e000e018 	.word	0xe000e018
 8006bd4:	20000000 	.word	0x20000000
 8006bd8:	10624dd3 	.word	0x10624dd3
 8006bdc:	e000e014 	.word	0xe000e014

08006be0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006be0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bf0 <vPortEnableVFP+0x10>
 8006be4:	6801      	ldr	r1, [r0, #0]
 8006be6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bea:	6001      	str	r1, [r0, #0]
 8006bec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bee:	bf00      	nop
 8006bf0:	e000ed88 	.word	0xe000ed88

08006bf4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bfa:	f3ef 8305 	mrs	r3, IPSR
 8006bfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b0f      	cmp	r3, #15
 8006c04:	d913      	bls.n	8006c2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c06:	4a16      	ldr	r2, [pc, #88]	; (8006c60 <vPortValidateInterruptPriority+0x6c>)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c10:	4b14      	ldr	r3, [pc, #80]	; (8006c64 <vPortValidateInterruptPriority+0x70>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	7afa      	ldrb	r2, [r7, #11]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d209      	bcs.n	8006c2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	607b      	str	r3, [r7, #4]
 8006c2c:	e7fe      	b.n	8006c2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c2e:	4b0e      	ldr	r3, [pc, #56]	; (8006c68 <vPortValidateInterruptPriority+0x74>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c36:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <vPortValidateInterruptPriority+0x78>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d909      	bls.n	8006c52 <vPortValidateInterruptPriority+0x5e>
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	e7fe      	b.n	8006c50 <vPortValidateInterruptPriority+0x5c>
	}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	e000e3f0 	.word	0xe000e3f0
 8006c64:	20000d7c 	.word	0x20000d7c
 8006c68:	e000ed0c 	.word	0xe000ed0c
 8006c6c:	20000d80 	.word	0x20000d80

08006c70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08a      	sub	sp, #40	; 0x28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c7c:	f7fe fcc2 	bl	8005604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c80:	4b57      	ldr	r3, [pc, #348]	; (8006de0 <pvPortMalloc+0x170>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c88:	f000 f90c 	bl	8006ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c8c:	4b55      	ldr	r3, [pc, #340]	; (8006de4 <pvPortMalloc+0x174>)
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f040 808c 	bne.w	8006db2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01c      	beq.n	8006cda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d013      	beq.n	8006cda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f023 0307 	bic.w	r3, r3, #7
 8006cb8:	3308      	adds	r3, #8
 8006cba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <pvPortMalloc+0x6a>
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e7fe      	b.n	8006cd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d068      	beq.n	8006db2 <pvPortMalloc+0x142>
 8006ce0:	4b41      	ldr	r3, [pc, #260]	; (8006de8 <pvPortMalloc+0x178>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d863      	bhi.n	8006db2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cea:	4b40      	ldr	r3, [pc, #256]	; (8006dec <pvPortMalloc+0x17c>)
 8006cec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cee:	4b3f      	ldr	r3, [pc, #252]	; (8006dec <pvPortMalloc+0x17c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cf4:	e004      	b.n	8006d00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d903      	bls.n	8006d12 <pvPortMalloc+0xa2>
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f1      	bne.n	8006cf6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d12:	4b33      	ldr	r3, [pc, #204]	; (8006de0 <pvPortMalloc+0x170>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d04a      	beq.n	8006db2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2208      	movs	r2, #8
 8006d22:	4413      	add	r3, r2
 8006d24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	1ad2      	subs	r2, r2, r3
 8006d36:	2308      	movs	r3, #8
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d91e      	bls.n	8006d7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4413      	add	r3, r2
 8006d44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f003 0307 	and.w	r3, r3, #7
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d009      	beq.n	8006d64 <pvPortMalloc+0xf4>
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e7fe      	b.n	8006d62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1ad2      	subs	r2, r2, r3
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d76:	69b8      	ldr	r0, [r7, #24]
 8006d78:	f000 f8f6 	bl	8006f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d7c:	4b1a      	ldr	r3, [pc, #104]	; (8006de8 <pvPortMalloc+0x178>)
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	4a18      	ldr	r2, [pc, #96]	; (8006de8 <pvPortMalloc+0x178>)
 8006d88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d8a:	4b17      	ldr	r3, [pc, #92]	; (8006de8 <pvPortMalloc+0x178>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <pvPortMalloc+0x180>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d203      	bcs.n	8006d9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d96:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <pvPortMalloc+0x178>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a15      	ldr	r2, [pc, #84]	; (8006df0 <pvPortMalloc+0x180>)
 8006d9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	4b10      	ldr	r3, [pc, #64]	; (8006de4 <pvPortMalloc+0x174>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006db2:	f7fe fc35 	bl	8005620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <pvPortMalloc+0x164>
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	e7fe      	b.n	8006dd2 <pvPortMalloc+0x162>
	return pvReturn;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3728      	adds	r7, #40	; 0x28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20002ccc 	.word	0x20002ccc
 8006de4:	20002cd8 	.word	0x20002cd8
 8006de8:	20002cd0 	.word	0x20002cd0
 8006dec:	20002cc4 	.word	0x20002cc4
 8006df0:	20002cd4 	.word	0x20002cd4

08006df4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d046      	beq.n	8006e94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e06:	2308      	movs	r3, #8
 8006e08:	425b      	negs	r3, r3
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	4b20      	ldr	r3, [pc, #128]	; (8006e9c <vPortFree+0xa8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <vPortFree+0x42>
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e7fe      	b.n	8006e34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <vPortFree+0x5e>
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	e7fe      	b.n	8006e50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <vPortFree+0xa8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d019      	beq.n	8006e94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d115      	bne.n	8006e94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	4b0b      	ldr	r3, [pc, #44]	; (8006e9c <vPortFree+0xa8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	401a      	ands	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e78:	f7fe fbc4 	bl	8005604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <vPortFree+0xac>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4413      	add	r3, r2
 8006e86:	4a06      	ldr	r2, [pc, #24]	; (8006ea0 <vPortFree+0xac>)
 8006e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e8a:	6938      	ldr	r0, [r7, #16]
 8006e8c:	f000 f86c 	bl	8006f68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e90:	f7fe fbc6 	bl	8005620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e94:	bf00      	nop
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20002cd8 	.word	0x20002cd8
 8006ea0:	20002cd0 	.word	0x20002cd0

08006ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eaa:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006eb0:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <prvHeapInit+0xac>)
 8006eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f003 0307 	and.w	r3, r3, #7
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00c      	beq.n	8006ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3307      	adds	r3, #7
 8006ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0307 	bic.w	r3, r3, #7
 8006eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <prvHeapInit+0xac>)
 8006ed4:	4413      	add	r3, r2
 8006ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006edc:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <prvHeapInit+0xb0>)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ee2:	4b1c      	ldr	r3, [pc, #112]	; (8006f54 <prvHeapInit+0xb0>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ef0:	2208      	movs	r2, #8
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0307 	bic.w	r3, r3, #7
 8006efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <prvHeapInit+0xb4>)
 8006f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f06:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <prvHeapInit+0xb4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <prvHeapInit+0xb4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f24:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <prvHeapInit+0xb4>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4a0a      	ldr	r2, [pc, #40]	; (8006f5c <prvHeapInit+0xb8>)
 8006f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <prvHeapInit+0xbc>)
 8006f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f3c:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <prvHeapInit+0xc0>)
 8006f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f42:	601a      	str	r2, [r3, #0]
}
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	20000d84 	.word	0x20000d84
 8006f54:	20002cc4 	.word	0x20002cc4
 8006f58:	20002ccc 	.word	0x20002ccc
 8006f5c:	20002cd4 	.word	0x20002cd4
 8006f60:	20002cd0 	.word	0x20002cd0
 8006f64:	20002cd8 	.word	0x20002cd8

08006f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f70:	4b28      	ldr	r3, [pc, #160]	; (8007014 <prvInsertBlockIntoFreeList+0xac>)
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e002      	b.n	8006f7c <prvInsertBlockIntoFreeList+0x14>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d8f7      	bhi.n	8006f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	4413      	add	r3, r2
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d108      	bne.n	8006faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	441a      	add	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	441a      	add	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d118      	bne.n	8006ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <prvInsertBlockIntoFreeList+0xb0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d00d      	beq.n	8006fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	441a      	add	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e008      	b.n	8006ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <prvInsertBlockIntoFreeList+0xb0>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e003      	b.n	8006ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d002      	beq.n	8007006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20002cc4 	.word	0x20002cc4
 8007018:	20002ccc 	.word	0x20002ccc

0800701c <__errno>:
 800701c:	4b01      	ldr	r3, [pc, #4]	; (8007024 <__errno+0x8>)
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000010 	.word	0x20000010

08007028 <__libc_init_array>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	4e0d      	ldr	r6, [pc, #52]	; (8007060 <__libc_init_array+0x38>)
 800702c:	4c0d      	ldr	r4, [pc, #52]	; (8007064 <__libc_init_array+0x3c>)
 800702e:	1ba4      	subs	r4, r4, r6
 8007030:	10a4      	asrs	r4, r4, #2
 8007032:	2500      	movs	r5, #0
 8007034:	42a5      	cmp	r5, r4
 8007036:	d109      	bne.n	800704c <__libc_init_array+0x24>
 8007038:	4e0b      	ldr	r6, [pc, #44]	; (8007068 <__libc_init_array+0x40>)
 800703a:	4c0c      	ldr	r4, [pc, #48]	; (800706c <__libc_init_array+0x44>)
 800703c:	f000 ff74 	bl	8007f28 <_init>
 8007040:	1ba4      	subs	r4, r4, r6
 8007042:	10a4      	asrs	r4, r4, #2
 8007044:	2500      	movs	r5, #0
 8007046:	42a5      	cmp	r5, r4
 8007048:	d105      	bne.n	8007056 <__libc_init_array+0x2e>
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007050:	4798      	blx	r3
 8007052:	3501      	adds	r5, #1
 8007054:	e7ee      	b.n	8007034 <__libc_init_array+0xc>
 8007056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800705a:	4798      	blx	r3
 800705c:	3501      	adds	r5, #1
 800705e:	e7f2      	b.n	8007046 <__libc_init_array+0x1e>
 8007060:	0800829c 	.word	0x0800829c
 8007064:	0800829c 	.word	0x0800829c
 8007068:	0800829c 	.word	0x0800829c
 800706c:	080082a0 	.word	0x080082a0

08007070 <memcpy>:
 8007070:	b510      	push	{r4, lr}
 8007072:	1e43      	subs	r3, r0, #1
 8007074:	440a      	add	r2, r1
 8007076:	4291      	cmp	r1, r2
 8007078:	d100      	bne.n	800707c <memcpy+0xc>
 800707a:	bd10      	pop	{r4, pc}
 800707c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007084:	e7f7      	b.n	8007076 <memcpy+0x6>

08007086 <memset>:
 8007086:	4402      	add	r2, r0
 8007088:	4603      	mov	r3, r0
 800708a:	4293      	cmp	r3, r2
 800708c:	d100      	bne.n	8007090 <memset+0xa>
 800708e:	4770      	bx	lr
 8007090:	f803 1b01 	strb.w	r1, [r3], #1
 8007094:	e7f9      	b.n	800708a <memset+0x4>
	...

08007098 <iprintf>:
 8007098:	b40f      	push	{r0, r1, r2, r3}
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <iprintf+0x2c>)
 800709c:	b513      	push	{r0, r1, r4, lr}
 800709e:	681c      	ldr	r4, [r3, #0]
 80070a0:	b124      	cbz	r4, 80070ac <iprintf+0x14>
 80070a2:	69a3      	ldr	r3, [r4, #24]
 80070a4:	b913      	cbnz	r3, 80070ac <iprintf+0x14>
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fa22 	bl	80074f0 <__sinit>
 80070ac:	ab05      	add	r3, sp, #20
 80070ae:	9a04      	ldr	r2, [sp, #16]
 80070b0:	68a1      	ldr	r1, [r4, #8]
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fbdb 	bl	8007870 <_vfiprintf_r>
 80070ba:	b002      	add	sp, #8
 80070bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c0:	b004      	add	sp, #16
 80070c2:	4770      	bx	lr
 80070c4:	20000010 	.word	0x20000010

080070c8 <_puts_r>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	460e      	mov	r6, r1
 80070cc:	4605      	mov	r5, r0
 80070ce:	b118      	cbz	r0, 80070d8 <_puts_r+0x10>
 80070d0:	6983      	ldr	r3, [r0, #24]
 80070d2:	b90b      	cbnz	r3, 80070d8 <_puts_r+0x10>
 80070d4:	f000 fa0c 	bl	80074f0 <__sinit>
 80070d8:	69ab      	ldr	r3, [r5, #24]
 80070da:	68ac      	ldr	r4, [r5, #8]
 80070dc:	b913      	cbnz	r3, 80070e4 <_puts_r+0x1c>
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fa06 	bl	80074f0 <__sinit>
 80070e4:	4b23      	ldr	r3, [pc, #140]	; (8007174 <_puts_r+0xac>)
 80070e6:	429c      	cmp	r4, r3
 80070e8:	d117      	bne.n	800711a <_puts_r+0x52>
 80070ea:	686c      	ldr	r4, [r5, #4]
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	071b      	lsls	r3, r3, #28
 80070f0:	d51d      	bpl.n	800712e <_puts_r+0x66>
 80070f2:	6923      	ldr	r3, [r4, #16]
 80070f4:	b1db      	cbz	r3, 800712e <_puts_r+0x66>
 80070f6:	3e01      	subs	r6, #1
 80070f8:	68a3      	ldr	r3, [r4, #8]
 80070fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070fe:	3b01      	subs	r3, #1
 8007100:	60a3      	str	r3, [r4, #8]
 8007102:	b9e9      	cbnz	r1, 8007140 <_puts_r+0x78>
 8007104:	2b00      	cmp	r3, #0
 8007106:	da2e      	bge.n	8007166 <_puts_r+0x9e>
 8007108:	4622      	mov	r2, r4
 800710a:	210a      	movs	r1, #10
 800710c:	4628      	mov	r0, r5
 800710e:	f000 f83f 	bl	8007190 <__swbuf_r>
 8007112:	3001      	adds	r0, #1
 8007114:	d011      	beq.n	800713a <_puts_r+0x72>
 8007116:	200a      	movs	r0, #10
 8007118:	e011      	b.n	800713e <_puts_r+0x76>
 800711a:	4b17      	ldr	r3, [pc, #92]	; (8007178 <_puts_r+0xb0>)
 800711c:	429c      	cmp	r4, r3
 800711e:	d101      	bne.n	8007124 <_puts_r+0x5c>
 8007120:	68ac      	ldr	r4, [r5, #8]
 8007122:	e7e3      	b.n	80070ec <_puts_r+0x24>
 8007124:	4b15      	ldr	r3, [pc, #84]	; (800717c <_puts_r+0xb4>)
 8007126:	429c      	cmp	r4, r3
 8007128:	bf08      	it	eq
 800712a:	68ec      	ldreq	r4, [r5, #12]
 800712c:	e7de      	b.n	80070ec <_puts_r+0x24>
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f000 f87f 	bl	8007234 <__swsetup_r>
 8007136:	2800      	cmp	r0, #0
 8007138:	d0dd      	beq.n	80070f6 <_puts_r+0x2e>
 800713a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	2b00      	cmp	r3, #0
 8007142:	da04      	bge.n	800714e <_puts_r+0x86>
 8007144:	69a2      	ldr	r2, [r4, #24]
 8007146:	429a      	cmp	r2, r3
 8007148:	dc06      	bgt.n	8007158 <_puts_r+0x90>
 800714a:	290a      	cmp	r1, #10
 800714c:	d004      	beq.n	8007158 <_puts_r+0x90>
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	6022      	str	r2, [r4, #0]
 8007154:	7019      	strb	r1, [r3, #0]
 8007156:	e7cf      	b.n	80070f8 <_puts_r+0x30>
 8007158:	4622      	mov	r2, r4
 800715a:	4628      	mov	r0, r5
 800715c:	f000 f818 	bl	8007190 <__swbuf_r>
 8007160:	3001      	adds	r0, #1
 8007162:	d1c9      	bne.n	80070f8 <_puts_r+0x30>
 8007164:	e7e9      	b.n	800713a <_puts_r+0x72>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	200a      	movs	r0, #10
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	6022      	str	r2, [r4, #0]
 800716e:	7018      	strb	r0, [r3, #0]
 8007170:	e7e5      	b.n	800713e <_puts_r+0x76>
 8007172:	bf00      	nop
 8007174:	08008220 	.word	0x08008220
 8007178:	08008240 	.word	0x08008240
 800717c:	08008200 	.word	0x08008200

08007180 <puts>:
 8007180:	4b02      	ldr	r3, [pc, #8]	; (800718c <puts+0xc>)
 8007182:	4601      	mov	r1, r0
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	f7ff bf9f 	b.w	80070c8 <_puts_r>
 800718a:	bf00      	nop
 800718c:	20000010 	.word	0x20000010

08007190 <__swbuf_r>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	460e      	mov	r6, r1
 8007194:	4614      	mov	r4, r2
 8007196:	4605      	mov	r5, r0
 8007198:	b118      	cbz	r0, 80071a2 <__swbuf_r+0x12>
 800719a:	6983      	ldr	r3, [r0, #24]
 800719c:	b90b      	cbnz	r3, 80071a2 <__swbuf_r+0x12>
 800719e:	f000 f9a7 	bl	80074f0 <__sinit>
 80071a2:	4b21      	ldr	r3, [pc, #132]	; (8007228 <__swbuf_r+0x98>)
 80071a4:	429c      	cmp	r4, r3
 80071a6:	d12a      	bne.n	80071fe <__swbuf_r+0x6e>
 80071a8:	686c      	ldr	r4, [r5, #4]
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	60a3      	str	r3, [r4, #8]
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	071a      	lsls	r2, r3, #28
 80071b2:	d52e      	bpl.n	8007212 <__swbuf_r+0x82>
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	b363      	cbz	r3, 8007212 <__swbuf_r+0x82>
 80071b8:	6923      	ldr	r3, [r4, #16]
 80071ba:	6820      	ldr	r0, [r4, #0]
 80071bc:	1ac0      	subs	r0, r0, r3
 80071be:	6963      	ldr	r3, [r4, #20]
 80071c0:	b2f6      	uxtb	r6, r6
 80071c2:	4283      	cmp	r3, r0
 80071c4:	4637      	mov	r7, r6
 80071c6:	dc04      	bgt.n	80071d2 <__swbuf_r+0x42>
 80071c8:	4621      	mov	r1, r4
 80071ca:	4628      	mov	r0, r5
 80071cc:	f000 f926 	bl	800741c <_fflush_r>
 80071d0:	bb28      	cbnz	r0, 800721e <__swbuf_r+0x8e>
 80071d2:	68a3      	ldr	r3, [r4, #8]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	60a3      	str	r3, [r4, #8]
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	6022      	str	r2, [r4, #0]
 80071de:	701e      	strb	r6, [r3, #0]
 80071e0:	6963      	ldr	r3, [r4, #20]
 80071e2:	3001      	adds	r0, #1
 80071e4:	4283      	cmp	r3, r0
 80071e6:	d004      	beq.n	80071f2 <__swbuf_r+0x62>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	07db      	lsls	r3, r3, #31
 80071ec:	d519      	bpl.n	8007222 <__swbuf_r+0x92>
 80071ee:	2e0a      	cmp	r6, #10
 80071f0:	d117      	bne.n	8007222 <__swbuf_r+0x92>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 f911 	bl	800741c <_fflush_r>
 80071fa:	b190      	cbz	r0, 8007222 <__swbuf_r+0x92>
 80071fc:	e00f      	b.n	800721e <__swbuf_r+0x8e>
 80071fe:	4b0b      	ldr	r3, [pc, #44]	; (800722c <__swbuf_r+0x9c>)
 8007200:	429c      	cmp	r4, r3
 8007202:	d101      	bne.n	8007208 <__swbuf_r+0x78>
 8007204:	68ac      	ldr	r4, [r5, #8]
 8007206:	e7d0      	b.n	80071aa <__swbuf_r+0x1a>
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <__swbuf_r+0xa0>)
 800720a:	429c      	cmp	r4, r3
 800720c:	bf08      	it	eq
 800720e:	68ec      	ldreq	r4, [r5, #12]
 8007210:	e7cb      	b.n	80071aa <__swbuf_r+0x1a>
 8007212:	4621      	mov	r1, r4
 8007214:	4628      	mov	r0, r5
 8007216:	f000 f80d 	bl	8007234 <__swsetup_r>
 800721a:	2800      	cmp	r0, #0
 800721c:	d0cc      	beq.n	80071b8 <__swbuf_r+0x28>
 800721e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007222:	4638      	mov	r0, r7
 8007224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007226:	bf00      	nop
 8007228:	08008220 	.word	0x08008220
 800722c:	08008240 	.word	0x08008240
 8007230:	08008200 	.word	0x08008200

08007234 <__swsetup_r>:
 8007234:	4b32      	ldr	r3, [pc, #200]	; (8007300 <__swsetup_r+0xcc>)
 8007236:	b570      	push	{r4, r5, r6, lr}
 8007238:	681d      	ldr	r5, [r3, #0]
 800723a:	4606      	mov	r6, r0
 800723c:	460c      	mov	r4, r1
 800723e:	b125      	cbz	r5, 800724a <__swsetup_r+0x16>
 8007240:	69ab      	ldr	r3, [r5, #24]
 8007242:	b913      	cbnz	r3, 800724a <__swsetup_r+0x16>
 8007244:	4628      	mov	r0, r5
 8007246:	f000 f953 	bl	80074f0 <__sinit>
 800724a:	4b2e      	ldr	r3, [pc, #184]	; (8007304 <__swsetup_r+0xd0>)
 800724c:	429c      	cmp	r4, r3
 800724e:	d10f      	bne.n	8007270 <__swsetup_r+0x3c>
 8007250:	686c      	ldr	r4, [r5, #4]
 8007252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007256:	b29a      	uxth	r2, r3
 8007258:	0715      	lsls	r5, r2, #28
 800725a:	d42c      	bmi.n	80072b6 <__swsetup_r+0x82>
 800725c:	06d0      	lsls	r0, r2, #27
 800725e:	d411      	bmi.n	8007284 <__swsetup_r+0x50>
 8007260:	2209      	movs	r2, #9
 8007262:	6032      	str	r2, [r6, #0]
 8007264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800726e:	e03e      	b.n	80072ee <__swsetup_r+0xba>
 8007270:	4b25      	ldr	r3, [pc, #148]	; (8007308 <__swsetup_r+0xd4>)
 8007272:	429c      	cmp	r4, r3
 8007274:	d101      	bne.n	800727a <__swsetup_r+0x46>
 8007276:	68ac      	ldr	r4, [r5, #8]
 8007278:	e7eb      	b.n	8007252 <__swsetup_r+0x1e>
 800727a:	4b24      	ldr	r3, [pc, #144]	; (800730c <__swsetup_r+0xd8>)
 800727c:	429c      	cmp	r4, r3
 800727e:	bf08      	it	eq
 8007280:	68ec      	ldreq	r4, [r5, #12]
 8007282:	e7e6      	b.n	8007252 <__swsetup_r+0x1e>
 8007284:	0751      	lsls	r1, r2, #29
 8007286:	d512      	bpl.n	80072ae <__swsetup_r+0x7a>
 8007288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800728a:	b141      	cbz	r1, 800729e <__swsetup_r+0x6a>
 800728c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007290:	4299      	cmp	r1, r3
 8007292:	d002      	beq.n	800729a <__swsetup_r+0x66>
 8007294:	4630      	mov	r0, r6
 8007296:	f000 fa19 	bl	80076cc <_free_r>
 800729a:	2300      	movs	r3, #0
 800729c:	6363      	str	r3, [r4, #52]	; 0x34
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072a4:	81a3      	strh	r3, [r4, #12]
 80072a6:	2300      	movs	r3, #0
 80072a8:	6063      	str	r3, [r4, #4]
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	f043 0308 	orr.w	r3, r3, #8
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	b94b      	cbnz	r3, 80072ce <__swsetup_r+0x9a>
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c4:	d003      	beq.n	80072ce <__swsetup_r+0x9a>
 80072c6:	4621      	mov	r1, r4
 80072c8:	4630      	mov	r0, r6
 80072ca:	f000 f9bf 	bl	800764c <__smakebuf_r>
 80072ce:	89a2      	ldrh	r2, [r4, #12]
 80072d0:	f012 0301 	ands.w	r3, r2, #1
 80072d4:	d00c      	beq.n	80072f0 <__swsetup_r+0xbc>
 80072d6:	2300      	movs	r3, #0
 80072d8:	60a3      	str	r3, [r4, #8]
 80072da:	6963      	ldr	r3, [r4, #20]
 80072dc:	425b      	negs	r3, r3
 80072de:	61a3      	str	r3, [r4, #24]
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	b953      	cbnz	r3, 80072fa <__swsetup_r+0xc6>
 80072e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80072ec:	d1ba      	bne.n	8007264 <__swsetup_r+0x30>
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	0792      	lsls	r2, r2, #30
 80072f2:	bf58      	it	pl
 80072f4:	6963      	ldrpl	r3, [r4, #20]
 80072f6:	60a3      	str	r3, [r4, #8]
 80072f8:	e7f2      	b.n	80072e0 <__swsetup_r+0xac>
 80072fa:	2000      	movs	r0, #0
 80072fc:	e7f7      	b.n	80072ee <__swsetup_r+0xba>
 80072fe:	bf00      	nop
 8007300:	20000010 	.word	0x20000010
 8007304:	08008220 	.word	0x08008220
 8007308:	08008240 	.word	0x08008240
 800730c:	08008200 	.word	0x08008200

08007310 <__sflush_r>:
 8007310:	898a      	ldrh	r2, [r1, #12]
 8007312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007316:	4605      	mov	r5, r0
 8007318:	0710      	lsls	r0, r2, #28
 800731a:	460c      	mov	r4, r1
 800731c:	d458      	bmi.n	80073d0 <__sflush_r+0xc0>
 800731e:	684b      	ldr	r3, [r1, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	dc05      	bgt.n	8007330 <__sflush_r+0x20>
 8007324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007326:	2b00      	cmp	r3, #0
 8007328:	dc02      	bgt.n	8007330 <__sflush_r+0x20>
 800732a:	2000      	movs	r0, #0
 800732c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007332:	2e00      	cmp	r6, #0
 8007334:	d0f9      	beq.n	800732a <__sflush_r+0x1a>
 8007336:	2300      	movs	r3, #0
 8007338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800733c:	682f      	ldr	r7, [r5, #0]
 800733e:	6a21      	ldr	r1, [r4, #32]
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	d032      	beq.n	80073aa <__sflush_r+0x9a>
 8007344:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	075a      	lsls	r2, r3, #29
 800734a:	d505      	bpl.n	8007358 <__sflush_r+0x48>
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	1ac0      	subs	r0, r0, r3
 8007350:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007352:	b10b      	cbz	r3, 8007358 <__sflush_r+0x48>
 8007354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007356:	1ac0      	subs	r0, r0, r3
 8007358:	2300      	movs	r3, #0
 800735a:	4602      	mov	r2, r0
 800735c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800735e:	6a21      	ldr	r1, [r4, #32]
 8007360:	4628      	mov	r0, r5
 8007362:	47b0      	blx	r6
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	d106      	bne.n	8007378 <__sflush_r+0x68>
 800736a:	6829      	ldr	r1, [r5, #0]
 800736c:	291d      	cmp	r1, #29
 800736e:	d848      	bhi.n	8007402 <__sflush_r+0xf2>
 8007370:	4a29      	ldr	r2, [pc, #164]	; (8007418 <__sflush_r+0x108>)
 8007372:	40ca      	lsrs	r2, r1
 8007374:	07d6      	lsls	r6, r2, #31
 8007376:	d544      	bpl.n	8007402 <__sflush_r+0xf2>
 8007378:	2200      	movs	r2, #0
 800737a:	6062      	str	r2, [r4, #4]
 800737c:	04d9      	lsls	r1, r3, #19
 800737e:	6922      	ldr	r2, [r4, #16]
 8007380:	6022      	str	r2, [r4, #0]
 8007382:	d504      	bpl.n	800738e <__sflush_r+0x7e>
 8007384:	1c42      	adds	r2, r0, #1
 8007386:	d101      	bne.n	800738c <__sflush_r+0x7c>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b903      	cbnz	r3, 800738e <__sflush_r+0x7e>
 800738c:	6560      	str	r0, [r4, #84]	; 0x54
 800738e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007390:	602f      	str	r7, [r5, #0]
 8007392:	2900      	cmp	r1, #0
 8007394:	d0c9      	beq.n	800732a <__sflush_r+0x1a>
 8007396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800739a:	4299      	cmp	r1, r3
 800739c:	d002      	beq.n	80073a4 <__sflush_r+0x94>
 800739e:	4628      	mov	r0, r5
 80073a0:	f000 f994 	bl	80076cc <_free_r>
 80073a4:	2000      	movs	r0, #0
 80073a6:	6360      	str	r0, [r4, #52]	; 0x34
 80073a8:	e7c0      	b.n	800732c <__sflush_r+0x1c>
 80073aa:	2301      	movs	r3, #1
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b0      	blx	r6
 80073b0:	1c41      	adds	r1, r0, #1
 80073b2:	d1c8      	bne.n	8007346 <__sflush_r+0x36>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0c5      	beq.n	8007346 <__sflush_r+0x36>
 80073ba:	2b1d      	cmp	r3, #29
 80073bc:	d001      	beq.n	80073c2 <__sflush_r+0xb2>
 80073be:	2b16      	cmp	r3, #22
 80073c0:	d101      	bne.n	80073c6 <__sflush_r+0xb6>
 80073c2:	602f      	str	r7, [r5, #0]
 80073c4:	e7b1      	b.n	800732a <__sflush_r+0x1a>
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073cc:	81a3      	strh	r3, [r4, #12]
 80073ce:	e7ad      	b.n	800732c <__sflush_r+0x1c>
 80073d0:	690f      	ldr	r7, [r1, #16]
 80073d2:	2f00      	cmp	r7, #0
 80073d4:	d0a9      	beq.n	800732a <__sflush_r+0x1a>
 80073d6:	0793      	lsls	r3, r2, #30
 80073d8:	680e      	ldr	r6, [r1, #0]
 80073da:	bf08      	it	eq
 80073dc:	694b      	ldreq	r3, [r1, #20]
 80073de:	600f      	str	r7, [r1, #0]
 80073e0:	bf18      	it	ne
 80073e2:	2300      	movne	r3, #0
 80073e4:	eba6 0807 	sub.w	r8, r6, r7
 80073e8:	608b      	str	r3, [r1, #8]
 80073ea:	f1b8 0f00 	cmp.w	r8, #0
 80073ee:	dd9c      	ble.n	800732a <__sflush_r+0x1a>
 80073f0:	4643      	mov	r3, r8
 80073f2:	463a      	mov	r2, r7
 80073f4:	6a21      	ldr	r1, [r4, #32]
 80073f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b0      	blx	r6
 80073fc:	2800      	cmp	r0, #0
 80073fe:	dc06      	bgt.n	800740e <__sflush_r+0xfe>
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007406:	81a3      	strh	r3, [r4, #12]
 8007408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800740c:	e78e      	b.n	800732c <__sflush_r+0x1c>
 800740e:	4407      	add	r7, r0
 8007410:	eba8 0800 	sub.w	r8, r8, r0
 8007414:	e7e9      	b.n	80073ea <__sflush_r+0xda>
 8007416:	bf00      	nop
 8007418:	20400001 	.word	0x20400001

0800741c <_fflush_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	690b      	ldr	r3, [r1, #16]
 8007420:	4605      	mov	r5, r0
 8007422:	460c      	mov	r4, r1
 8007424:	b1db      	cbz	r3, 800745e <_fflush_r+0x42>
 8007426:	b118      	cbz	r0, 8007430 <_fflush_r+0x14>
 8007428:	6983      	ldr	r3, [r0, #24]
 800742a:	b90b      	cbnz	r3, 8007430 <_fflush_r+0x14>
 800742c:	f000 f860 	bl	80074f0 <__sinit>
 8007430:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <_fflush_r+0x48>)
 8007432:	429c      	cmp	r4, r3
 8007434:	d109      	bne.n	800744a <_fflush_r+0x2e>
 8007436:	686c      	ldr	r4, [r5, #4]
 8007438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800743c:	b17b      	cbz	r3, 800745e <_fflush_r+0x42>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007446:	f7ff bf63 	b.w	8007310 <__sflush_r>
 800744a:	4b07      	ldr	r3, [pc, #28]	; (8007468 <_fflush_r+0x4c>)
 800744c:	429c      	cmp	r4, r3
 800744e:	d101      	bne.n	8007454 <_fflush_r+0x38>
 8007450:	68ac      	ldr	r4, [r5, #8]
 8007452:	e7f1      	b.n	8007438 <_fflush_r+0x1c>
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <_fflush_r+0x50>)
 8007456:	429c      	cmp	r4, r3
 8007458:	bf08      	it	eq
 800745a:	68ec      	ldreq	r4, [r5, #12]
 800745c:	e7ec      	b.n	8007438 <_fflush_r+0x1c>
 800745e:	2000      	movs	r0, #0
 8007460:	bd38      	pop	{r3, r4, r5, pc}
 8007462:	bf00      	nop
 8007464:	08008220 	.word	0x08008220
 8007468:	08008240 	.word	0x08008240
 800746c:	08008200 	.word	0x08008200

08007470 <std>:
 8007470:	2300      	movs	r3, #0
 8007472:	b510      	push	{r4, lr}
 8007474:	4604      	mov	r4, r0
 8007476:	e9c0 3300 	strd	r3, r3, [r0]
 800747a:	6083      	str	r3, [r0, #8]
 800747c:	8181      	strh	r1, [r0, #12]
 800747e:	6643      	str	r3, [r0, #100]	; 0x64
 8007480:	81c2      	strh	r2, [r0, #14]
 8007482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007486:	6183      	str	r3, [r0, #24]
 8007488:	4619      	mov	r1, r3
 800748a:	2208      	movs	r2, #8
 800748c:	305c      	adds	r0, #92	; 0x5c
 800748e:	f7ff fdfa 	bl	8007086 <memset>
 8007492:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <std+0x38>)
 8007494:	6263      	str	r3, [r4, #36]	; 0x24
 8007496:	4b05      	ldr	r3, [pc, #20]	; (80074ac <std+0x3c>)
 8007498:	62a3      	str	r3, [r4, #40]	; 0x28
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <std+0x40>)
 800749c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800749e:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <std+0x44>)
 80074a0:	6224      	str	r4, [r4, #32]
 80074a2:	6323      	str	r3, [r4, #48]	; 0x30
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	bf00      	nop
 80074a8:	08007dcd 	.word	0x08007dcd
 80074ac:	08007def 	.word	0x08007def
 80074b0:	08007e27 	.word	0x08007e27
 80074b4:	08007e4b 	.word	0x08007e4b

080074b8 <_cleanup_r>:
 80074b8:	4901      	ldr	r1, [pc, #4]	; (80074c0 <_cleanup_r+0x8>)
 80074ba:	f000 b885 	b.w	80075c8 <_fwalk_reent>
 80074be:	bf00      	nop
 80074c0:	0800741d 	.word	0x0800741d

080074c4 <__sfmoreglue>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	1e4a      	subs	r2, r1, #1
 80074c8:	2568      	movs	r5, #104	; 0x68
 80074ca:	4355      	muls	r5, r2
 80074cc:	460e      	mov	r6, r1
 80074ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074d2:	f000 f949 	bl	8007768 <_malloc_r>
 80074d6:	4604      	mov	r4, r0
 80074d8:	b140      	cbz	r0, 80074ec <__sfmoreglue+0x28>
 80074da:	2100      	movs	r1, #0
 80074dc:	e9c0 1600 	strd	r1, r6, [r0]
 80074e0:	300c      	adds	r0, #12
 80074e2:	60a0      	str	r0, [r4, #8]
 80074e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074e8:	f7ff fdcd 	bl	8007086 <memset>
 80074ec:	4620      	mov	r0, r4
 80074ee:	bd70      	pop	{r4, r5, r6, pc}

080074f0 <__sinit>:
 80074f0:	6983      	ldr	r3, [r0, #24]
 80074f2:	b510      	push	{r4, lr}
 80074f4:	4604      	mov	r4, r0
 80074f6:	bb33      	cbnz	r3, 8007546 <__sinit+0x56>
 80074f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80074fc:	6503      	str	r3, [r0, #80]	; 0x50
 80074fe:	4b12      	ldr	r3, [pc, #72]	; (8007548 <__sinit+0x58>)
 8007500:	4a12      	ldr	r2, [pc, #72]	; (800754c <__sinit+0x5c>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6282      	str	r2, [r0, #40]	; 0x28
 8007506:	4298      	cmp	r0, r3
 8007508:	bf04      	itt	eq
 800750a:	2301      	moveq	r3, #1
 800750c:	6183      	streq	r3, [r0, #24]
 800750e:	f000 f81f 	bl	8007550 <__sfp>
 8007512:	6060      	str	r0, [r4, #4]
 8007514:	4620      	mov	r0, r4
 8007516:	f000 f81b 	bl	8007550 <__sfp>
 800751a:	60a0      	str	r0, [r4, #8]
 800751c:	4620      	mov	r0, r4
 800751e:	f000 f817 	bl	8007550 <__sfp>
 8007522:	2200      	movs	r2, #0
 8007524:	60e0      	str	r0, [r4, #12]
 8007526:	2104      	movs	r1, #4
 8007528:	6860      	ldr	r0, [r4, #4]
 800752a:	f7ff ffa1 	bl	8007470 <std>
 800752e:	2201      	movs	r2, #1
 8007530:	2109      	movs	r1, #9
 8007532:	68a0      	ldr	r0, [r4, #8]
 8007534:	f7ff ff9c 	bl	8007470 <std>
 8007538:	2202      	movs	r2, #2
 800753a:	2112      	movs	r1, #18
 800753c:	68e0      	ldr	r0, [r4, #12]
 800753e:	f7ff ff97 	bl	8007470 <std>
 8007542:	2301      	movs	r3, #1
 8007544:	61a3      	str	r3, [r4, #24]
 8007546:	bd10      	pop	{r4, pc}
 8007548:	080081fc 	.word	0x080081fc
 800754c:	080074b9 	.word	0x080074b9

08007550 <__sfp>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <__sfp+0x70>)
 8007554:	681e      	ldr	r6, [r3, #0]
 8007556:	69b3      	ldr	r3, [r6, #24]
 8007558:	4607      	mov	r7, r0
 800755a:	b913      	cbnz	r3, 8007562 <__sfp+0x12>
 800755c:	4630      	mov	r0, r6
 800755e:	f7ff ffc7 	bl	80074f0 <__sinit>
 8007562:	3648      	adds	r6, #72	; 0x48
 8007564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007568:	3b01      	subs	r3, #1
 800756a:	d503      	bpl.n	8007574 <__sfp+0x24>
 800756c:	6833      	ldr	r3, [r6, #0]
 800756e:	b133      	cbz	r3, 800757e <__sfp+0x2e>
 8007570:	6836      	ldr	r6, [r6, #0]
 8007572:	e7f7      	b.n	8007564 <__sfp+0x14>
 8007574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007578:	b16d      	cbz	r5, 8007596 <__sfp+0x46>
 800757a:	3468      	adds	r4, #104	; 0x68
 800757c:	e7f4      	b.n	8007568 <__sfp+0x18>
 800757e:	2104      	movs	r1, #4
 8007580:	4638      	mov	r0, r7
 8007582:	f7ff ff9f 	bl	80074c4 <__sfmoreglue>
 8007586:	6030      	str	r0, [r6, #0]
 8007588:	2800      	cmp	r0, #0
 800758a:	d1f1      	bne.n	8007570 <__sfp+0x20>
 800758c:	230c      	movs	r3, #12
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	4604      	mov	r4, r0
 8007592:	4620      	mov	r0, r4
 8007594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007596:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <__sfp+0x74>)
 8007598:	6665      	str	r5, [r4, #100]	; 0x64
 800759a:	e9c4 5500 	strd	r5, r5, [r4]
 800759e:	60a5      	str	r5, [r4, #8]
 80075a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80075a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80075a8:	2208      	movs	r2, #8
 80075aa:	4629      	mov	r1, r5
 80075ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075b0:	f7ff fd69 	bl	8007086 <memset>
 80075b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075bc:	e7e9      	b.n	8007592 <__sfp+0x42>
 80075be:	bf00      	nop
 80075c0:	080081fc 	.word	0x080081fc
 80075c4:	ffff0001 	.word	0xffff0001

080075c8 <_fwalk_reent>:
 80075c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075cc:	4680      	mov	r8, r0
 80075ce:	4689      	mov	r9, r1
 80075d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075d4:	2600      	movs	r6, #0
 80075d6:	b914      	cbnz	r4, 80075de <_fwalk_reent+0x16>
 80075d8:	4630      	mov	r0, r6
 80075da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80075e2:	3f01      	subs	r7, #1
 80075e4:	d501      	bpl.n	80075ea <_fwalk_reent+0x22>
 80075e6:	6824      	ldr	r4, [r4, #0]
 80075e8:	e7f5      	b.n	80075d6 <_fwalk_reent+0xe>
 80075ea:	89ab      	ldrh	r3, [r5, #12]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d907      	bls.n	8007600 <_fwalk_reent+0x38>
 80075f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075f4:	3301      	adds	r3, #1
 80075f6:	d003      	beq.n	8007600 <_fwalk_reent+0x38>
 80075f8:	4629      	mov	r1, r5
 80075fa:	4640      	mov	r0, r8
 80075fc:	47c8      	blx	r9
 80075fe:	4306      	orrs	r6, r0
 8007600:	3568      	adds	r5, #104	; 0x68
 8007602:	e7ee      	b.n	80075e2 <_fwalk_reent+0x1a>

08007604 <__swhatbuf_r>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	460e      	mov	r6, r1
 8007608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760c:	2900      	cmp	r1, #0
 800760e:	b096      	sub	sp, #88	; 0x58
 8007610:	4614      	mov	r4, r2
 8007612:	461d      	mov	r5, r3
 8007614:	da07      	bge.n	8007626 <__swhatbuf_r+0x22>
 8007616:	2300      	movs	r3, #0
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	89b3      	ldrh	r3, [r6, #12]
 800761c:	061a      	lsls	r2, r3, #24
 800761e:	d410      	bmi.n	8007642 <__swhatbuf_r+0x3e>
 8007620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007624:	e00e      	b.n	8007644 <__swhatbuf_r+0x40>
 8007626:	466a      	mov	r2, sp
 8007628:	f000 fc36 	bl	8007e98 <_fstat_r>
 800762c:	2800      	cmp	r0, #0
 800762e:	dbf2      	blt.n	8007616 <__swhatbuf_r+0x12>
 8007630:	9a01      	ldr	r2, [sp, #4]
 8007632:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007636:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800763a:	425a      	negs	r2, r3
 800763c:	415a      	adcs	r2, r3
 800763e:	602a      	str	r2, [r5, #0]
 8007640:	e7ee      	b.n	8007620 <__swhatbuf_r+0x1c>
 8007642:	2340      	movs	r3, #64	; 0x40
 8007644:	2000      	movs	r0, #0
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	b016      	add	sp, #88	; 0x58
 800764a:	bd70      	pop	{r4, r5, r6, pc}

0800764c <__smakebuf_r>:
 800764c:	898b      	ldrh	r3, [r1, #12]
 800764e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007650:	079d      	lsls	r5, r3, #30
 8007652:	4606      	mov	r6, r0
 8007654:	460c      	mov	r4, r1
 8007656:	d507      	bpl.n	8007668 <__smakebuf_r+0x1c>
 8007658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	6123      	str	r3, [r4, #16]
 8007660:	2301      	movs	r3, #1
 8007662:	6163      	str	r3, [r4, #20]
 8007664:	b002      	add	sp, #8
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	ab01      	add	r3, sp, #4
 800766a:	466a      	mov	r2, sp
 800766c:	f7ff ffca 	bl	8007604 <__swhatbuf_r>
 8007670:	9900      	ldr	r1, [sp, #0]
 8007672:	4605      	mov	r5, r0
 8007674:	4630      	mov	r0, r6
 8007676:	f000 f877 	bl	8007768 <_malloc_r>
 800767a:	b948      	cbnz	r0, 8007690 <__smakebuf_r+0x44>
 800767c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007680:	059a      	lsls	r2, r3, #22
 8007682:	d4ef      	bmi.n	8007664 <__smakebuf_r+0x18>
 8007684:	f023 0303 	bic.w	r3, r3, #3
 8007688:	f043 0302 	orr.w	r3, r3, #2
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	e7e3      	b.n	8007658 <__smakebuf_r+0xc>
 8007690:	4b0d      	ldr	r3, [pc, #52]	; (80076c8 <__smakebuf_r+0x7c>)
 8007692:	62b3      	str	r3, [r6, #40]	; 0x28
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	6020      	str	r0, [r4, #0]
 8007698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769c:	81a3      	strh	r3, [r4, #12]
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	6163      	str	r3, [r4, #20]
 80076a2:	9b01      	ldr	r3, [sp, #4]
 80076a4:	6120      	str	r0, [r4, #16]
 80076a6:	b15b      	cbz	r3, 80076c0 <__smakebuf_r+0x74>
 80076a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ac:	4630      	mov	r0, r6
 80076ae:	f000 fc05 	bl	8007ebc <_isatty_r>
 80076b2:	b128      	cbz	r0, 80076c0 <__smakebuf_r+0x74>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	f043 0301 	orr.w	r3, r3, #1
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	431d      	orrs	r5, r3
 80076c4:	81a5      	strh	r5, [r4, #12]
 80076c6:	e7cd      	b.n	8007664 <__smakebuf_r+0x18>
 80076c8:	080074b9 	.word	0x080074b9

080076cc <_free_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4605      	mov	r5, r0
 80076d0:	2900      	cmp	r1, #0
 80076d2:	d045      	beq.n	8007760 <_free_r+0x94>
 80076d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d8:	1f0c      	subs	r4, r1, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bfb8      	it	lt
 80076de:	18e4      	addlt	r4, r4, r3
 80076e0:	f000 fc0e 	bl	8007f00 <__malloc_lock>
 80076e4:	4a1f      	ldr	r2, [pc, #124]	; (8007764 <_free_r+0x98>)
 80076e6:	6813      	ldr	r3, [r2, #0]
 80076e8:	4610      	mov	r0, r2
 80076ea:	b933      	cbnz	r3, 80076fa <_free_r+0x2e>
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	6014      	str	r4, [r2, #0]
 80076f0:	4628      	mov	r0, r5
 80076f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f6:	f000 bc04 	b.w	8007f02 <__malloc_unlock>
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	d90c      	bls.n	8007718 <_free_r+0x4c>
 80076fe:	6821      	ldr	r1, [r4, #0]
 8007700:	1862      	adds	r2, r4, r1
 8007702:	4293      	cmp	r3, r2
 8007704:	bf04      	itt	eq
 8007706:	681a      	ldreq	r2, [r3, #0]
 8007708:	685b      	ldreq	r3, [r3, #4]
 800770a:	6063      	str	r3, [r4, #4]
 800770c:	bf04      	itt	eq
 800770e:	1852      	addeq	r2, r2, r1
 8007710:	6022      	streq	r2, [r4, #0]
 8007712:	6004      	str	r4, [r0, #0]
 8007714:	e7ec      	b.n	80076f0 <_free_r+0x24>
 8007716:	4613      	mov	r3, r2
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	b10a      	cbz	r2, 8007720 <_free_r+0x54>
 800771c:	42a2      	cmp	r2, r4
 800771e:	d9fa      	bls.n	8007716 <_free_r+0x4a>
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	1858      	adds	r0, r3, r1
 8007724:	42a0      	cmp	r0, r4
 8007726:	d10b      	bne.n	8007740 <_free_r+0x74>
 8007728:	6820      	ldr	r0, [r4, #0]
 800772a:	4401      	add	r1, r0
 800772c:	1858      	adds	r0, r3, r1
 800772e:	4282      	cmp	r2, r0
 8007730:	6019      	str	r1, [r3, #0]
 8007732:	d1dd      	bne.n	80076f0 <_free_r+0x24>
 8007734:	6810      	ldr	r0, [r2, #0]
 8007736:	6852      	ldr	r2, [r2, #4]
 8007738:	605a      	str	r2, [r3, #4]
 800773a:	4401      	add	r1, r0
 800773c:	6019      	str	r1, [r3, #0]
 800773e:	e7d7      	b.n	80076f0 <_free_r+0x24>
 8007740:	d902      	bls.n	8007748 <_free_r+0x7c>
 8007742:	230c      	movs	r3, #12
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	e7d3      	b.n	80076f0 <_free_r+0x24>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	1821      	adds	r1, r4, r0
 800774c:	428a      	cmp	r2, r1
 800774e:	bf04      	itt	eq
 8007750:	6811      	ldreq	r1, [r2, #0]
 8007752:	6852      	ldreq	r2, [r2, #4]
 8007754:	6062      	str	r2, [r4, #4]
 8007756:	bf04      	itt	eq
 8007758:	1809      	addeq	r1, r1, r0
 800775a:	6021      	streq	r1, [r4, #0]
 800775c:	605c      	str	r4, [r3, #4]
 800775e:	e7c7      	b.n	80076f0 <_free_r+0x24>
 8007760:	bd38      	pop	{r3, r4, r5, pc}
 8007762:	bf00      	nop
 8007764:	20002cdc 	.word	0x20002cdc

08007768 <_malloc_r>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	1ccd      	adds	r5, r1, #3
 800776c:	f025 0503 	bic.w	r5, r5, #3
 8007770:	3508      	adds	r5, #8
 8007772:	2d0c      	cmp	r5, #12
 8007774:	bf38      	it	cc
 8007776:	250c      	movcc	r5, #12
 8007778:	2d00      	cmp	r5, #0
 800777a:	4606      	mov	r6, r0
 800777c:	db01      	blt.n	8007782 <_malloc_r+0x1a>
 800777e:	42a9      	cmp	r1, r5
 8007780:	d903      	bls.n	800778a <_malloc_r+0x22>
 8007782:	230c      	movs	r3, #12
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	2000      	movs	r0, #0
 8007788:	bd70      	pop	{r4, r5, r6, pc}
 800778a:	f000 fbb9 	bl	8007f00 <__malloc_lock>
 800778e:	4a21      	ldr	r2, [pc, #132]	; (8007814 <_malloc_r+0xac>)
 8007790:	6814      	ldr	r4, [r2, #0]
 8007792:	4621      	mov	r1, r4
 8007794:	b991      	cbnz	r1, 80077bc <_malloc_r+0x54>
 8007796:	4c20      	ldr	r4, [pc, #128]	; (8007818 <_malloc_r+0xb0>)
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	b91b      	cbnz	r3, 80077a4 <_malloc_r+0x3c>
 800779c:	4630      	mov	r0, r6
 800779e:	f000 fb05 	bl	8007dac <_sbrk_r>
 80077a2:	6020      	str	r0, [r4, #0]
 80077a4:	4629      	mov	r1, r5
 80077a6:	4630      	mov	r0, r6
 80077a8:	f000 fb00 	bl	8007dac <_sbrk_r>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d124      	bne.n	80077fa <_malloc_r+0x92>
 80077b0:	230c      	movs	r3, #12
 80077b2:	6033      	str	r3, [r6, #0]
 80077b4:	4630      	mov	r0, r6
 80077b6:	f000 fba4 	bl	8007f02 <__malloc_unlock>
 80077ba:	e7e4      	b.n	8007786 <_malloc_r+0x1e>
 80077bc:	680b      	ldr	r3, [r1, #0]
 80077be:	1b5b      	subs	r3, r3, r5
 80077c0:	d418      	bmi.n	80077f4 <_malloc_r+0x8c>
 80077c2:	2b0b      	cmp	r3, #11
 80077c4:	d90f      	bls.n	80077e6 <_malloc_r+0x7e>
 80077c6:	600b      	str	r3, [r1, #0]
 80077c8:	50cd      	str	r5, [r1, r3]
 80077ca:	18cc      	adds	r4, r1, r3
 80077cc:	4630      	mov	r0, r6
 80077ce:	f000 fb98 	bl	8007f02 <__malloc_unlock>
 80077d2:	f104 000b 	add.w	r0, r4, #11
 80077d6:	1d23      	adds	r3, r4, #4
 80077d8:	f020 0007 	bic.w	r0, r0, #7
 80077dc:	1ac3      	subs	r3, r0, r3
 80077de:	d0d3      	beq.n	8007788 <_malloc_r+0x20>
 80077e0:	425a      	negs	r2, r3
 80077e2:	50e2      	str	r2, [r4, r3]
 80077e4:	e7d0      	b.n	8007788 <_malloc_r+0x20>
 80077e6:	428c      	cmp	r4, r1
 80077e8:	684b      	ldr	r3, [r1, #4]
 80077ea:	bf16      	itet	ne
 80077ec:	6063      	strne	r3, [r4, #4]
 80077ee:	6013      	streq	r3, [r2, #0]
 80077f0:	460c      	movne	r4, r1
 80077f2:	e7eb      	b.n	80077cc <_malloc_r+0x64>
 80077f4:	460c      	mov	r4, r1
 80077f6:	6849      	ldr	r1, [r1, #4]
 80077f8:	e7cc      	b.n	8007794 <_malloc_r+0x2c>
 80077fa:	1cc4      	adds	r4, r0, #3
 80077fc:	f024 0403 	bic.w	r4, r4, #3
 8007800:	42a0      	cmp	r0, r4
 8007802:	d005      	beq.n	8007810 <_malloc_r+0xa8>
 8007804:	1a21      	subs	r1, r4, r0
 8007806:	4630      	mov	r0, r6
 8007808:	f000 fad0 	bl	8007dac <_sbrk_r>
 800780c:	3001      	adds	r0, #1
 800780e:	d0cf      	beq.n	80077b0 <_malloc_r+0x48>
 8007810:	6025      	str	r5, [r4, #0]
 8007812:	e7db      	b.n	80077cc <_malloc_r+0x64>
 8007814:	20002cdc 	.word	0x20002cdc
 8007818:	20002ce0 	.word	0x20002ce0

0800781c <__sfputc_r>:
 800781c:	6893      	ldr	r3, [r2, #8]
 800781e:	3b01      	subs	r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	b410      	push	{r4}
 8007824:	6093      	str	r3, [r2, #8]
 8007826:	da08      	bge.n	800783a <__sfputc_r+0x1e>
 8007828:	6994      	ldr	r4, [r2, #24]
 800782a:	42a3      	cmp	r3, r4
 800782c:	db01      	blt.n	8007832 <__sfputc_r+0x16>
 800782e:	290a      	cmp	r1, #10
 8007830:	d103      	bne.n	800783a <__sfputc_r+0x1e>
 8007832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007836:	f7ff bcab 	b.w	8007190 <__swbuf_r>
 800783a:	6813      	ldr	r3, [r2, #0]
 800783c:	1c58      	adds	r0, r3, #1
 800783e:	6010      	str	r0, [r2, #0]
 8007840:	7019      	strb	r1, [r3, #0]
 8007842:	4608      	mov	r0, r1
 8007844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007848:	4770      	bx	lr

0800784a <__sfputs_r>:
 800784a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784c:	4606      	mov	r6, r0
 800784e:	460f      	mov	r7, r1
 8007850:	4614      	mov	r4, r2
 8007852:	18d5      	adds	r5, r2, r3
 8007854:	42ac      	cmp	r4, r5
 8007856:	d101      	bne.n	800785c <__sfputs_r+0x12>
 8007858:	2000      	movs	r0, #0
 800785a:	e007      	b.n	800786c <__sfputs_r+0x22>
 800785c:	463a      	mov	r2, r7
 800785e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007862:	4630      	mov	r0, r6
 8007864:	f7ff ffda 	bl	800781c <__sfputc_r>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d1f3      	bne.n	8007854 <__sfputs_r+0xa>
 800786c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007870 <_vfiprintf_r>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	460c      	mov	r4, r1
 8007876:	b09d      	sub	sp, #116	; 0x74
 8007878:	4617      	mov	r7, r2
 800787a:	461d      	mov	r5, r3
 800787c:	4606      	mov	r6, r0
 800787e:	b118      	cbz	r0, 8007888 <_vfiprintf_r+0x18>
 8007880:	6983      	ldr	r3, [r0, #24]
 8007882:	b90b      	cbnz	r3, 8007888 <_vfiprintf_r+0x18>
 8007884:	f7ff fe34 	bl	80074f0 <__sinit>
 8007888:	4b7c      	ldr	r3, [pc, #496]	; (8007a7c <_vfiprintf_r+0x20c>)
 800788a:	429c      	cmp	r4, r3
 800788c:	d158      	bne.n	8007940 <_vfiprintf_r+0xd0>
 800788e:	6874      	ldr	r4, [r6, #4]
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	0718      	lsls	r0, r3, #28
 8007894:	d55e      	bpl.n	8007954 <_vfiprintf_r+0xe4>
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d05b      	beq.n	8007954 <_vfiprintf_r+0xe4>
 800789c:	2300      	movs	r3, #0
 800789e:	9309      	str	r3, [sp, #36]	; 0x24
 80078a0:	2320      	movs	r3, #32
 80078a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078a6:	2330      	movs	r3, #48	; 0x30
 80078a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078ac:	9503      	str	r5, [sp, #12]
 80078ae:	f04f 0b01 	mov.w	fp, #1
 80078b2:	46b8      	mov	r8, r7
 80078b4:	4645      	mov	r5, r8
 80078b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078ba:	b10b      	cbz	r3, 80078c0 <_vfiprintf_r+0x50>
 80078bc:	2b25      	cmp	r3, #37	; 0x25
 80078be:	d154      	bne.n	800796a <_vfiprintf_r+0xfa>
 80078c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80078c4:	d00b      	beq.n	80078de <_vfiprintf_r+0x6e>
 80078c6:	4653      	mov	r3, sl
 80078c8:	463a      	mov	r2, r7
 80078ca:	4621      	mov	r1, r4
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7ff ffbc 	bl	800784a <__sfputs_r>
 80078d2:	3001      	adds	r0, #1
 80078d4:	f000 80c2 	beq.w	8007a5c <_vfiprintf_r+0x1ec>
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078da:	4453      	add	r3, sl
 80078dc:	9309      	str	r3, [sp, #36]	; 0x24
 80078de:	f898 3000 	ldrb.w	r3, [r8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80ba 	beq.w	8007a5c <_vfiprintf_r+0x1ec>
 80078e8:	2300      	movs	r3, #0
 80078ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	9307      	str	r3, [sp, #28]
 80078f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078fa:	931a      	str	r3, [sp, #104]	; 0x68
 80078fc:	46a8      	mov	r8, r5
 80078fe:	2205      	movs	r2, #5
 8007900:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007904:	485e      	ldr	r0, [pc, #376]	; (8007a80 <_vfiprintf_r+0x210>)
 8007906:	f7f8 fc63 	bl	80001d0 <memchr>
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	bb78      	cbnz	r0, 800796e <_vfiprintf_r+0xfe>
 800790e:	06d9      	lsls	r1, r3, #27
 8007910:	bf44      	itt	mi
 8007912:	2220      	movmi	r2, #32
 8007914:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007918:	071a      	lsls	r2, r3, #28
 800791a:	bf44      	itt	mi
 800791c:	222b      	movmi	r2, #43	; 0x2b
 800791e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007922:	782a      	ldrb	r2, [r5, #0]
 8007924:	2a2a      	cmp	r2, #42	; 0x2a
 8007926:	d02a      	beq.n	800797e <_vfiprintf_r+0x10e>
 8007928:	9a07      	ldr	r2, [sp, #28]
 800792a:	46a8      	mov	r8, r5
 800792c:	2000      	movs	r0, #0
 800792e:	250a      	movs	r5, #10
 8007930:	4641      	mov	r1, r8
 8007932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007936:	3b30      	subs	r3, #48	; 0x30
 8007938:	2b09      	cmp	r3, #9
 800793a:	d969      	bls.n	8007a10 <_vfiprintf_r+0x1a0>
 800793c:	b360      	cbz	r0, 8007998 <_vfiprintf_r+0x128>
 800793e:	e024      	b.n	800798a <_vfiprintf_r+0x11a>
 8007940:	4b50      	ldr	r3, [pc, #320]	; (8007a84 <_vfiprintf_r+0x214>)
 8007942:	429c      	cmp	r4, r3
 8007944:	d101      	bne.n	800794a <_vfiprintf_r+0xda>
 8007946:	68b4      	ldr	r4, [r6, #8]
 8007948:	e7a2      	b.n	8007890 <_vfiprintf_r+0x20>
 800794a:	4b4f      	ldr	r3, [pc, #316]	; (8007a88 <_vfiprintf_r+0x218>)
 800794c:	429c      	cmp	r4, r3
 800794e:	bf08      	it	eq
 8007950:	68f4      	ldreq	r4, [r6, #12]
 8007952:	e79d      	b.n	8007890 <_vfiprintf_r+0x20>
 8007954:	4621      	mov	r1, r4
 8007956:	4630      	mov	r0, r6
 8007958:	f7ff fc6c 	bl	8007234 <__swsetup_r>
 800795c:	2800      	cmp	r0, #0
 800795e:	d09d      	beq.n	800789c <_vfiprintf_r+0x2c>
 8007960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007964:	b01d      	add	sp, #116	; 0x74
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	46a8      	mov	r8, r5
 800796c:	e7a2      	b.n	80078b4 <_vfiprintf_r+0x44>
 800796e:	4a44      	ldr	r2, [pc, #272]	; (8007a80 <_vfiprintf_r+0x210>)
 8007970:	1a80      	subs	r0, r0, r2
 8007972:	fa0b f000 	lsl.w	r0, fp, r0
 8007976:	4318      	orrs	r0, r3
 8007978:	9004      	str	r0, [sp, #16]
 800797a:	4645      	mov	r5, r8
 800797c:	e7be      	b.n	80078fc <_vfiprintf_r+0x8c>
 800797e:	9a03      	ldr	r2, [sp, #12]
 8007980:	1d11      	adds	r1, r2, #4
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	9103      	str	r1, [sp, #12]
 8007986:	2a00      	cmp	r2, #0
 8007988:	db01      	blt.n	800798e <_vfiprintf_r+0x11e>
 800798a:	9207      	str	r2, [sp, #28]
 800798c:	e004      	b.n	8007998 <_vfiprintf_r+0x128>
 800798e:	4252      	negs	r2, r2
 8007990:	f043 0302 	orr.w	r3, r3, #2
 8007994:	9207      	str	r2, [sp, #28]
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	f898 3000 	ldrb.w	r3, [r8]
 800799c:	2b2e      	cmp	r3, #46	; 0x2e
 800799e:	d10e      	bne.n	80079be <_vfiprintf_r+0x14e>
 80079a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079a4:	2b2a      	cmp	r3, #42	; 0x2a
 80079a6:	d138      	bne.n	8007a1a <_vfiprintf_r+0x1aa>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d1a      	adds	r2, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9203      	str	r2, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfb8      	it	lt
 80079b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80079b8:	f108 0802 	add.w	r8, r8, #2
 80079bc:	9305      	str	r3, [sp, #20]
 80079be:	4d33      	ldr	r5, [pc, #204]	; (8007a8c <_vfiprintf_r+0x21c>)
 80079c0:	f898 1000 	ldrb.w	r1, [r8]
 80079c4:	2203      	movs	r2, #3
 80079c6:	4628      	mov	r0, r5
 80079c8:	f7f8 fc02 	bl	80001d0 <memchr>
 80079cc:	b140      	cbz	r0, 80079e0 <_vfiprintf_r+0x170>
 80079ce:	2340      	movs	r3, #64	; 0x40
 80079d0:	1b40      	subs	r0, r0, r5
 80079d2:	fa03 f000 	lsl.w	r0, r3, r0
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	4303      	orrs	r3, r0
 80079da:	f108 0801 	add.w	r8, r8, #1
 80079de:	9304      	str	r3, [sp, #16]
 80079e0:	f898 1000 	ldrb.w	r1, [r8]
 80079e4:	482a      	ldr	r0, [pc, #168]	; (8007a90 <_vfiprintf_r+0x220>)
 80079e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079ea:	2206      	movs	r2, #6
 80079ec:	f108 0701 	add.w	r7, r8, #1
 80079f0:	f7f8 fbee 	bl	80001d0 <memchr>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d037      	beq.n	8007a68 <_vfiprintf_r+0x1f8>
 80079f8:	4b26      	ldr	r3, [pc, #152]	; (8007a94 <_vfiprintf_r+0x224>)
 80079fa:	bb1b      	cbnz	r3, 8007a44 <_vfiprintf_r+0x1d4>
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	3307      	adds	r3, #7
 8007a00:	f023 0307 	bic.w	r3, r3, #7
 8007a04:	3308      	adds	r3, #8
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0a:	444b      	add	r3, r9
 8007a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0e:	e750      	b.n	80078b2 <_vfiprintf_r+0x42>
 8007a10:	fb05 3202 	mla	r2, r5, r2, r3
 8007a14:	2001      	movs	r0, #1
 8007a16:	4688      	mov	r8, r1
 8007a18:	e78a      	b.n	8007930 <_vfiprintf_r+0xc0>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f108 0801 	add.w	r8, r8, #1
 8007a20:	9305      	str	r3, [sp, #20]
 8007a22:	4619      	mov	r1, r3
 8007a24:	250a      	movs	r5, #10
 8007a26:	4640      	mov	r0, r8
 8007a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a2c:	3a30      	subs	r2, #48	; 0x30
 8007a2e:	2a09      	cmp	r2, #9
 8007a30:	d903      	bls.n	8007a3a <_vfiprintf_r+0x1ca>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0c3      	beq.n	80079be <_vfiprintf_r+0x14e>
 8007a36:	9105      	str	r1, [sp, #20]
 8007a38:	e7c1      	b.n	80079be <_vfiprintf_r+0x14e>
 8007a3a:	fb05 2101 	mla	r1, r5, r1, r2
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4680      	mov	r8, r0
 8007a42:	e7f0      	b.n	8007a26 <_vfiprintf_r+0x1b6>
 8007a44:	ab03      	add	r3, sp, #12
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4b13      	ldr	r3, [pc, #76]	; (8007a98 <_vfiprintf_r+0x228>)
 8007a4c:	a904      	add	r1, sp, #16
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f3af 8000 	nop.w
 8007a54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a58:	4681      	mov	r9, r0
 8007a5a:	d1d5      	bne.n	8007a08 <_vfiprintf_r+0x198>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	065b      	lsls	r3, r3, #25
 8007a60:	f53f af7e 	bmi.w	8007960 <_vfiprintf_r+0xf0>
 8007a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a66:	e77d      	b.n	8007964 <_vfiprintf_r+0xf4>
 8007a68:	ab03      	add	r3, sp, #12
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <_vfiprintf_r+0x228>)
 8007a70:	a904      	add	r1, sp, #16
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 f888 	bl	8007b88 <_printf_i>
 8007a78:	e7ec      	b.n	8007a54 <_vfiprintf_r+0x1e4>
 8007a7a:	bf00      	nop
 8007a7c:	08008220 	.word	0x08008220
 8007a80:	08008260 	.word	0x08008260
 8007a84:	08008240 	.word	0x08008240
 8007a88:	08008200 	.word	0x08008200
 8007a8c:	08008266 	.word	0x08008266
 8007a90:	0800826a 	.word	0x0800826a
 8007a94:	00000000 	.word	0x00000000
 8007a98:	0800784b 	.word	0x0800784b

08007a9c <_printf_common>:
 8007a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	4691      	mov	r9, r2
 8007aa2:	461f      	mov	r7, r3
 8007aa4:	688a      	ldr	r2, [r1, #8]
 8007aa6:	690b      	ldr	r3, [r1, #16]
 8007aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bfb8      	it	lt
 8007ab0:	4613      	movlt	r3, r2
 8007ab2:	f8c9 3000 	str.w	r3, [r9]
 8007ab6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aba:	4606      	mov	r6, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	b112      	cbz	r2, 8007ac6 <_printf_common+0x2a>
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	f8c9 3000 	str.w	r3, [r9]
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	0699      	lsls	r1, r3, #26
 8007aca:	bf42      	ittt	mi
 8007acc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ad0:	3302      	addmi	r3, #2
 8007ad2:	f8c9 3000 	strmi.w	r3, [r9]
 8007ad6:	6825      	ldr	r5, [r4, #0]
 8007ad8:	f015 0506 	ands.w	r5, r5, #6
 8007adc:	d107      	bne.n	8007aee <_printf_common+0x52>
 8007ade:	f104 0a19 	add.w	sl, r4, #25
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	42ab      	cmp	r3, r5
 8007aec:	dc28      	bgt.n	8007b40 <_printf_common+0xa4>
 8007aee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007af2:	6822      	ldr	r2, [r4, #0]
 8007af4:	3300      	adds	r3, #0
 8007af6:	bf18      	it	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	0692      	lsls	r2, r2, #26
 8007afc:	d42d      	bmi.n	8007b5a <_printf_common+0xbe>
 8007afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b02:	4639      	mov	r1, r7
 8007b04:	4630      	mov	r0, r6
 8007b06:	47c0      	blx	r8
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d020      	beq.n	8007b4e <_printf_common+0xb2>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	68e5      	ldr	r5, [r4, #12]
 8007b10:	f8d9 2000 	ldr.w	r2, [r9]
 8007b14:	f003 0306 	and.w	r3, r3, #6
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	bf08      	it	eq
 8007b1c:	1aad      	subeq	r5, r5, r2
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	6922      	ldr	r2, [r4, #16]
 8007b22:	bf0c      	ite	eq
 8007b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b28:	2500      	movne	r5, #0
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	bfc4      	itt	gt
 8007b2e:	1a9b      	subgt	r3, r3, r2
 8007b30:	18ed      	addgt	r5, r5, r3
 8007b32:	f04f 0900 	mov.w	r9, #0
 8007b36:	341a      	adds	r4, #26
 8007b38:	454d      	cmp	r5, r9
 8007b3a:	d11a      	bne.n	8007b72 <_printf_common+0xd6>
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e008      	b.n	8007b52 <_printf_common+0xb6>
 8007b40:	2301      	movs	r3, #1
 8007b42:	4652      	mov	r2, sl
 8007b44:	4639      	mov	r1, r7
 8007b46:	4630      	mov	r0, r6
 8007b48:	47c0      	blx	r8
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	d103      	bne.n	8007b56 <_printf_common+0xba>
 8007b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b56:	3501      	adds	r5, #1
 8007b58:	e7c3      	b.n	8007ae2 <_printf_common+0x46>
 8007b5a:	18e1      	adds	r1, r4, r3
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	2030      	movs	r0, #48	; 0x30
 8007b60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b64:	4422      	add	r2, r4
 8007b66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b6e:	3302      	adds	r3, #2
 8007b70:	e7c5      	b.n	8007afe <_printf_common+0x62>
 8007b72:	2301      	movs	r3, #1
 8007b74:	4622      	mov	r2, r4
 8007b76:	4639      	mov	r1, r7
 8007b78:	4630      	mov	r0, r6
 8007b7a:	47c0      	blx	r8
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d0e6      	beq.n	8007b4e <_printf_common+0xb2>
 8007b80:	f109 0901 	add.w	r9, r9, #1
 8007b84:	e7d8      	b.n	8007b38 <_printf_common+0x9c>
	...

08007b88 <_printf_i>:
 8007b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b90:	460c      	mov	r4, r1
 8007b92:	7e09      	ldrb	r1, [r1, #24]
 8007b94:	b085      	sub	sp, #20
 8007b96:	296e      	cmp	r1, #110	; 0x6e
 8007b98:	4617      	mov	r7, r2
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	4698      	mov	r8, r3
 8007b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba0:	f000 80b3 	beq.w	8007d0a <_printf_i+0x182>
 8007ba4:	d822      	bhi.n	8007bec <_printf_i+0x64>
 8007ba6:	2963      	cmp	r1, #99	; 0x63
 8007ba8:	d036      	beq.n	8007c18 <_printf_i+0x90>
 8007baa:	d80a      	bhi.n	8007bc2 <_printf_i+0x3a>
 8007bac:	2900      	cmp	r1, #0
 8007bae:	f000 80b9 	beq.w	8007d24 <_printf_i+0x19c>
 8007bb2:	2958      	cmp	r1, #88	; 0x58
 8007bb4:	f000 8083 	beq.w	8007cbe <_printf_i+0x136>
 8007bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007bc0:	e032      	b.n	8007c28 <_printf_i+0xa0>
 8007bc2:	2964      	cmp	r1, #100	; 0x64
 8007bc4:	d001      	beq.n	8007bca <_printf_i+0x42>
 8007bc6:	2969      	cmp	r1, #105	; 0x69
 8007bc8:	d1f6      	bne.n	8007bb8 <_printf_i+0x30>
 8007bca:	6820      	ldr	r0, [r4, #0]
 8007bcc:	6813      	ldr	r3, [r2, #0]
 8007bce:	0605      	lsls	r5, r0, #24
 8007bd0:	f103 0104 	add.w	r1, r3, #4
 8007bd4:	d52a      	bpl.n	8007c2c <_printf_i+0xa4>
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6011      	str	r1, [r2, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	da03      	bge.n	8007be6 <_printf_i+0x5e>
 8007bde:	222d      	movs	r2, #45	; 0x2d
 8007be0:	425b      	negs	r3, r3
 8007be2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007be6:	486f      	ldr	r0, [pc, #444]	; (8007da4 <_printf_i+0x21c>)
 8007be8:	220a      	movs	r2, #10
 8007bea:	e039      	b.n	8007c60 <_printf_i+0xd8>
 8007bec:	2973      	cmp	r1, #115	; 0x73
 8007bee:	f000 809d 	beq.w	8007d2c <_printf_i+0x1a4>
 8007bf2:	d808      	bhi.n	8007c06 <_printf_i+0x7e>
 8007bf4:	296f      	cmp	r1, #111	; 0x6f
 8007bf6:	d020      	beq.n	8007c3a <_printf_i+0xb2>
 8007bf8:	2970      	cmp	r1, #112	; 0x70
 8007bfa:	d1dd      	bne.n	8007bb8 <_printf_i+0x30>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	f043 0320 	orr.w	r3, r3, #32
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	e003      	b.n	8007c0e <_printf_i+0x86>
 8007c06:	2975      	cmp	r1, #117	; 0x75
 8007c08:	d017      	beq.n	8007c3a <_printf_i+0xb2>
 8007c0a:	2978      	cmp	r1, #120	; 0x78
 8007c0c:	d1d4      	bne.n	8007bb8 <_printf_i+0x30>
 8007c0e:	2378      	movs	r3, #120	; 0x78
 8007c10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c14:	4864      	ldr	r0, [pc, #400]	; (8007da8 <_printf_i+0x220>)
 8007c16:	e055      	b.n	8007cc4 <_printf_i+0x13c>
 8007c18:	6813      	ldr	r3, [r2, #0]
 8007c1a:	1d19      	adds	r1, r3, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6011      	str	r1, [r2, #0]
 8007c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e08c      	b.n	8007d46 <_printf_i+0x1be>
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6011      	str	r1, [r2, #0]
 8007c30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c34:	bf18      	it	ne
 8007c36:	b21b      	sxthne	r3, r3
 8007c38:	e7cf      	b.n	8007bda <_printf_i+0x52>
 8007c3a:	6813      	ldr	r3, [r2, #0]
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	1d18      	adds	r0, r3, #4
 8007c40:	6010      	str	r0, [r2, #0]
 8007c42:	0628      	lsls	r0, r5, #24
 8007c44:	d501      	bpl.n	8007c4a <_printf_i+0xc2>
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	e002      	b.n	8007c50 <_printf_i+0xc8>
 8007c4a:	0668      	lsls	r0, r5, #25
 8007c4c:	d5fb      	bpl.n	8007c46 <_printf_i+0xbe>
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	4854      	ldr	r0, [pc, #336]	; (8007da4 <_printf_i+0x21c>)
 8007c52:	296f      	cmp	r1, #111	; 0x6f
 8007c54:	bf14      	ite	ne
 8007c56:	220a      	movne	r2, #10
 8007c58:	2208      	moveq	r2, #8
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c60:	6865      	ldr	r5, [r4, #4]
 8007c62:	60a5      	str	r5, [r4, #8]
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	f2c0 8095 	blt.w	8007d94 <_printf_i+0x20c>
 8007c6a:	6821      	ldr	r1, [r4, #0]
 8007c6c:	f021 0104 	bic.w	r1, r1, #4
 8007c70:	6021      	str	r1, [r4, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d13d      	bne.n	8007cf2 <_printf_i+0x16a>
 8007c76:	2d00      	cmp	r5, #0
 8007c78:	f040 808e 	bne.w	8007d98 <_printf_i+0x210>
 8007c7c:	4665      	mov	r5, ip
 8007c7e:	2a08      	cmp	r2, #8
 8007c80:	d10b      	bne.n	8007c9a <_printf_i+0x112>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	07db      	lsls	r3, r3, #31
 8007c86:	d508      	bpl.n	8007c9a <_printf_i+0x112>
 8007c88:	6923      	ldr	r3, [r4, #16]
 8007c8a:	6862      	ldr	r2, [r4, #4]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	bfde      	ittt	le
 8007c90:	2330      	movle	r3, #48	; 0x30
 8007c92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c96:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007c9a:	ebac 0305 	sub.w	r3, ip, r5
 8007c9e:	6123      	str	r3, [r4, #16]
 8007ca0:	f8cd 8000 	str.w	r8, [sp]
 8007ca4:	463b      	mov	r3, r7
 8007ca6:	aa03      	add	r2, sp, #12
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7ff fef6 	bl	8007a9c <_printf_common>
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d14d      	bne.n	8007d50 <_printf_i+0x1c8>
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cb8:	b005      	add	sp, #20
 8007cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cbe:	4839      	ldr	r0, [pc, #228]	; (8007da4 <_printf_i+0x21c>)
 8007cc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007cc4:	6813      	ldr	r3, [r2, #0]
 8007cc6:	6821      	ldr	r1, [r4, #0]
 8007cc8:	1d1d      	adds	r5, r3, #4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6015      	str	r5, [r2, #0]
 8007cce:	060a      	lsls	r2, r1, #24
 8007cd0:	d50b      	bpl.n	8007cea <_printf_i+0x162>
 8007cd2:	07ca      	lsls	r2, r1, #31
 8007cd4:	bf44      	itt	mi
 8007cd6:	f041 0120 	orrmi.w	r1, r1, #32
 8007cda:	6021      	strmi	r1, [r4, #0]
 8007cdc:	b91b      	cbnz	r3, 8007ce6 <_printf_i+0x15e>
 8007cde:	6822      	ldr	r2, [r4, #0]
 8007ce0:	f022 0220 	bic.w	r2, r2, #32
 8007ce4:	6022      	str	r2, [r4, #0]
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	e7b7      	b.n	8007c5a <_printf_i+0xd2>
 8007cea:	064d      	lsls	r5, r1, #25
 8007cec:	bf48      	it	mi
 8007cee:	b29b      	uxthmi	r3, r3
 8007cf0:	e7ef      	b.n	8007cd2 <_printf_i+0x14a>
 8007cf2:	4665      	mov	r5, ip
 8007cf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cf8:	fb02 3311 	mls	r3, r2, r1, r3
 8007cfc:	5cc3      	ldrb	r3, [r0, r3]
 8007cfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d02:	460b      	mov	r3, r1
 8007d04:	2900      	cmp	r1, #0
 8007d06:	d1f5      	bne.n	8007cf4 <_printf_i+0x16c>
 8007d08:	e7b9      	b.n	8007c7e <_printf_i+0xf6>
 8007d0a:	6813      	ldr	r3, [r2, #0]
 8007d0c:	6825      	ldr	r5, [r4, #0]
 8007d0e:	6961      	ldr	r1, [r4, #20]
 8007d10:	1d18      	adds	r0, r3, #4
 8007d12:	6010      	str	r0, [r2, #0]
 8007d14:	0628      	lsls	r0, r5, #24
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	d501      	bpl.n	8007d1e <_printf_i+0x196>
 8007d1a:	6019      	str	r1, [r3, #0]
 8007d1c:	e002      	b.n	8007d24 <_printf_i+0x19c>
 8007d1e:	066a      	lsls	r2, r5, #25
 8007d20:	d5fb      	bpl.n	8007d1a <_printf_i+0x192>
 8007d22:	8019      	strh	r1, [r3, #0]
 8007d24:	2300      	movs	r3, #0
 8007d26:	6123      	str	r3, [r4, #16]
 8007d28:	4665      	mov	r5, ip
 8007d2a:	e7b9      	b.n	8007ca0 <_printf_i+0x118>
 8007d2c:	6813      	ldr	r3, [r2, #0]
 8007d2e:	1d19      	adds	r1, r3, #4
 8007d30:	6011      	str	r1, [r2, #0]
 8007d32:	681d      	ldr	r5, [r3, #0]
 8007d34:	6862      	ldr	r2, [r4, #4]
 8007d36:	2100      	movs	r1, #0
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f7f8 fa49 	bl	80001d0 <memchr>
 8007d3e:	b108      	cbz	r0, 8007d44 <_printf_i+0x1bc>
 8007d40:	1b40      	subs	r0, r0, r5
 8007d42:	6060      	str	r0, [r4, #4]
 8007d44:	6863      	ldr	r3, [r4, #4]
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d4e:	e7a7      	b.n	8007ca0 <_printf_i+0x118>
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	462a      	mov	r2, r5
 8007d54:	4639      	mov	r1, r7
 8007d56:	4630      	mov	r0, r6
 8007d58:	47c0      	blx	r8
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	d0aa      	beq.n	8007cb4 <_printf_i+0x12c>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	079b      	lsls	r3, r3, #30
 8007d62:	d413      	bmi.n	8007d8c <_printf_i+0x204>
 8007d64:	68e0      	ldr	r0, [r4, #12]
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	4298      	cmp	r0, r3
 8007d6a:	bfb8      	it	lt
 8007d6c:	4618      	movlt	r0, r3
 8007d6e:	e7a3      	b.n	8007cb8 <_printf_i+0x130>
 8007d70:	2301      	movs	r3, #1
 8007d72:	464a      	mov	r2, r9
 8007d74:	4639      	mov	r1, r7
 8007d76:	4630      	mov	r0, r6
 8007d78:	47c0      	blx	r8
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d09a      	beq.n	8007cb4 <_printf_i+0x12c>
 8007d7e:	3501      	adds	r5, #1
 8007d80:	68e3      	ldr	r3, [r4, #12]
 8007d82:	9a03      	ldr	r2, [sp, #12]
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	42ab      	cmp	r3, r5
 8007d88:	dcf2      	bgt.n	8007d70 <_printf_i+0x1e8>
 8007d8a:	e7eb      	b.n	8007d64 <_printf_i+0x1dc>
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	f104 0919 	add.w	r9, r4, #25
 8007d92:	e7f5      	b.n	8007d80 <_printf_i+0x1f8>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1ac      	bne.n	8007cf2 <_printf_i+0x16a>
 8007d98:	7803      	ldrb	r3, [r0, #0]
 8007d9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da2:	e76c      	b.n	8007c7e <_printf_i+0xf6>
 8007da4:	08008271 	.word	0x08008271
 8007da8:	08008282 	.word	0x08008282

08007dac <_sbrk_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	4c06      	ldr	r4, [pc, #24]	; (8007dc8 <_sbrk_r+0x1c>)
 8007db0:	2300      	movs	r3, #0
 8007db2:	4605      	mov	r5, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	6023      	str	r3, [r4, #0]
 8007db8:	f7f8 fee2 	bl	8000b80 <_sbrk>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_sbrk_r+0x1a>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_sbrk_r+0x1a>
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	20002e04 	.word	0x20002e04

08007dcc <__sread>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	460c      	mov	r4, r1
 8007dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd4:	f000 f896 	bl	8007f04 <_read_r>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	bfab      	itete	ge
 8007ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dde:	89a3      	ldrhlt	r3, [r4, #12]
 8007de0:	181b      	addge	r3, r3, r0
 8007de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007de6:	bfac      	ite	ge
 8007de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dea:	81a3      	strhlt	r3, [r4, #12]
 8007dec:	bd10      	pop	{r4, pc}

08007dee <__swrite>:
 8007dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	461f      	mov	r7, r3
 8007df4:	898b      	ldrh	r3, [r1, #12]
 8007df6:	05db      	lsls	r3, r3, #23
 8007df8:	4605      	mov	r5, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	d505      	bpl.n	8007e0c <__swrite+0x1e>
 8007e00:	2302      	movs	r3, #2
 8007e02:	2200      	movs	r2, #0
 8007e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e08:	f000 f868 	bl	8007edc <_lseek_r>
 8007e0c:	89a3      	ldrh	r3, [r4, #12]
 8007e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e16:	81a3      	strh	r3, [r4, #12]
 8007e18:	4632      	mov	r2, r6
 8007e1a:	463b      	mov	r3, r7
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e22:	f000 b817 	b.w	8007e54 <_write_r>

08007e26 <__sseek>:
 8007e26:	b510      	push	{r4, lr}
 8007e28:	460c      	mov	r4, r1
 8007e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2e:	f000 f855 	bl	8007edc <_lseek_r>
 8007e32:	1c43      	adds	r3, r0, #1
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	bf15      	itete	ne
 8007e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e42:	81a3      	strheq	r3, [r4, #12]
 8007e44:	bf18      	it	ne
 8007e46:	81a3      	strhne	r3, [r4, #12]
 8007e48:	bd10      	pop	{r4, pc}

08007e4a <__sclose>:
 8007e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4e:	f000 b813 	b.w	8007e78 <_close_r>
	...

08007e54 <_write_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4c07      	ldr	r4, [pc, #28]	; (8007e74 <_write_r+0x20>)
 8007e58:	4605      	mov	r5, r0
 8007e5a:	4608      	mov	r0, r1
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6022      	str	r2, [r4, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f7f8 fe40 	bl	8000ae8 <_write>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_write_r+0x1e>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_write_r+0x1e>
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	20002e04 	.word	0x20002e04

08007e78 <_close_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4c06      	ldr	r4, [pc, #24]	; (8007e94 <_close_r+0x1c>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4605      	mov	r5, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	f7f8 fe48 	bl	8000b18 <_close>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_close_r+0x1a>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_close_r+0x1a>
 8007e90:	602b      	str	r3, [r5, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	20002e04 	.word	0x20002e04

08007e98 <_fstat_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4c07      	ldr	r4, [pc, #28]	; (8007eb8 <_fstat_r+0x20>)
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	4608      	mov	r0, r1
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	f7f8 fe43 	bl	8000b30 <_fstat>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	d102      	bne.n	8007eb4 <_fstat_r+0x1c>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	b103      	cbz	r3, 8007eb4 <_fstat_r+0x1c>
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	bd38      	pop	{r3, r4, r5, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20002e04 	.word	0x20002e04

08007ebc <_isatty_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4c06      	ldr	r4, [pc, #24]	; (8007ed8 <_isatty_r+0x1c>)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	6023      	str	r3, [r4, #0]
 8007ec8:	f7f8 fe42 	bl	8000b50 <_isatty>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_isatty_r+0x1a>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_isatty_r+0x1a>
 8007ed4:	602b      	str	r3, [r5, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	20002e04 	.word	0x20002e04

08007edc <_lseek_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4c07      	ldr	r4, [pc, #28]	; (8007efc <_lseek_r+0x20>)
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	6022      	str	r2, [r4, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f7f8 fe3b 	bl	8000b66 <_lseek>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_lseek_r+0x1e>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_lseek_r+0x1e>
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20002e04 	.word	0x20002e04

08007f00 <__malloc_lock>:
 8007f00:	4770      	bx	lr

08007f02 <__malloc_unlock>:
 8007f02:	4770      	bx	lr

08007f04 <_read_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	4c07      	ldr	r4, [pc, #28]	; (8007f24 <_read_r+0x20>)
 8007f08:	4605      	mov	r5, r0
 8007f0a:	4608      	mov	r0, r1
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	6022      	str	r2, [r4, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f7f8 fdca 	bl	8000aac <_read>
 8007f18:	1c43      	adds	r3, r0, #1
 8007f1a:	d102      	bne.n	8007f22 <_read_r+0x1e>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	b103      	cbz	r3, 8007f22 <_read_r+0x1e>
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	bd38      	pop	{r3, r4, r5, pc}
 8007f24:	20002e04 	.word	0x20002e04

08007f28 <_init>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	bf00      	nop
 8007f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2e:	bc08      	pop	{r3}
 8007f30:	469e      	mov	lr, r3
 8007f32:	4770      	bx	lr

08007f34 <_fini>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr
